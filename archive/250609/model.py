# generated by datamodel-codegen:
#   filename:  schema.docs.graphql
#   timestamp: 2025-05-09T19:49:42+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, TypeAlias, Union

from pydantic import BaseModel, Field

Base64String: TypeAlias = str
"""
A (potentially binary) string encoded using base64.
"""


BigInt: TypeAlias = str
"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""


Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


Date: TypeAlias = str
"""
An ISO-8601 encoded date string.
"""


DateTime: TypeAlias = str
"""
An ISO-8601 encoded UTC date string.
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


GitObjectID: TypeAlias = str
"""
A Git object ID.
"""


GitRefname: TypeAlias = str
"""
A fully qualified reference name (e.g. `refs/heads/master`).
"""


GitSSHRemote: TypeAlias = str
"""
Git SSH string
"""


GitTimestamp: TypeAlias = str
"""
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
"""


HTML: TypeAlias = str
"""
A string containing HTML code.
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


PreciseDateTime: TypeAlias = str
"""
An ISO-8601 encoded UTC date string with millisecond precision.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


URI: TypeAlias = str
"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""


X509Certificate: TypeAlias = str
"""
A valid x509 certificate string
"""


class ActorType(Enum):
    """
    The actor's type.
    """

    TEAM = 'TEAM'
    USER = 'USER'


class AuditLogOrderField(Enum):
    """
    Properties by which Audit Log connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class CheckAnnotationLevel(Enum):
    """
    Represents an annotation's information level.
    """

    FAILURE = 'FAILURE'
    NOTICE = 'NOTICE'
    WARNING = 'WARNING'


class CheckConclusionState(Enum):
    """
    The possible states for a check suite or run conclusion.
    """

    ACTION_REQUIRED = 'ACTION_REQUIRED'
    CANCELLED = 'CANCELLED'
    FAILURE = 'FAILURE'
    NEUTRAL = 'NEUTRAL'
    SKIPPED = 'SKIPPED'
    STALE = 'STALE'
    STARTUP_FAILURE = 'STARTUP_FAILURE'
    SUCCESS = 'SUCCESS'
    TIMED_OUT = 'TIMED_OUT'


class CheckRunState(Enum):
    """
    The possible states of a check run in a status rollup.
    """

    ACTION_REQUIRED = 'ACTION_REQUIRED'
    CANCELLED = 'CANCELLED'
    COMPLETED = 'COMPLETED'
    FAILURE = 'FAILURE'
    IN_PROGRESS = 'IN_PROGRESS'
    NEUTRAL = 'NEUTRAL'
    PENDING = 'PENDING'
    QUEUED = 'QUEUED'
    SKIPPED = 'SKIPPED'
    STALE = 'STALE'
    STARTUP_FAILURE = 'STARTUP_FAILURE'
    SUCCESS = 'SUCCESS'
    TIMED_OUT = 'TIMED_OUT'
    WAITING = 'WAITING'


class CheckRunType(Enum):
    """
    The possible types of check runs.
    """

    ALL = 'ALL'
    LATEST = 'LATEST'


class CheckStatusState(Enum):
    """
    The possible states for a check suite or run status.
    """

    COMPLETED = 'COMPLETED'
    IN_PROGRESS = 'IN_PROGRESS'
    PENDING = 'PENDING'
    QUEUED = 'QUEUED'
    REQUESTED = 'REQUESTED'
    WAITING = 'WAITING'


class CollaboratorAffiliation(Enum):
    """
    Collaborators affiliation level with a subject.
    """

    ALL = 'ALL'
    DIRECT = 'DIRECT'
    OUTSIDE = 'OUTSIDE'


class CommentAuthorAssociation(Enum):
    """
    A comment author association with repository.
    """

    COLLABORATOR = 'COLLABORATOR'
    CONTRIBUTOR = 'CONTRIBUTOR'
    FIRST_TIMER = 'FIRST_TIMER'
    FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR'
    MANNEQUIN = 'MANNEQUIN'
    MEMBER = 'MEMBER'
    NONE = 'NONE'
    OWNER = 'OWNER'


class CommentCannotUpdateReason(Enum):
    """
    The possible errors that will prevent a user from updating a comment.
    """

    ARCHIVED = 'ARCHIVED'
    DENIED = 'DENIED'
    INSUFFICIENT_ACCESS = 'INSUFFICIENT_ACCESS'
    LOCKED = 'LOCKED'
    LOGIN_REQUIRED = 'LOGIN_REQUIRED'
    MAINTENANCE = 'MAINTENANCE'
    VERIFIED_EMAIL_REQUIRED = 'VERIFIED_EMAIL_REQUIRED'


class CommitContributionOrderField(Enum):
    """
    Properties by which commit contribution connections can be ordered.
    """

    COMMIT_COUNT = 'COMMIT_COUNT'
    OCCURRED_AT = 'OCCURRED_AT'


class ComparisonStatus(Enum):
    """
    The status of a git comparison between two refs.
    """

    AHEAD = 'AHEAD'
    BEHIND = 'BEHIND'
    DIVERGED = 'DIVERGED'
    IDENTICAL = 'IDENTICAL'


class ContributionLevel(Enum):
    """
    Varying levels of contributions from none to many.
    """

    FIRST_QUARTILE = 'FIRST_QUARTILE'
    FOURTH_QUARTILE = 'FOURTH_QUARTILE'
    NONE = 'NONE'
    SECOND_QUARTILE = 'SECOND_QUARTILE'
    THIRD_QUARTILE = 'THIRD_QUARTILE'


class DefaultRepositoryPermissionField(Enum):
    """
    The possible base permissions for repositories.
    """

    ADMIN = 'ADMIN'
    NONE = 'NONE'
    READ = 'READ'
    WRITE = 'WRITE'


class DependencyGraphEcosystem(Enum):
    """
    The possible ecosystems of a dependency graph package.
    """

    ACTIONS = 'ACTIONS'
    COMPOSER = 'COMPOSER'
    GO = 'GO'
    MAVEN = 'MAVEN'
    NPM = 'NPM'
    NUGET = 'NUGET'
    PIP = 'PIP'
    PUB = 'PUB'
    RUBYGEMS = 'RUBYGEMS'
    RUST = 'RUST'
    SWIFT = 'SWIFT'


class DeploymentOrderField(Enum):
    """
    Properties by which deployment connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class DeploymentProtectionRuleType(Enum):
    """
    The possible protection rule types.
    """

    BRANCH_POLICY = 'BRANCH_POLICY'
    REQUIRED_REVIEWERS = 'REQUIRED_REVIEWERS'
    WAIT_TIMER = 'WAIT_TIMER'


class DeploymentReviewState(Enum):
    """
    The possible states for a deployment review.
    """

    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'


class DeploymentState(Enum):
    """
    The possible states in which a deployment can be.
    """

    ABANDONED = 'ABANDONED'
    ACTIVE = 'ACTIVE'
    DESTROYED = 'DESTROYED'
    ERROR = 'ERROR'
    FAILURE = 'FAILURE'
    INACTIVE = 'INACTIVE'
    IN_PROGRESS = 'IN_PROGRESS'
    PENDING = 'PENDING'
    QUEUED = 'QUEUED'
    SUCCESS = 'SUCCESS'
    WAITING = 'WAITING'


class DeploymentStatusState(Enum):
    """
    The possible states for a deployment status.
    """

    ERROR = 'ERROR'
    FAILURE = 'FAILURE'
    INACTIVE = 'INACTIVE'
    IN_PROGRESS = 'IN_PROGRESS'
    PENDING = 'PENDING'
    QUEUED = 'QUEUED'
    SUCCESS = 'SUCCESS'
    WAITING = 'WAITING'


class DiffSide(Enum):
    """
    The possible sides of a diff.
    """

    LEFT = 'LEFT'
    RIGHT = 'RIGHT'


class DiscussionCloseReason(Enum):
    """
    The possible reasons for closing a discussion.
    """

    DUPLICATE = 'DUPLICATE'
    OUTDATED = 'OUTDATED'
    RESOLVED = 'RESOLVED'


class DiscussionOrderField(Enum):
    """
    Properties by which discussion connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    UPDATED_AT = 'UPDATED_AT'


class DiscussionPollOptionOrderField(Enum):
    """
    Properties by which discussion poll option connections can be ordered.
    """

    AUTHORED_ORDER = 'AUTHORED_ORDER'
    VOTE_COUNT = 'VOTE_COUNT'


class DiscussionState(Enum):
    """
    The possible states of a discussion.
    """

    CLOSED = 'CLOSED'
    OPEN = 'OPEN'


class DiscussionStateReason(Enum):
    """
    The possible state reasons of a discussion.
    """

    DUPLICATE = 'DUPLICATE'
    OUTDATED = 'OUTDATED'
    REOPENED = 'REOPENED'
    RESOLVED = 'RESOLVED'


class DismissReason(Enum):
    """
    The possible reasons that a Dependabot alert was dismissed.
    """

    FIX_STARTED = 'FIX_STARTED'
    INACCURATE = 'INACCURATE'
    NOT_USED = 'NOT_USED'
    NO_BANDWIDTH = 'NO_BANDWIDTH'
    TOLERABLE_RISK = 'TOLERABLE_RISK'


class EnterpriseAdministratorInvitationOrderField(Enum):
    """
    Properties by which enterprise administrator invitation connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class EnterpriseAdministratorRole(Enum):
    """
    The possible administrator roles in an enterprise account.
    """

    BILLING_MANAGER = 'BILLING_MANAGER'
    OWNER = 'OWNER'
    UNAFFILIATED = 'UNAFFILIATED'


class EnterpriseAllowPrivateRepositoryForkingPolicyValue(Enum):
    """
    The possible values for the enterprise allow private repository forking policy value.
    """

    ENTERPRISE_ORGANIZATIONS = 'ENTERPRISE_ORGANIZATIONS'
    ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS = 'ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS'
    EVERYWHERE = 'EVERYWHERE'
    SAME_ORGANIZATION = 'SAME_ORGANIZATION'
    SAME_ORGANIZATION_USER_ACCOUNTS = 'SAME_ORGANIZATION_USER_ACCOUNTS'
    USER_ACCOUNTS = 'USER_ACCOUNTS'


class EnterpriseDefaultRepositoryPermissionSettingValue(Enum):
    """
    The possible values for the enterprise base repository permission setting.
    """

    ADMIN = 'ADMIN'
    NONE = 'NONE'
    NO_POLICY = 'NO_POLICY'
    READ = 'READ'
    WRITE = 'WRITE'


class EnterpriseDisallowedMethodsSettingValue(Enum):
    """
    The possible values for an enabled/no policy enterprise setting.
    """

    INSECURE = 'INSECURE'
    NO_POLICY = 'NO_POLICY'


class EnterpriseEnabledDisabledSettingValue(Enum):
    """
    The possible values for an enabled/disabled enterprise setting.
    """

    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    NO_POLICY = 'NO_POLICY'


class EnterpriseEnabledSettingValue(Enum):
    """
    The possible values for an enabled/no policy enterprise setting.
    """

    ENABLED = 'ENABLED'
    NO_POLICY = 'NO_POLICY'


class EnterpriseMemberInvitationOrderField(Enum):
    """
    Properties by which enterprise member invitation connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class EnterpriseMemberOrderField(Enum):
    """
    Properties by which enterprise member connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    LOGIN = 'LOGIN'


class EnterpriseMembersCanCreateRepositoriesSettingValue(Enum):
    """
    The possible values for the enterprise members can create repositories setting.
    """

    ALL = 'ALL'
    DISABLED = 'DISABLED'
    NO_POLICY = 'NO_POLICY'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class EnterpriseMembersCanMakePurchasesSettingValue(Enum):
    """
    The possible values for the members can make purchases setting.
    """

    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class EnterpriseMembershipType(Enum):
    """
    The possible values we have for filtering Platform::Objects::User#enterprises.
    """

    ADMIN = 'ADMIN'
    ALL = 'ALL'
    BILLING_MANAGER = 'BILLING_MANAGER'
    ORG_MEMBERSHIP = 'ORG_MEMBERSHIP'


class EnterpriseOrderField(Enum):
    """
    Properties by which enterprise connections can be ordered.
    """

    NAME = 'NAME'


class EnterpriseServerInstallationOrderField(Enum):
    """
    Properties by which Enterprise Server installation connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    CUSTOMER_NAME = 'CUSTOMER_NAME'
    HOST_NAME = 'HOST_NAME'


class EnterpriseServerUserAccountEmailOrderField(Enum):
    """
    Properties by which Enterprise Server user account email connections can be ordered.
    """

    EMAIL = 'EMAIL'


class EnterpriseServerUserAccountOrderField(Enum):
    """
    Properties by which Enterprise Server user account connections can be ordered.
    """

    LOGIN = 'LOGIN'
    REMOTE_CREATED_AT = 'REMOTE_CREATED_AT'


class EnterpriseServerUserAccountsUploadOrderField(Enum):
    """
    Properties by which Enterprise Server user accounts upload connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class EnterpriseServerUserAccountsUploadSyncState(Enum):
    """
    Synchronization state of the Enterprise Server user accounts upload
    """

    FAILURE = 'FAILURE'
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'


class EnterpriseUserAccountMembershipRole(Enum):
    """
    The possible roles for enterprise membership.
    """

    MEMBER = 'MEMBER'
    OWNER = 'OWNER'
    UNAFFILIATED = 'UNAFFILIATED'


class EnterpriseUserDeployment(Enum):
    """
    The possible GitHub Enterprise deployments where this user can exist.
    """

    CLOUD = 'CLOUD'
    SERVER = 'SERVER'


class EnvironmentOrderField(Enum):
    """
    Properties by which environments connections can be ordered
    """

    NAME = 'NAME'


class EnvironmentPinnedFilterField(Enum):
    """
    Properties by which environments connections can be ordered
    """

    ALL = 'ALL'
    NONE = 'NONE'
    ONLY = 'ONLY'


class FileViewedState(Enum):
    """
    The possible viewed states of a file .
    """

    DISMISSED = 'DISMISSED'
    UNVIEWED = 'UNVIEWED'
    VIEWED = 'VIEWED'


class FundingPlatform(Enum):
    """
    The possible funding platforms for repository funding links.
    """

    BUY_ME_A_COFFEE = 'BUY_ME_A_COFFEE'
    COMMUNITY_BRIDGE = 'COMMUNITY_BRIDGE'
    CUSTOM = 'CUSTOM'
    GITHUB = 'GITHUB'
    ISSUEHUNT = 'ISSUEHUNT'
    KO_FI = 'KO_FI'
    LFX_CROWDFUNDING = 'LFX_CROWDFUNDING'
    LIBERAPAY = 'LIBERAPAY'
    OPEN_COLLECTIVE = 'OPEN_COLLECTIVE'
    PATREON = 'PATREON'
    POLAR = 'POLAR'
    THANKS_DEV = 'THANKS_DEV'
    TIDELIFT = 'TIDELIFT'


class GistOrderField(Enum):
    """
    Properties by which gist connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    PUSHED_AT = 'PUSHED_AT'
    UPDATED_AT = 'UPDATED_AT'


class GistPrivacy(Enum):
    """
    The privacy of a Gist
    """

    ALL = 'ALL'
    PUBLIC = 'PUBLIC'
    SECRET = 'SECRET'


class GitSignatureState(Enum):
    """
    The state of a Git signature.
    """

    BAD_CERT = 'BAD_CERT'
    BAD_EMAIL = 'BAD_EMAIL'
    EXPIRED_KEY = 'EXPIRED_KEY'
    GPGVERIFY_ERROR = 'GPGVERIFY_ERROR'
    GPGVERIFY_UNAVAILABLE = 'GPGVERIFY_UNAVAILABLE'
    INVALID = 'INVALID'
    MALFORMED_SIG = 'MALFORMED_SIG'
    NOT_SIGNING_KEY = 'NOT_SIGNING_KEY'
    NO_USER = 'NO_USER'
    OCSP_ERROR = 'OCSP_ERROR'
    OCSP_PENDING = 'OCSP_PENDING'
    OCSP_REVOKED = 'OCSP_REVOKED'
    UNKNOWN_KEY = 'UNKNOWN_KEY'
    UNKNOWN_SIG_TYPE = 'UNKNOWN_SIG_TYPE'
    UNSIGNED = 'UNSIGNED'
    UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL'
    VALID = 'VALID'


class IdentityProviderConfigurationState(Enum):
    """
    The possible states in which authentication can be configured with an identity provider.
    """

    CONFIGURED = 'CONFIGURED'
    ENFORCED = 'ENFORCED'
    UNCONFIGURED = 'UNCONFIGURED'


class IpAllowListEnabledSettingValue(Enum):
    """
    The possible values for the IP allow list enabled setting.
    """

    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class IpAllowListEntryOrderField(Enum):
    """
    Properties by which IP allow list entry connections can be ordered.
    """

    ALLOW_LIST_VALUE = 'ALLOW_LIST_VALUE'
    CREATED_AT = 'CREATED_AT'


class IpAllowListForInstalledAppsEnabledSettingValue(Enum):
    """
    The possible values for the IP allow list configuration for installed GitHub Apps setting.
    """

    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class IssueClosedStateReason(Enum):
    """
    The possible state reasons of a closed issue.
    """

    COMPLETED = 'COMPLETED'
    DUPLICATE = 'DUPLICATE'
    NOT_PLANNED = 'NOT_PLANNED'


class IssueCommentOrderField(Enum):
    """
    Properties by which issue comment connections can be ordered.
    """

    UPDATED_AT = 'UPDATED_AT'


class IssueOrderField(Enum):
    """
    Properties by which issue connections can be ordered.
    """

    COMMENTS = 'COMMENTS'
    CREATED_AT = 'CREATED_AT'
    UPDATED_AT = 'UPDATED_AT'


class IssueState(Enum):
    """
    The possible states of an issue.
    """

    CLOSED = 'CLOSED'
    OPEN = 'OPEN'


class IssueStateReason(Enum):
    """
    The possible state reasons of an issue.
    """

    COMPLETED = 'COMPLETED'
    DUPLICATE = 'DUPLICATE'
    NOT_PLANNED = 'NOT_PLANNED'
    REOPENED = 'REOPENED'


class IssueTimelineItemsItemType(Enum):
    """
    The possible item types found in a timeline.
    """

    ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT'
    ASSIGNED_EVENT = 'ASSIGNED_EVENT'
    CLOSED_EVENT = 'CLOSED_EVENT'
    COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT'
    CONNECTED_EVENT = 'CONNECTED_EVENT'
    CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT'
    CONVERTED_TO_DISCUSSION_EVENT = 'CONVERTED_TO_DISCUSSION_EVENT'
    CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT'
    DEMILESTONED_EVENT = 'DEMILESTONED_EVENT'
    DISCONNECTED_EVENT = 'DISCONNECTED_EVENT'
    ISSUE_COMMENT = 'ISSUE_COMMENT'
    ISSUE_TYPE_ADDED_EVENT = 'ISSUE_TYPE_ADDED_EVENT'
    ISSUE_TYPE_CHANGED_EVENT = 'ISSUE_TYPE_CHANGED_EVENT'
    ISSUE_TYPE_REMOVED_EVENT = 'ISSUE_TYPE_REMOVED_EVENT'
    LABELED_EVENT = 'LABELED_EVENT'
    LOCKED_EVENT = 'LOCKED_EVENT'
    MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT'
    MENTIONED_EVENT = 'MENTIONED_EVENT'
    MILESTONED_EVENT = 'MILESTONED_EVENT'
    MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT'
    PARENT_ISSUE_ADDED_EVENT = 'PARENT_ISSUE_ADDED_EVENT'
    PARENT_ISSUE_REMOVED_EVENT = 'PARENT_ISSUE_REMOVED_EVENT'
    PINNED_EVENT = 'PINNED_EVENT'
    REFERENCED_EVENT = 'REFERENCED_EVENT'
    REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT'
    RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT'
    REOPENED_EVENT = 'REOPENED_EVENT'
    SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT'
    SUB_ISSUE_ADDED_EVENT = 'SUB_ISSUE_ADDED_EVENT'
    SUB_ISSUE_REMOVED_EVENT = 'SUB_ISSUE_REMOVED_EVENT'
    TRANSFERRED_EVENT = 'TRANSFERRED_EVENT'
    UNASSIGNED_EVENT = 'UNASSIGNED_EVENT'
    UNLABELED_EVENT = 'UNLABELED_EVENT'
    UNLOCKED_EVENT = 'UNLOCKED_EVENT'
    UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT'
    UNPINNED_EVENT = 'UNPINNED_EVENT'
    UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
    USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT'


class IssueTypeColor(Enum):
    """
    The possible color for an issue type
    """

    BLUE = 'BLUE'
    GRAY = 'GRAY'
    GREEN = 'GREEN'
    ORANGE = 'ORANGE'
    PINK = 'PINK'
    PURPLE = 'PURPLE'
    RED = 'RED'
    YELLOW = 'YELLOW'


class IssueTypeOrderField(Enum):
    """
    Properties by which issue type connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'


class LabelOrderField(Enum):
    """
    Properties by which label connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'


class LanguageOrderField(Enum):
    """
    Properties by which language connections can be ordered.
    """

    SIZE = 'SIZE'


class LockReason(Enum):
    """
    The possible reasons that an issue or pull request was locked.
    """

    OFF_TOPIC = 'OFF_TOPIC'
    RESOLVED = 'RESOLVED'
    SPAM = 'SPAM'
    TOO_HEATED = 'TOO_HEATED'


class MannequinOrderField(Enum):
    """
    Properties by which mannequins can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    LOGIN = 'LOGIN'


class MergeCommitMessage(Enum):
    """
    The possible default commit messages for merges.
    """

    BLANK = 'BLANK'
    PR_BODY = 'PR_BODY'
    PR_TITLE = 'PR_TITLE'


class MergeCommitTitle(Enum):
    """
    The possible default commit titles for merges.
    """

    MERGE_MESSAGE = 'MERGE_MESSAGE'
    PR_TITLE = 'PR_TITLE'


class MergeQueueEntryState(Enum):
    """
    The possible states for a merge queue entry.
    """

    AWAITING_CHECKS = 'AWAITING_CHECKS'
    LOCKED = 'LOCKED'
    MERGEABLE = 'MERGEABLE'
    QUEUED = 'QUEUED'
    UNMERGEABLE = 'UNMERGEABLE'


class MergeQueueGroupingStrategy(Enum):
    """
    When set to ALLGREEN, the merge commit created by merge queue for each PR in the
    group must pass all required checks to merge. When set to HEADGREEN, only the
    commit at the head of the merge group, i.e. the commit containing changes from
    all of the PRs in the group, must pass its required checks to merge.
    """

    ALLGREEN = 'ALLGREEN'
    HEADGREEN = 'HEADGREEN'


class MergeQueueMergeMethod(Enum):
    """
    Method to use when merging changes from queued pull requests.
    """

    MERGE = 'MERGE'
    REBASE = 'REBASE'
    SQUASH = 'SQUASH'


class MergeQueueMergingStrategy(Enum):
    """
    The possible merging strategies for a merge queue.
    """

    ALLGREEN = 'ALLGREEN'
    HEADGREEN = 'HEADGREEN'


class MergeStateStatus(Enum):
    """
    Detailed status information about a pull request merge.
    """

    BEHIND = 'BEHIND'
    BLOCKED = 'BLOCKED'
    CLEAN = 'CLEAN'
    DIRTY = 'DIRTY'
    DRAFT = 'DRAFT'
    HAS_HOOKS = 'HAS_HOOKS'
    UNKNOWN = 'UNKNOWN'
    UNSTABLE = 'UNSTABLE'


class MergeableState(Enum):
    """
    Whether or not a PullRequest can be merged.
    """

    CONFLICTING = 'CONFLICTING'
    MERGEABLE = 'MERGEABLE'
    UNKNOWN = 'UNKNOWN'


class MigrationSourceType(Enum):
    """
    Represents the different GitHub Enterprise Importer (GEI) migration sources.
    """

    AZURE_DEVOPS = 'AZURE_DEVOPS'
    BITBUCKET_SERVER = 'BITBUCKET_SERVER'
    GITHUB_ARCHIVE = 'GITHUB_ARCHIVE'


class MigrationState(Enum):
    """
    The GitHub Enterprise Importer (GEI) migration state.
    """

    FAILED = 'FAILED'
    FAILED_VALIDATION = 'FAILED_VALIDATION'
    IN_PROGRESS = 'IN_PROGRESS'
    NOT_STARTED = 'NOT_STARTED'
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    QUEUED = 'QUEUED'
    SUCCEEDED = 'SUCCEEDED'


class MilestoneOrderField(Enum):
    """
    Properties by which milestone connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    DUE_DATE = 'DUE_DATE'
    NUMBER = 'NUMBER'
    UPDATED_AT = 'UPDATED_AT'


class MilestoneState(Enum):
    """
    The possible states of a milestone.
    """

    CLOSED = 'CLOSED'
    OPEN = 'OPEN'


class NotificationRestrictionSettingValue(Enum):
    """
    The possible values for the notification restriction setting.
    """

    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class OIDCProviderType(Enum):
    """
    The OIDC identity provider type
    """

    AAD = 'AAD'


class OauthApplicationCreateAuditEntryState(Enum):
    """
    The state of an OAuth application when it was created.
    """

    ACTIVE = 'ACTIVE'
    PENDING_DELETION = 'PENDING_DELETION'
    SUSPENDED = 'SUSPENDED'


class OperationType(Enum):
    """
    The corresponding operation type for the action
    """

    ACCESS = 'ACCESS'
    AUTHENTICATION = 'AUTHENTICATION'
    CREATE = 'CREATE'
    MODIFY = 'MODIFY'
    REMOVE = 'REMOVE'
    RESTORE = 'RESTORE'
    TRANSFER = 'TRANSFER'


class OrderDirection(Enum):
    """
    Possible directions in which to order a list of items when provided an `orderBy` argument.
    """

    ASC = 'ASC'
    DESC = 'DESC'


class OrgAddMemberAuditEntryPermission(Enum):
    """
    The permissions available to members on an Organization.
    """

    ADMIN = 'ADMIN'
    READ = 'READ'


class OrgCreateAuditEntryBillingPlan(Enum):
    """
    The billing plans available for organizations.
    """

    BUSINESS = 'BUSINESS'
    BUSINESS_PLUS = 'BUSINESS_PLUS'
    FREE = 'FREE'
    TIERED_PER_SEAT = 'TIERED_PER_SEAT'
    UNLIMITED = 'UNLIMITED'


class OrgEnterpriseOwnerOrderField(Enum):
    """
    Properties by which enterprise owners can be ordered.
    """

    LOGIN = 'LOGIN'


class OrgRemoveBillingManagerAuditEntryReason(Enum):
    """
    The reason a billing manager was removed from an Organization.
    """

    SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING'
    SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = (
        'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY'
    )
    TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'


class OrgRemoveMemberAuditEntryMembershipType(Enum):
    """
    The type of membership a user has with an Organization.
    """

    ADMIN = 'ADMIN'
    BILLING_MANAGER = 'BILLING_MANAGER'
    DIRECT_MEMBER = 'DIRECT_MEMBER'
    OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR'
    SUSPENDED = 'SUSPENDED'
    UNAFFILIATED = 'UNAFFILIATED'


class OrgRemoveMemberAuditEntryReason(Enum):
    """
    The reason a member was removed from an Organization.
    """

    SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING'
    SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = (
        'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY'
    )
    TWO_FACTOR_ACCOUNT_RECOVERY = 'TWO_FACTOR_ACCOUNT_RECOVERY'
    TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
    USER_ACCOUNT_DELETED = 'USER_ACCOUNT_DELETED'


class OrgRemoveOutsideCollaboratorAuditEntryMembershipType(Enum):
    """
    The type of membership a user has with an Organization.
    """

    BILLING_MANAGER = 'BILLING_MANAGER'
    OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR'
    UNAFFILIATED = 'UNAFFILIATED'


class OrgRemoveOutsideCollaboratorAuditEntryReason(Enum):
    """
    The reason an outside collaborator was removed from an Organization.
    """

    SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING'
    TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'


class OrgUpdateDefaultRepositoryPermissionAuditEntryPermission(Enum):
    """
    The default permission a repository can have in an Organization.
    """

    ADMIN = 'ADMIN'
    NONE = 'NONE'
    READ = 'READ'
    WRITE = 'WRITE'


class OrgUpdateMemberAuditEntryPermission(Enum):
    """
    The permissions available to members on an Organization.
    """

    ADMIN = 'ADMIN'
    READ = 'READ'


class OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility(Enum):
    """
    The permissions available for repository creation on an Organization.
    """

    ALL = 'ALL'
    INTERNAL = 'INTERNAL'
    NONE = 'NONE'
    PRIVATE = 'PRIVATE'
    PRIVATE_INTERNAL = 'PRIVATE_INTERNAL'
    PUBLIC = 'PUBLIC'
    PUBLIC_INTERNAL = 'PUBLIC_INTERNAL'
    PUBLIC_PRIVATE = 'PUBLIC_PRIVATE'


class OrganizationInvitationRole(Enum):
    """
    The possible organization invitation roles.
    """

    ADMIN = 'ADMIN'
    BILLING_MANAGER = 'BILLING_MANAGER'
    DIRECT_MEMBER = 'DIRECT_MEMBER'
    REINSTATE = 'REINSTATE'


class OrganizationInvitationSource(Enum):
    """
    The possible organization invitation sources.
    """

    MEMBER = 'MEMBER'
    SCIM = 'SCIM'
    UNKNOWN = 'UNKNOWN'


class OrganizationInvitationType(Enum):
    """
    The possible organization invitation types.
    """

    EMAIL = 'EMAIL'
    USER = 'USER'


class OrganizationMemberRole(Enum):
    """
    The possible roles within an organization for its members.
    """

    ADMIN = 'ADMIN'
    MEMBER = 'MEMBER'


class OrganizationMembersCanCreateRepositoriesSettingValue(Enum):
    """
    The possible values for the members can create repositories setting on an organization.
    """

    ALL = 'ALL'
    DISABLED = 'DISABLED'
    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'


class OrganizationMigrationState(Enum):
    """
    The Octoshift Organization migration state.
    """

    FAILED = 'FAILED'
    FAILED_VALIDATION = 'FAILED_VALIDATION'
    IN_PROGRESS = 'IN_PROGRESS'
    NOT_STARTED = 'NOT_STARTED'
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    POST_REPO_MIGRATION = 'POST_REPO_MIGRATION'
    PRE_REPO_MIGRATION = 'PRE_REPO_MIGRATION'
    QUEUED = 'QUEUED'
    REPO_MIGRATION = 'REPO_MIGRATION'
    SUCCEEDED = 'SUCCEEDED'


class OrganizationOrderField(Enum):
    """
    Properties by which organization connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    LOGIN = 'LOGIN'


class PackageFileOrderField(Enum):
    """
    Properties by which package file connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class PackageOrderField(Enum):
    """
    Properties by which package connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class PackageType(Enum):
    """
    The possible types of a package.
    """

    DEBIAN = 'DEBIAN'
    DOCKER = 'DOCKER'
    MAVEN = 'MAVEN'
    NPM = 'NPM'
    NUGET = 'NUGET'
    PYPI = 'PYPI'
    RUBYGEMS = 'RUBYGEMS'


class PackageVersionOrderField(Enum):
    """
    Properties by which package version connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class PatchStatus(Enum):
    """
    The possible types of patch statuses.
    """

    ADDED = 'ADDED'
    CHANGED = 'CHANGED'
    COPIED = 'COPIED'
    DELETED = 'DELETED'
    MODIFIED = 'MODIFIED'
    RENAMED = 'RENAMED'


class PinnableItemType(Enum):
    """
    Represents items that can be pinned to a profile page or dashboard.
    """

    GIST = 'GIST'
    ISSUE = 'ISSUE'
    ORGANIZATION = 'ORGANIZATION'
    PROJECT = 'PROJECT'
    PULL_REQUEST = 'PULL_REQUEST'
    REPOSITORY = 'REPOSITORY'
    TEAM = 'TEAM'
    USER = 'USER'


class PinnedDiscussionGradient(Enum):
    """
    Preconfigured gradients that may be used to style discussions pinned within a repository.
    """

    BLUE_MINT = 'BLUE_MINT'
    BLUE_PURPLE = 'BLUE_PURPLE'
    PINK_BLUE = 'PINK_BLUE'
    PURPLE_CORAL = 'PURPLE_CORAL'
    RED_ORANGE = 'RED_ORANGE'


class PinnedDiscussionPattern(Enum):
    """
    Preconfigured background patterns that may be used to style discussions pinned within a repository.
    """

    CHEVRON_UP = 'CHEVRON_UP'
    DOT = 'DOT'
    DOT_FILL = 'DOT_FILL'
    HEART_FILL = 'HEART_FILL'
    PLUS = 'PLUS'
    ZAP = 'ZAP'


class PinnedEnvironmentOrderField(Enum):
    """
    Properties by which pinned environments connections can be ordered
    """

    POSITION = 'POSITION'


class ProjectCardArchivedState(Enum):
    """
    The possible archived states of a project card.
    """

    ARCHIVED = 'ARCHIVED'
    NOT_ARCHIVED = 'NOT_ARCHIVED'


class ProjectCardState(Enum):
    """
    Various content states of a ProjectCard
    """

    CONTENT_ONLY = 'CONTENT_ONLY'
    NOTE_ONLY = 'NOTE_ONLY'
    REDACTED = 'REDACTED'


class ProjectColumnPurpose(Enum):
    """
    The semantic purpose of the column - todo, in progress, or done.
    """

    DONE = 'DONE'
    IN_PROGRESS = 'IN_PROGRESS'
    TODO = 'TODO'


class ProjectOrderField(Enum):
    """
    Properties by which project connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'
    UPDATED_AT = 'UPDATED_AT'


class ProjectState(Enum):
    """
    State of the project; either 'open' or 'closed'
    """

    CLOSED = 'CLOSED'
    OPEN = 'OPEN'


class ProjectTemplate(Enum):
    """
    GitHub-provided templates for Projects
    """

    AUTOMATED_KANBAN_V2 = 'AUTOMATED_KANBAN_V2'
    AUTOMATED_REVIEWS_KANBAN = 'AUTOMATED_REVIEWS_KANBAN'
    BASIC_KANBAN = 'BASIC_KANBAN'
    BUG_TRIAGE = 'BUG_TRIAGE'


class ProjectV2CustomFieldType(Enum):
    """
    The type of a project field.
    """

    DATE = 'DATE'
    ITERATION = 'ITERATION'
    NUMBER = 'NUMBER'
    SINGLE_SELECT = 'SINGLE_SELECT'
    TEXT = 'TEXT'


class ProjectV2FieldOrderField(Enum):
    """
    Properties by which project v2 field connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'
    POSITION = 'POSITION'


class ProjectV2FieldType(Enum):
    """
    The type of a project field.
    """

    ASSIGNEES = 'ASSIGNEES'
    DATE = 'DATE'
    ISSUE_TYPE = 'ISSUE_TYPE'
    ITERATION = 'ITERATION'
    LABELS = 'LABELS'
    LINKED_PULL_REQUESTS = 'LINKED_PULL_REQUESTS'
    MILESTONE = 'MILESTONE'
    NUMBER = 'NUMBER'
    PARENT_ISSUE = 'PARENT_ISSUE'
    REPOSITORY = 'REPOSITORY'
    REVIEWERS = 'REVIEWERS'
    SINGLE_SELECT = 'SINGLE_SELECT'
    SUB_ISSUES_PROGRESS = 'SUB_ISSUES_PROGRESS'
    TEXT = 'TEXT'
    TITLE = 'TITLE'
    TRACKED_BY = 'TRACKED_BY'
    TRACKS = 'TRACKS'


class ProjectV2ItemFieldValueOrderField(Enum):
    """
    Properties by which project v2 item field value connections can be ordered.
    """

    POSITION = 'POSITION'


class ProjectV2ItemOrderField(Enum):
    """
    Properties by which project v2 item connections can be ordered.
    """

    POSITION = 'POSITION'


class ProjectV2ItemType(Enum):
    """
    The type of a project item.
    """

    DRAFT_ISSUE = 'DRAFT_ISSUE'
    ISSUE = 'ISSUE'
    PULL_REQUEST = 'PULL_REQUEST'
    REDACTED = 'REDACTED'


class ProjectV2OrderField(Enum):
    """
    Properties by which projects can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NUMBER = 'NUMBER'
    TITLE = 'TITLE'
    UPDATED_AT = 'UPDATED_AT'


class ProjectV2PermissionLevel(Enum):
    """
    The possible roles of a collaborator on a project.
    """

    ADMIN = 'ADMIN'
    READ = 'READ'
    WRITE = 'WRITE'


class ProjectV2Roles(Enum):
    """
    The possible roles of a collaborator on a project.
    """

    ADMIN = 'ADMIN'
    NONE = 'NONE'
    READER = 'READER'
    WRITER = 'WRITER'


class ProjectV2SingleSelectFieldOptionColor(Enum):
    """
    The display color of a single-select field option.
    """

    BLUE = 'BLUE'
    GRAY = 'GRAY'
    GREEN = 'GREEN'
    ORANGE = 'ORANGE'
    PINK = 'PINK'
    PURPLE = 'PURPLE'
    RED = 'RED'
    YELLOW = 'YELLOW'


class ProjectV2State(Enum):
    """
    The possible states of a project v2.
    """

    CLOSED = 'CLOSED'
    OPEN = 'OPEN'


class ProjectV2StatusUpdateOrderField(Enum):
    """
    Properties by which project v2 status updates can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class ProjectV2StatusUpdateStatus(Enum):
    """
    The possible statuses of a project v2.
    """

    AT_RISK = 'AT_RISK'
    COMPLETE = 'COMPLETE'
    INACTIVE = 'INACTIVE'
    OFF_TRACK = 'OFF_TRACK'
    ON_TRACK = 'ON_TRACK'


class ProjectV2ViewLayout(Enum):
    """
    The layout of a project v2 view.
    """

    BOARD_LAYOUT = 'BOARD_LAYOUT'
    ROADMAP_LAYOUT = 'ROADMAP_LAYOUT'
    TABLE_LAYOUT = 'TABLE_LAYOUT'


class ProjectV2ViewOrderField(Enum):
    """
    Properties by which project v2 view connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'
    POSITION = 'POSITION'


class ProjectV2WorkflowsOrderField(Enum):
    """
    Properties by which project workflows can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'
    NUMBER = 'NUMBER'
    UPDATED_AT = 'UPDATED_AT'


class PullRequestAllowedMergeMethods(Enum):
    """
    Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.
    """

    MERGE = 'MERGE'
    REBASE = 'REBASE'
    SQUASH = 'SQUASH'


class PullRequestBranchUpdateMethod(Enum):
    """
    The possible methods for updating a pull request's head branch with the base branch.
    """

    MERGE = 'MERGE'
    REBASE = 'REBASE'


class PullRequestMergeMethod(Enum):
    """
    Represents available types of methods to use when merging a pull request.
    """

    MERGE = 'MERGE'
    REBASE = 'REBASE'
    SQUASH = 'SQUASH'


class PullRequestOrderField(Enum):
    """
    Properties by which pull_requests connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    UPDATED_AT = 'UPDATED_AT'


class PullRequestReviewCommentState(Enum):
    """
    The possible states of a pull request review comment.
    """

    PENDING = 'PENDING'
    SUBMITTED = 'SUBMITTED'


class PullRequestReviewDecision(Enum):
    """
    The review status of a pull request.
    """

    APPROVED = 'APPROVED'
    CHANGES_REQUESTED = 'CHANGES_REQUESTED'
    REVIEW_REQUIRED = 'REVIEW_REQUIRED'


class PullRequestReviewEvent(Enum):
    """
    The possible events to perform on a pull request review.
    """

    APPROVE = 'APPROVE'
    COMMENT = 'COMMENT'
    DISMISS = 'DISMISS'
    REQUEST_CHANGES = 'REQUEST_CHANGES'


class PullRequestReviewState(Enum):
    """
    The possible states of a pull request review.
    """

    APPROVED = 'APPROVED'
    CHANGES_REQUESTED = 'CHANGES_REQUESTED'
    COMMENTED = 'COMMENTED'
    DISMISSED = 'DISMISSED'
    PENDING = 'PENDING'


class PullRequestReviewThreadSubjectType(Enum):
    """
    The possible subject types of a pull request review comment.
    """

    FILE = 'FILE'
    LINE = 'LINE'


class PullRequestState(Enum):
    """
    The possible states of a pull request.
    """

    CLOSED = 'CLOSED'
    MERGED = 'MERGED'
    OPEN = 'OPEN'


class PullRequestTimelineItemsItemType(Enum):
    """
    The possible item types found in a timeline.
    """

    ADDED_TO_MERGE_QUEUE_EVENT = 'ADDED_TO_MERGE_QUEUE_EVENT'
    ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT'
    ASSIGNED_EVENT = 'ASSIGNED_EVENT'
    AUTOMATIC_BASE_CHANGE_FAILED_EVENT = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT'
    AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT'
    AUTO_MERGE_DISABLED_EVENT = 'AUTO_MERGE_DISABLED_EVENT'
    AUTO_MERGE_ENABLED_EVENT = 'AUTO_MERGE_ENABLED_EVENT'
    AUTO_REBASE_ENABLED_EVENT = 'AUTO_REBASE_ENABLED_EVENT'
    AUTO_SQUASH_ENABLED_EVENT = 'AUTO_SQUASH_ENABLED_EVENT'
    BASE_REF_CHANGED_EVENT = 'BASE_REF_CHANGED_EVENT'
    BASE_REF_DELETED_EVENT = 'BASE_REF_DELETED_EVENT'
    BASE_REF_FORCE_PUSHED_EVENT = 'BASE_REF_FORCE_PUSHED_EVENT'
    CLOSED_EVENT = 'CLOSED_EVENT'
    COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT'
    CONNECTED_EVENT = 'CONNECTED_EVENT'
    CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT'
    CONVERTED_TO_DISCUSSION_EVENT = 'CONVERTED_TO_DISCUSSION_EVENT'
    CONVERT_TO_DRAFT_EVENT = 'CONVERT_TO_DRAFT_EVENT'
    CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT'
    DEMILESTONED_EVENT = 'DEMILESTONED_EVENT'
    DEPLOYED_EVENT = 'DEPLOYED_EVENT'
    DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT'
    DISCONNECTED_EVENT = 'DISCONNECTED_EVENT'
    HEAD_REF_DELETED_EVENT = 'HEAD_REF_DELETED_EVENT'
    HEAD_REF_FORCE_PUSHED_EVENT = 'HEAD_REF_FORCE_PUSHED_EVENT'
    HEAD_REF_RESTORED_EVENT = 'HEAD_REF_RESTORED_EVENT'
    ISSUE_COMMENT = 'ISSUE_COMMENT'
    ISSUE_TYPE_ADDED_EVENT = 'ISSUE_TYPE_ADDED_EVENT'
    ISSUE_TYPE_CHANGED_EVENT = 'ISSUE_TYPE_CHANGED_EVENT'
    ISSUE_TYPE_REMOVED_EVENT = 'ISSUE_TYPE_REMOVED_EVENT'
    LABELED_EVENT = 'LABELED_EVENT'
    LOCKED_EVENT = 'LOCKED_EVENT'
    MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT'
    MENTIONED_EVENT = 'MENTIONED_EVENT'
    MERGED_EVENT = 'MERGED_EVENT'
    MILESTONED_EVENT = 'MILESTONED_EVENT'
    MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT'
    PARENT_ISSUE_ADDED_EVENT = 'PARENT_ISSUE_ADDED_EVENT'
    PARENT_ISSUE_REMOVED_EVENT = 'PARENT_ISSUE_REMOVED_EVENT'
    PINNED_EVENT = 'PINNED_EVENT'
    PULL_REQUEST_COMMIT = 'PULL_REQUEST_COMMIT'
    PULL_REQUEST_COMMIT_COMMENT_THREAD = 'PULL_REQUEST_COMMIT_COMMENT_THREAD'
    PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW'
    PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD'
    PULL_REQUEST_REVISION_MARKER = 'PULL_REQUEST_REVISION_MARKER'
    READY_FOR_REVIEW_EVENT = 'READY_FOR_REVIEW_EVENT'
    REFERENCED_EVENT = 'REFERENCED_EVENT'
    REMOVED_FROM_MERGE_QUEUE_EVENT = 'REMOVED_FROM_MERGE_QUEUE_EVENT'
    REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT'
    RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT'
    REOPENED_EVENT = 'REOPENED_EVENT'
    REVIEW_DISMISSED_EVENT = 'REVIEW_DISMISSED_EVENT'
    REVIEW_REQUESTED_EVENT = 'REVIEW_REQUESTED_EVENT'
    REVIEW_REQUEST_REMOVED_EVENT = 'REVIEW_REQUEST_REMOVED_EVENT'
    SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT'
    SUB_ISSUE_ADDED_EVENT = 'SUB_ISSUE_ADDED_EVENT'
    SUB_ISSUE_REMOVED_EVENT = 'SUB_ISSUE_REMOVED_EVENT'
    TRANSFERRED_EVENT = 'TRANSFERRED_EVENT'
    UNASSIGNED_EVENT = 'UNASSIGNED_EVENT'
    UNLABELED_EVENT = 'UNLABELED_EVENT'
    UNLOCKED_EVENT = 'UNLOCKED_EVENT'
    UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT'
    UNPINNED_EVENT = 'UNPINNED_EVENT'
    UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
    USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT'


class PullRequestUpdateState(Enum):
    """
    The possible target states when updating a pull request.
    """

    CLOSED = 'CLOSED'
    OPEN = 'OPEN'


class ReactionContent(Enum):
    """
    Emojis that can be attached to Issues, Pull Requests and Comments.
    """

    CONFUSED = 'CONFUSED'
    EYES = 'EYES'
    HEART = 'HEART'
    HOORAY = 'HOORAY'
    LAUGH = 'LAUGH'
    ROCKET = 'ROCKET'
    THUMBS_DOWN = 'THUMBS_DOWN'
    THUMBS_UP = 'THUMBS_UP'


class ReactionOrderField(Enum):
    """
    A list of fields that reactions can be ordered by.
    """

    CREATED_AT = 'CREATED_AT'


class RefOrderField(Enum):
    """
    Properties by which ref connections can be ordered.
    """

    ALPHABETICAL = 'ALPHABETICAL'
    TAG_COMMIT_DATE = 'TAG_COMMIT_DATE'


class ReleaseOrderField(Enum):
    """
    Properties by which release connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'


class RepoAccessAuditEntryVisibility(Enum):
    """
    The privacy of a repository
    """

    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class RepoAddMemberAuditEntryVisibility(Enum):
    """
    The privacy of a repository
    """

    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class RepoArchivedAuditEntryVisibility(Enum):
    """
    The privacy of a repository
    """

    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class RepoChangeMergeSettingAuditEntryMergeType(Enum):
    """
    The merge options available for pull requests to this repository.
    """

    MERGE = 'MERGE'
    REBASE = 'REBASE'
    SQUASH = 'SQUASH'


class RepoCreateAuditEntryVisibility(Enum):
    """
    The privacy of a repository
    """

    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class RepoDestroyAuditEntryVisibility(Enum):
    """
    The privacy of a repository
    """

    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class RepoRemoveMemberAuditEntryVisibility(Enum):
    """
    The privacy of a repository
    """

    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class ReportedContentClassifiers(Enum):
    """
    The reasons a piece of content can be reported or minimized.
    """

    ABUSE = 'ABUSE'
    DUPLICATE = 'DUPLICATE'
    OFF_TOPIC = 'OFF_TOPIC'
    OUTDATED = 'OUTDATED'
    RESOLVED = 'RESOLVED'
    SPAM = 'SPAM'


class RepositoryAffiliation(Enum):
    """
    The affiliation of a user to a repository
    """

    COLLABORATOR = 'COLLABORATOR'
    ORGANIZATION_MEMBER = 'ORGANIZATION_MEMBER'
    OWNER = 'OWNER'


class RepositoryContributionType(Enum):
    """
    The reason a repository is listed as 'contributed'.
    """

    COMMIT = 'COMMIT'
    ISSUE = 'ISSUE'
    PULL_REQUEST = 'PULL_REQUEST'
    PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW'
    REPOSITORY = 'REPOSITORY'


class RepositoryInteractionLimit(Enum):
    """
    A repository interaction limit.
    """

    COLLABORATORS_ONLY = 'COLLABORATORS_ONLY'
    CONTRIBUTORS_ONLY = 'CONTRIBUTORS_ONLY'
    EXISTING_USERS = 'EXISTING_USERS'
    NO_LIMIT = 'NO_LIMIT'


class RepositoryInteractionLimitExpiry(Enum):
    """
    The length for a repository interaction limit to be enabled for.
    """

    ONE_DAY = 'ONE_DAY'
    ONE_MONTH = 'ONE_MONTH'
    ONE_WEEK = 'ONE_WEEK'
    SIX_MONTHS = 'SIX_MONTHS'
    THREE_DAYS = 'THREE_DAYS'


class RepositoryInteractionLimitOrigin(Enum):
    """
    Indicates where an interaction limit is configured.
    """

    ORGANIZATION = 'ORGANIZATION'
    REPOSITORY = 'REPOSITORY'
    USER = 'USER'


class RepositoryInvitationOrderField(Enum):
    """
    Properties by which repository invitation connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class RepositoryLockReason(Enum):
    """
    The possible reasons a given repository could be in a locked state.
    """

    BILLING = 'BILLING'
    MIGRATING = 'MIGRATING'
    MOVING = 'MOVING'
    RENAME = 'RENAME'
    TRADE_RESTRICTION = 'TRADE_RESTRICTION'
    TRANSFERRING_OWNERSHIP = 'TRANSFERRING_OWNERSHIP'


class RepositoryMigrationOrderDirection(Enum):
    """
    Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
    """

    ASC = 'ASC'
    DESC = 'DESC'


class RepositoryMigrationOrderField(Enum):
    """
    Properties by which repository migrations can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class RepositoryOrderField(Enum):
    """
    Properties by which repository connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'
    PUSHED_AT = 'PUSHED_AT'
    STARGAZERS = 'STARGAZERS'
    UPDATED_AT = 'UPDATED_AT'


class RepositoryPermission(Enum):
    """
    The access level to a repository
    """

    ADMIN = 'ADMIN'
    MAINTAIN = 'MAINTAIN'
    READ = 'READ'
    TRIAGE = 'TRIAGE'
    WRITE = 'WRITE'


class RepositoryPrivacy(Enum):
    """
    The privacy of a repository
    """

    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class RepositoryRuleOrderField(Enum):
    """
    Properties by which repository rule connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    TYPE = 'TYPE'
    UPDATED_AT = 'UPDATED_AT'


class RepositoryRuleType(Enum):
    """
    The rule types supported in rulesets
    """

    AUTHORIZATION = 'AUTHORIZATION'
    BRANCH_NAME_PATTERN = 'BRANCH_NAME_PATTERN'
    CODE_SCANNING = 'CODE_SCANNING'
    COMMITTER_EMAIL_PATTERN = 'COMMITTER_EMAIL_PATTERN'
    COMMIT_AUTHOR_EMAIL_PATTERN = 'COMMIT_AUTHOR_EMAIL_PATTERN'
    COMMIT_MESSAGE_PATTERN = 'COMMIT_MESSAGE_PATTERN'
    CREATION = 'CREATION'
    DELETION = 'DELETION'
    FILE_EXTENSION_RESTRICTION = 'FILE_EXTENSION_RESTRICTION'
    FILE_PATH_RESTRICTION = 'FILE_PATH_RESTRICTION'
    LOCK_BRANCH = 'LOCK_BRANCH'
    MAX_FILE_PATH_LENGTH = 'MAX_FILE_PATH_LENGTH'
    MAX_FILE_SIZE = 'MAX_FILE_SIZE'
    MAX_REF_UPDATES = 'MAX_REF_UPDATES'
    MERGE_QUEUE = 'MERGE_QUEUE'
    MERGE_QUEUE_LOCKED_REF = 'MERGE_QUEUE_LOCKED_REF'
    NON_FAST_FORWARD = 'NON_FAST_FORWARD'
    PULL_REQUEST = 'PULL_REQUEST'
    REQUIRED_DEPLOYMENTS = 'REQUIRED_DEPLOYMENTS'
    REQUIRED_LINEAR_HISTORY = 'REQUIRED_LINEAR_HISTORY'
    REQUIRED_REVIEW_THREAD_RESOLUTION = 'REQUIRED_REVIEW_THREAD_RESOLUTION'
    REQUIRED_SIGNATURES = 'REQUIRED_SIGNATURES'
    REQUIRED_STATUS_CHECKS = 'REQUIRED_STATUS_CHECKS'
    REQUIRED_WORKFLOW_STATUS_CHECKS = 'REQUIRED_WORKFLOW_STATUS_CHECKS'
    SECRET_SCANNING = 'SECRET_SCANNING'
    TAG = 'TAG'
    TAG_NAME_PATTERN = 'TAG_NAME_PATTERN'
    UPDATE = 'UPDATE'
    WORKFLOWS = 'WORKFLOWS'
    WORKFLOW_UPDATES = 'WORKFLOW_UPDATES'


class RepositoryRulesetBypassActorBypassMode(Enum):
    """
    The bypass mode for a specific actor on a ruleset.
    """

    ALWAYS = 'ALWAYS'
    PULL_REQUEST = 'PULL_REQUEST'


class RepositoryRulesetTarget(Enum):
    """
    The targets supported for rulesets.
    """

    BRANCH = 'BRANCH'
    PUSH = 'PUSH'
    REPOSITORY = 'REPOSITORY'
    TAG = 'TAG'


class RepositorySuggestedActorFilter(Enum):
    """
    The possible filters for suggested actors in a repository
    """

    CAN_BE_ASSIGNED = 'CAN_BE_ASSIGNED'
    CAN_BE_AUTHOR = 'CAN_BE_AUTHOR'


class RepositoryVisibility(Enum):
    """
    The repository's visibility level.
    """

    INTERNAL = 'INTERNAL'
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class RepositoryVulnerabilityAlertDependencyRelationship(Enum):
    """
    The possible relationships of an alert's dependency.
    """

    DIRECT = 'DIRECT'
    TRANSITIVE = 'TRANSITIVE'
    UNKNOWN = 'UNKNOWN'


class RepositoryVulnerabilityAlertDependencyScope(Enum):
    """
    The possible scopes of an alert's dependency.
    """

    DEVELOPMENT = 'DEVELOPMENT'
    RUNTIME = 'RUNTIME'


class RepositoryVulnerabilityAlertState(Enum):
    """
    The possible states of an alert
    """

    AUTO_DISMISSED = 'AUTO_DISMISSED'
    DISMISSED = 'DISMISSED'
    FIXED = 'FIXED'
    OPEN = 'OPEN'


class RequestableCheckStatusState(Enum):
    """
    The possible states that can be requested when creating a check run.
    """

    COMPLETED = 'COMPLETED'
    IN_PROGRESS = 'IN_PROGRESS'
    PENDING = 'PENDING'
    QUEUED = 'QUEUED'
    WAITING = 'WAITING'


class RoleInOrganization(Enum):
    """
    Possible roles a user may have in relation to an organization.
    """

    DIRECT_MEMBER = 'DIRECT_MEMBER'
    OWNER = 'OWNER'
    UNAFFILIATED = 'UNAFFILIATED'


class RuleEnforcement(Enum):
    """
    The level of enforcement for a rule or ruleset.
    """

    ACTIVE = 'ACTIVE'
    DISABLED = 'DISABLED'
    EVALUATE = 'EVALUATE'


class SamlDigestAlgorithm(Enum):
    """
    The possible digest algorithms used to sign SAML requests for an identity provider.
    """

    SHA1 = 'SHA1'
    SHA256 = 'SHA256'
    SHA384 = 'SHA384'
    SHA512 = 'SHA512'


class SamlSignatureAlgorithm(Enum):
    """
    The possible signature algorithms used to sign SAML requests for a Identity Provider.
    """

    RSA_SHA1 = 'RSA_SHA1'
    RSA_SHA256 = 'RSA_SHA256'
    RSA_SHA384 = 'RSA_SHA384'
    RSA_SHA512 = 'RSA_SHA512'


class SavedReplyOrderField(Enum):
    """
    Properties by which saved reply connections can be ordered.
    """

    UPDATED_AT = 'UPDATED_AT'


class SearchType(Enum):
    """
    Represents the individual results of a search.
    """

    DISCUSSION = 'DISCUSSION'
    ISSUE = 'ISSUE'
    ISSUE_ADVANCED = 'ISSUE_ADVANCED'
    REPOSITORY = 'REPOSITORY'
    USER = 'USER'


class SecurityAdvisoryClassification(Enum):
    """
    Classification of the advisory.
    """

    GENERAL = 'GENERAL'
    MALWARE = 'MALWARE'


class SecurityAdvisoryEcosystem(Enum):
    """
    The possible ecosystems of a security vulnerability's package.
    """

    ACTIONS = 'ACTIONS'
    COMPOSER = 'COMPOSER'
    ERLANG = 'ERLANG'
    GO = 'GO'
    MAVEN = 'MAVEN'
    NPM = 'NPM'
    NUGET = 'NUGET'
    PIP = 'PIP'
    PUB = 'PUB'
    RUBYGEMS = 'RUBYGEMS'
    RUST = 'RUST'
    SWIFT = 'SWIFT'


class SecurityAdvisoryIdentifierType(Enum):
    """
    Identifier formats available for advisories.
    """

    CVE = 'CVE'
    GHSA = 'GHSA'


class SecurityAdvisoryOrderField(Enum):
    """
    Properties by which security advisory connections can be ordered.
    """

    EPSS_PERCENTAGE = 'EPSS_PERCENTAGE'
    EPSS_PERCENTILE = 'EPSS_PERCENTILE'
    PUBLISHED_AT = 'PUBLISHED_AT'
    UPDATED_AT = 'UPDATED_AT'


class SecurityAdvisorySeverity(Enum):
    """
    Severity of the vulnerability.
    """

    CRITICAL = 'CRITICAL'
    HIGH = 'HIGH'
    LOW = 'LOW'
    MODERATE = 'MODERATE'


class SecurityVulnerabilityOrderField(Enum):
    """
    Properties by which security vulnerability connections can be ordered.
    """

    UPDATED_AT = 'UPDATED_AT'


class SocialAccountProvider(Enum):
    """
    Software or company that hosts social media accounts.
    """

    BLUESKY = 'BLUESKY'
    FACEBOOK = 'FACEBOOK'
    GENERIC = 'GENERIC'
    HOMETOWN = 'HOMETOWN'
    INSTAGRAM = 'INSTAGRAM'
    LINKEDIN = 'LINKEDIN'
    MASTODON = 'MASTODON'
    NPM = 'NPM'
    REDDIT = 'REDDIT'
    TWITCH = 'TWITCH'
    TWITTER = 'TWITTER'
    YOUTUBE = 'YOUTUBE'


class SponsorAndLifetimeValueOrderField(Enum):
    """
    Properties by which sponsor and lifetime value connections can be ordered.
    """

    LIFETIME_VALUE = 'LIFETIME_VALUE'
    SPONSOR_LOGIN = 'SPONSOR_LOGIN'
    SPONSOR_RELEVANCE = 'SPONSOR_RELEVANCE'


class SponsorOrderField(Enum):
    """
    Properties by which sponsor connections can be ordered.
    """

    LOGIN = 'LOGIN'
    RELEVANCE = 'RELEVANCE'


class SponsorableOrderField(Enum):
    """
    Properties by which sponsorable connections can be ordered.
    """

    LOGIN = 'LOGIN'


class SponsorsActivityAction(Enum):
    """
    The possible actions that GitHub Sponsors activities can represent.
    """

    CANCELLED_SPONSORSHIP = 'CANCELLED_SPONSORSHIP'
    NEW_SPONSORSHIP = 'NEW_SPONSORSHIP'
    PENDING_CHANGE = 'PENDING_CHANGE'
    REFUND = 'REFUND'
    SPONSOR_MATCH_DISABLED = 'SPONSOR_MATCH_DISABLED'
    TIER_CHANGE = 'TIER_CHANGE'


class SponsorsActivityOrderField(Enum):
    """
    Properties by which GitHub Sponsors activity connections can be ordered.
    """

    TIMESTAMP = 'TIMESTAMP'


class SponsorsActivityPeriod(Enum):
    """
    The possible time periods for which Sponsors activities can be requested.
    """

    ALL = 'ALL'
    DAY = 'DAY'
    MONTH = 'MONTH'
    WEEK = 'WEEK'


class SponsorsCountryOrRegionCode(Enum):
    """
    Represents countries or regions for billing and residence for a GitHub Sponsors profile.
    """

    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AI = 'AI'
    AL = 'AL'
    AM = 'AM'
    AO = 'AO'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AW = 'AW'
    AX = 'AX'
    AZ = 'AZ'
    BA = 'BA'
    BB = 'BB'
    BD = 'BD'
    BE = 'BE'
    BF = 'BF'
    BG = 'BG'
    BH = 'BH'
    BI = 'BI'
    BJ = 'BJ'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BO = 'BO'
    BQ = 'BQ'
    BR = 'BR'
    BS = 'BS'
    BT = 'BT'
    BV = 'BV'
    BW = 'BW'
    BY = 'BY'
    BZ = 'BZ'
    CA = 'CA'
    CC = 'CC'
    CD = 'CD'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CR = 'CR'
    CV = 'CV'
    CW = 'CW'
    CX = 'CX'
    CY = 'CY'
    CZ = 'CZ'
    DE = 'DE'
    DJ = 'DJ'
    DK = 'DK'
    DM = 'DM'
    DO = 'DO'
    DZ = 'DZ'
    EC = 'EC'
    EE = 'EE'
    EG = 'EG'
    EH = 'EH'
    ER = 'ER'
    ES = 'ES'
    ET = 'ET'
    FI = 'FI'
    FJ = 'FJ'
    FK = 'FK'
    FM = 'FM'
    FO = 'FO'
    FR = 'FR'
    GA = 'GA'
    GB = 'GB'
    GD = 'GD'
    GE = 'GE'
    GF = 'GF'
    GG = 'GG'
    GH = 'GH'
    GI = 'GI'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GP = 'GP'
    GQ = 'GQ'
    GR = 'GR'
    GS = 'GS'
    GT = 'GT'
    GU = 'GU'
    GW = 'GW'
    GY = 'GY'
    HK = 'HK'
    HM = 'HM'
    HN = 'HN'
    HR = 'HR'
    HT = 'HT'
    HU = 'HU'
    ID = 'ID'
    IE = 'IE'
    IL = 'IL'
    IM = 'IM'
    IN = 'IN'
    IO = 'IO'
    IQ = 'IQ'
    IR = 'IR'
    IS = 'IS'
    IT = 'IT'
    JE = 'JE'
    JM = 'JM'
    JO = 'JO'
    JP = 'JP'
    KE = 'KE'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KM = 'KM'
    KN = 'KN'
    KR = 'KR'
    KW = 'KW'
    KY = 'KY'
    KZ = 'KZ'
    LA = 'LA'
    LB = 'LB'
    LC = 'LC'
    LI = 'LI'
    LK = 'LK'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    LU = 'LU'
    LV = 'LV'
    LY = 'LY'
    MA = 'MA'
    MC = 'MC'
    MD = 'MD'
    ME = 'ME'
    MF = 'MF'
    MG = 'MG'
    MH = 'MH'
    MK = 'MK'
    ML = 'ML'
    MM = 'MM'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MQ = 'MQ'
    MR = 'MR'
    MS = 'MS'
    MT = 'MT'
    MU = 'MU'
    MV = 'MV'
    MW = 'MW'
    MX = 'MX'
    MY = 'MY'
    MZ = 'MZ'
    NA = 'NA'
    NC = 'NC'
    NE = 'NE'
    NF = 'NF'
    NG = 'NG'
    NI = 'NI'
    NL = 'NL'
    NO = 'NO'
    NP = 'NP'
    NR = 'NR'
    NU = 'NU'
    NZ = 'NZ'
    OM = 'OM'
    PA = 'PA'
    PE = 'PE'
    PF = 'PF'
    PG = 'PG'
    PH = 'PH'
    PK = 'PK'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PR = 'PR'
    PS = 'PS'
    PT = 'PT'
    PW = 'PW'
    PY = 'PY'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RS = 'RS'
    RU = 'RU'
    RW = 'RW'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SG = 'SG'
    SH = 'SH'
    SI = 'SI'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SO = 'SO'
    SR = 'SR'
    SS = 'SS'
    ST = 'ST'
    SV = 'SV'
    SX = 'SX'
    SZ = 'SZ'
    TC = 'TC'
    TD = 'TD'
    TF = 'TF'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TO = 'TO'
    TR = 'TR'
    TT = 'TT'
    TV = 'TV'
    TW = 'TW'
    TZ = 'TZ'
    UA = 'UA'
    UG = 'UG'
    UM = 'UM'
    US = 'US'
    UY = 'UY'
    UZ = 'UZ'
    VA = 'VA'
    VC = 'VC'
    VE = 'VE'
    VG = 'VG'
    VI = 'VI'
    VN = 'VN'
    VU = 'VU'
    WF = 'WF'
    WS = 'WS'
    YE = 'YE'
    YT = 'YT'
    ZA = 'ZA'
    ZM = 'ZM'
    ZW = 'ZW'


class SponsorsGoalKind(Enum):
    """
    The different kinds of goals a GitHub Sponsors member can have.
    """

    MONTHLY_SPONSORSHIP_AMOUNT = 'MONTHLY_SPONSORSHIP_AMOUNT'
    TOTAL_SPONSORS_COUNT = 'TOTAL_SPONSORS_COUNT'


class SponsorsListingFeaturedItemFeatureableType(Enum):
    """
    The different kinds of records that can be featured on a GitHub Sponsors profile page.
    """

    REPOSITORY = 'REPOSITORY'
    USER = 'USER'


class SponsorsTierOrderField(Enum):
    """
    Properties by which Sponsors tiers connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    MONTHLY_PRICE_IN_CENTS = 'MONTHLY_PRICE_IN_CENTS'


class SponsorshipNewsletterOrderField(Enum):
    """
    Properties by which sponsorship update connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class SponsorshipOrderField(Enum):
    """
    Properties by which sponsorship connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class SponsorshipPaymentSource(Enum):
    """
    How payment was made for funding a GitHub Sponsors sponsorship.
    """

    GITHUB = 'GITHUB'
    PATREON = 'PATREON'


class SponsorshipPrivacy(Enum):
    """
    The privacy of a sponsorship
    """

    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class SquashMergeCommitMessage(Enum):
    """
    The possible default commit messages for squash merges.
    """

    BLANK = 'BLANK'
    COMMIT_MESSAGES = 'COMMIT_MESSAGES'
    PR_BODY = 'PR_BODY'


class SquashMergeCommitTitle(Enum):
    """
    The possible default commit titles for squash merges.
    """

    COMMIT_OR_PR_TITLE = 'COMMIT_OR_PR_TITLE'
    PR_TITLE = 'PR_TITLE'


class StarOrderField(Enum):
    """
    Properties by which star connections can be ordered.
    """

    STARRED_AT = 'STARRED_AT'


class StatusState(Enum):
    """
    The possible commit status states.
    """

    ERROR = 'ERROR'
    EXPECTED = 'EXPECTED'
    FAILURE = 'FAILURE'
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'


class SubscriptionState(Enum):
    """
    The possible states of a subscription.
    """

    IGNORED = 'IGNORED'
    SUBSCRIBED = 'SUBSCRIBED'
    UNSUBSCRIBED = 'UNSUBSCRIBED'


class TeamDiscussionCommentOrderField(Enum):
    """
    Properties by which team discussion comment connections can be ordered.
    """

    NUMBER = 'NUMBER'


class TeamDiscussionOrderField(Enum):
    """
    Properties by which team discussion connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class TeamMemberOrderField(Enum):
    """
    Properties by which team member connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    LOGIN = 'LOGIN'


class TeamMemberRole(Enum):
    """
    The possible team member roles; either 'maintainer' or 'member'.
    """

    MAINTAINER = 'MAINTAINER'
    MEMBER = 'MEMBER'


class TeamMembershipType(Enum):
    """
    Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
    """

    ALL = 'ALL'
    CHILD_TEAM = 'CHILD_TEAM'
    IMMEDIATE = 'IMMEDIATE'


class TeamNotificationSetting(Enum):
    """
    The possible team notification values.
    """

    NOTIFICATIONS_DISABLED = 'NOTIFICATIONS_DISABLED'
    NOTIFICATIONS_ENABLED = 'NOTIFICATIONS_ENABLED'


class TeamOrderField(Enum):
    """
    Properties by which team connections can be ordered.
    """

    NAME = 'NAME'


class TeamPrivacy(Enum):
    """
    The possible team privacy values.
    """

    SECRET = 'SECRET'
    VISIBLE = 'VISIBLE'


class TeamRepositoryOrderField(Enum):
    """
    Properties by which team repository connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    NAME = 'NAME'
    PERMISSION = 'PERMISSION'
    PUSHED_AT = 'PUSHED_AT'
    STARGAZERS = 'STARGAZERS'
    UPDATED_AT = 'UPDATED_AT'


class TeamReviewAssignmentAlgorithm(Enum):
    """
    The possible team review assignment algorithms
    """

    LOAD_BALANCE = 'LOAD_BALANCE'
    ROUND_ROBIN = 'ROUND_ROBIN'


class TeamRole(Enum):
    """
    The role of a user on a team.
    """

    ADMIN = 'ADMIN'
    MEMBER = 'MEMBER'


class ThreadSubscriptionFormAction(Enum):
    """
    The possible states of a thread subscription form action
    """

    NONE = 'NONE'
    SUBSCRIBE = 'SUBSCRIBE'
    UNSUBSCRIBE = 'UNSUBSCRIBE'


class ThreadSubscriptionState(Enum):
    """
    The possible states of a subscription.
    """

    DISABLED = 'DISABLED'
    IGNORING_LIST = 'IGNORING_LIST'
    IGNORING_THREAD = 'IGNORING_THREAD'
    NONE = 'NONE'
    SUBSCRIBED_TO_LIST = 'SUBSCRIBED_TO_LIST'
    SUBSCRIBED_TO_THREAD = 'SUBSCRIBED_TO_THREAD'
    SUBSCRIBED_TO_THREAD_EVENTS = 'SUBSCRIBED_TO_THREAD_EVENTS'
    SUBSCRIBED_TO_THREAD_TYPE = 'SUBSCRIBED_TO_THREAD_TYPE'
    UNAVAILABLE = 'UNAVAILABLE'


class TopicSuggestionDeclineReason(Enum):
    """
    Reason that the suggested topic is declined.
    """

    NOT_RELEVANT = 'NOT_RELEVANT'
    PERSONAL_PREFERENCE = 'PERSONAL_PREFERENCE'
    TOO_GENERAL = 'TOO_GENERAL'
    TOO_SPECIFIC = 'TOO_SPECIFIC'


class TrackedIssueStates(Enum):
    """
    The possible states of a tracked issue.
    """

    CLOSED = 'CLOSED'
    OPEN = 'OPEN'


class TwoFactorCredentialSecurityType(Enum):
    """
    Filters by whether or not 2FA is enabled and if the method configured is considered secure or insecure.
    """

    DISABLED = 'DISABLED'
    INSECURE = 'INSECURE'
    SECURE = 'SECURE'


class UserBlockDuration(Enum):
    """
    The possible durations that a user can be blocked for.
    """

    ONE_DAY = 'ONE_DAY'
    ONE_MONTH = 'ONE_MONTH'
    ONE_WEEK = 'ONE_WEEK'
    PERMANENT = 'PERMANENT'
    THREE_DAYS = 'THREE_DAYS'


class UserStatusOrderField(Enum):
    """
    Properties by which user status connections can be ordered.
    """

    UPDATED_AT = 'UPDATED_AT'


class UserViewType(Enum):
    """
    Whether a user being viewed contains public or private information.
    """

    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class VerifiableDomainOrderField(Enum):
    """
    Properties by which verifiable domain connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'
    DOMAIN = 'DOMAIN'


class WorkflowRunOrderField(Enum):
    """
    Properties by which workflow run connections can be ordered.
    """

    CREATED_AT = 'CREATED_AT'


class WorkflowState(Enum):
    """
    The possible states for a workflow.
    """

    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'
    DISABLED_FORK = 'DISABLED_FORK'
    DISABLED_INACTIVITY = 'DISABLED_INACTIVITY'
    DISABLED_MANUALLY = 'DISABLED_MANUALLY'


class Actor(BaseModel):
    """
    Represents an object which can take actions on GitHub. Typically a User or Bot.
    """

    avatarUrl: URI = Field(
        ..., description="A URL pointing to the actor's public avatar."
    )
    login: String = Field(..., description='The username of the actor.')
    resourcePath: URI = Field(..., description='The HTTP path for this actor.')
    url: URI = Field(..., description='The HTTP URL for this actor.')
    typename__: Optional[Literal['Actor']] = Field('Actor', alias='__typename')


class Assignable(BaseModel):
    """
    An object that can have users assigned to it.
    """

    assignedActors: AssigneeConnection = Field(
        ..., description='A list of actors assigned to this object.'
    )
    assignees: UserConnection = Field(
        ..., description='A list of Users assigned to this object.'
    )
    suggestedActors: AssigneeConnection = Field(
        ..., description='A list of suggested actors to assign to this object'
    )
    typename__: Optional[Literal['Assignable']] = Field(
        'Assignable', alias='__typename'
    )


class AuditEntry(BaseModel):
    """
    An entry in the audit log.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['AuditEntry']] = Field(
        'AuditEntry', alias='__typename'
    )


class Closable(BaseModel):
    """
    An object that can be closed
    """

    closed: Boolean = Field(
        ...,
        description='Indicates if the object is closed (definition of closed may depend on type)',
    )
    closedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was closed.'
    )
    viewerCanClose: Boolean = Field(
        ..., description='Indicates if the object can be closed by the viewer.'
    )
    viewerCanReopen: Boolean = Field(
        ..., description='Indicates if the object can be reopened by the viewer.'
    )
    typename__: Optional[Literal['Closable']] = Field('Closable', alias='__typename')


class Comment(BaseModel):
    """
    Represents a comment.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    body: String = Field(..., description='The body as Markdown.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Comment object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    typename__: Optional[Literal['Comment']] = Field('Comment', alias='__typename')


class Contribution(BaseModel):
    """
    Represents a contribution a user made on GitHub, such as opening an issue.
    """

    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['Contribution']] = Field(
        'Contribution', alias='__typename'
    )


class Deletable(BaseModel):
    """
    Entities that can be deleted.
    """

    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    typename__: Optional[Literal['Deletable']] = Field('Deletable', alias='__typename')


class EnterpriseAuditEntryData(BaseModel):
    """
    Metadata for an audit entry containing enterprise account information.
    """

    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    typename__: Optional[Literal['EnterpriseAuditEntryData']] = Field(
        'EnterpriseAuditEntryData', alias='__typename'
    )


class GitObject(BaseModel):
    """
    Represents a Git object.
    """

    abbreviatedOid: String = Field(
        ..., description='An abbreviated version of the Git object ID'
    )
    commitResourcePath: URI = Field(
        ..., description='The HTTP path for this Git object'
    )
    commitUrl: URI = Field(..., description='The HTTP URL for this Git object')
    id: ID_aliased = Field(..., description='The Node ID of the GitObject object')
    oid: GitObjectID = Field(..., description='The Git object ID')
    repository: Repository_aliased = Field(
        ..., description='The Repository the Git object belongs to'
    )
    typename__: Optional[Literal['GitObject']] = Field('GitObject', alias='__typename')


class GitSignature(BaseModel):
    """
    Information about a signature (GPG or S/MIME) on a Commit or Tag.
    """

    email: String = Field(..., description='Email used to sign this object.')
    isValid: Boolean = Field(
        ..., description='True if the signature is valid and verified by GitHub.'
    )
    payload: String = Field(
        ...,
        description='Payload for GPG signing object. Raw ODB object without the signature header.',
    )
    signature: String = Field(
        ..., description='ASCII-armored signature header from object.'
    )
    signer: Optional[User_aliased] = Field(
        None, description='GitHub user corresponding to the email signing this commit.'
    )
    state: GitSignatureState = Field(
        ...,
        description='The state of this signature. `VALID` if signature is valid and verified by\nGitHub, otherwise represents reason why signature is considered invalid.',
    )
    verifiedAt: Optional[DateTime] = Field(
        None, description='The date the signature was verified, if valid'
    )
    wasSignedByGitHub: Boolean = Field(
        ..., description="True if the signature was made with GitHub's signing key."
    )
    typename__: Optional[Literal['GitSignature']] = Field(
        'GitSignature', alias='__typename'
    )


class HovercardContext(BaseModel):
    """
    An individual line of a hovercard
    """

    message: String = Field(..., description='A string describing this context')
    octicon: String = Field(..., description='An octicon to accompany this context')
    typename__: Optional[Literal['HovercardContext']] = Field(
        'HovercardContext', alias='__typename'
    )


class Labelable(BaseModel):
    """
    An object that can have labels assigned to it.
    """

    labels: Optional[LabelConnection] = Field(
        None, description='A list of labels associated with the object.'
    )
    viewerCanLabel: Boolean = Field(
        ..., description='Indicates if the viewer can edit labels for this object.'
    )
    typename__: Optional[Literal['Labelable']] = Field('Labelable', alias='__typename')


class Lockable(BaseModel):
    """
    An object that can be locked.
    """

    activeLockReason: Optional[LockReason] = Field(
        None, description='Reason that the conversation was locked.'
    )
    locked: Boolean = Field(..., description='`true` if the object is locked')
    typename__: Optional[Literal['Lockable']] = Field('Lockable', alias='__typename')


class MemberStatusable(BaseModel):
    """
    Entities that have members who can set status messages.
    """

    memberStatuses: UserStatusConnection = Field(
        ...,
        description='Get the status messages members of this entity have set that are either public or visible only to the organization.',
    )
    typename__: Optional[Literal['MemberStatusable']] = Field(
        'MemberStatusable', alias='__typename'
    )


class Migration(BaseModel):
    """
    Represents a GitHub Enterprise Importer (GEI) migration.
    """

    continueOnError: Boolean = Field(
        ..., description='The migration flag to continue on error.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[String] = Field(
        None, description='Identifies the primary key from the database.'
    )
    failureReason: Optional[String] = Field(
        None, description='The reason the migration failed.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Migration object')
    migrationLogUrl: Optional[URI] = Field(
        None,
        description='The URL for the migration log (expires 1 day after migration completes).',
    )
    migrationSource: MigrationSource = Field(..., description='The migration source.')
    repositoryName: String = Field(..., description='The target repository name.')
    sourceUrl: URI = Field(
        ...,
        description='The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.',
    )
    state: MigrationState = Field(..., description='The migration state.')
    warningsCount: Int = Field(
        ...,
        description='The number of warnings encountered for this migration. To review the warnings,\ncheck the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).',
    )
    typename__: Optional[Literal['Migration']] = Field('Migration', alias='__typename')


class Minimizable(BaseModel):
    """
    Entities that can be minimized.
    """

    isMinimized: Boolean = Field(
        ..., description='Returns whether or not a comment has been minimized.'
    )
    minimizedReason: Optional[String] = Field(
        None,
        description='Returns why the comment was minimized. One of `abuse`, `off-topic`,\n`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\nformatting of these values differs from the inputs to the `MinimizeComment` mutation.',
    )
    viewerCanMinimize: Boolean = Field(
        ..., description='Check if the current viewer can minimize this object.'
    )
    typename__: Optional[Literal['Minimizable']] = Field(
        'Minimizable', alias='__typename'
    )


class Node(BaseModel):
    """
    An object with an ID.
    """

    id: ID_aliased = Field(..., description='ID of the object.')
    typename__: Optional[Literal['Node']] = Field('Node', alias='__typename')


class OauthApplicationAuditEntryData(BaseModel):
    """
    Metadata for an audit entry with action oauth_application.*
    """

    oauthApplicationName: Optional[String] = Field(
        None, description='The name of the OAuth application.'
    )
    oauthApplicationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the OAuth application'
    )
    oauthApplicationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the OAuth application'
    )
    typename__: Optional[Literal['OauthApplicationAuditEntryData']] = Field(
        'OauthApplicationAuditEntryData', alias='__typename'
    )


class OrganizationAuditEntryData(BaseModel):
    """
    Metadata for an audit entry with action org.*
    """

    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    typename__: Optional[Literal['OrganizationAuditEntryData']] = Field(
        'OrganizationAuditEntryData', alias='__typename'
    )


class PackageOwner(BaseModel):
    """
    Represents an owner of a package.
    """

    id: ID_aliased = Field(..., description='The Node ID of the PackageOwner object')
    packages: PackageConnection = Field(
        ..., description='A list of packages under the owner.'
    )
    typename__: Optional[Literal['PackageOwner']] = Field(
        'PackageOwner', alias='__typename'
    )


class ProfileOwner(BaseModel):
    """
    Represents any entity on GitHub that has a profile page.
    """

    anyPinnableItems: Boolean = Field(
        ...,
        description='Determine if this repository owner has any items that can be pinned to their profile.',
    )
    email: Optional[String] = Field(None, description='The public profile email.')
    id: ID_aliased = Field(..., description='The Node ID of the ProfileOwner object')
    itemShowcase: ProfileItemShowcase = Field(
        ...,
        description='Showcases a selection of repositories and gists that the profile owner has\neither curated or that have been selected automatically based on popularity.',
    )
    location: Optional[String] = Field(None, description='The public profile location.')
    login: String = Field(..., description='The username used to login.')
    name: Optional[String] = Field(None, description='The public profile name.')
    pinnableItems: PinnableItemConnection = Field(
        ...,
        description='A list of repositories and gists this profile owner can pin to their profile.',
    )
    pinnedItems: PinnableItemConnection = Field(
        ...,
        description='A list of repositories and gists this profile owner has pinned to their profile',
    )
    pinnedItemsRemaining: Int = Field(
        ...,
        description='Returns how many more items this profile owner can pin to their profile.',
    )
    viewerCanChangePinnedItems: Boolean = Field(
        ..., description='Can the viewer pin repositories and gists to the profile?'
    )
    websiteUrl: Optional[URI] = Field(
        None, description='The public profile website URL.'
    )
    typename__: Optional[Literal['ProfileOwner']] = Field(
        'ProfileOwner', alias='__typename'
    )


class ProjectOwner(BaseModel):
    """
    Represents an owner of a Project.
    """

    id: ID_aliased = Field(..., description='The Node ID of the ProjectOwner object')
    project: Optional[Project] = Field(None, description='Find project by number.')
    projects: ProjectConnection = Field(
        ..., description='A list of projects under the owner.'
    )
    projectsResourcePath: URI = Field(
        ..., description='The HTTP path listing owners projects'
    )
    projectsUrl: URI = Field(..., description='The HTTP URL listing owners projects')
    viewerCanCreateProjects: Boolean = Field(
        ..., description='Can the current viewer create new projects on this owner.'
    )
    typename__: Optional[Literal['ProjectOwner']] = Field(
        'ProjectOwner', alias='__typename'
    )


class ProjectV2FieldCommon(BaseModel):
    """
    Common fields across different project field types
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    dataType: ProjectV2FieldType = Field(..., description="The field's type.")
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2FieldCommon object'
    )
    name: String = Field(..., description="The project field's name.")
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this field.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2FieldCommon']] = Field(
        'ProjectV2FieldCommon', alias='__typename'
    )


class ProjectV2ItemFieldValueCommon(BaseModel):
    """
    Common fields across different project field value types
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the item.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    field: ProjectV2FieldConfiguration = Field(
        ..., description='The project field that contains this value.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2ItemFieldValueCommon object'
    )
    item: ProjectV2Item = Field(
        ..., description='The project item that contains this value.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2ItemFieldValueCommon']] = Field(
        'ProjectV2ItemFieldValueCommon', alias='__typename'
    )


class ProjectV2Owner(BaseModel):
    """
    Represents an owner of a project.
    """

    id: ID_aliased = Field(..., description='The Node ID of the ProjectV2Owner object')
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='Find a project by number.'
    )
    projectsV2: ProjectV2Connection = Field(
        ..., description='A list of projects under the owner.'
    )
    typename__: Optional[Literal['ProjectV2Owner']] = Field(
        'ProjectV2Owner', alias='__typename'
    )


class ProjectV2Recent(BaseModel):
    """
    Recent projects for the owner.
    """

    recentProjects: ProjectV2Connection = Field(
        ...,
        description='Recent projects that this user has modified in the context of the owner.',
    )
    typename__: Optional[Literal['ProjectV2Recent']] = Field(
        'ProjectV2Recent', alias='__typename'
    )


class Reactable(BaseModel):
    """
    Represents a subject that can be reacted on.
    """

    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Reactable object')
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    typename__: Optional[Literal['Reactable']] = Field('Reactable', alias='__typename')


class RepositoryAuditEntryData(BaseModel):
    """
    Metadata for an audit entry with action repo.*
    """

    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    typename__: Optional[Literal['RepositoryAuditEntryData']] = Field(
        'RepositoryAuditEntryData', alias='__typename'
    )


class RepositoryDiscussionAuthor(BaseModel):
    """
    Represents an author of discussions in repositories.
    """

    repositoryDiscussions: DiscussionConnection = Field(
        ..., description='Discussions this user has started.'
    )
    typename__: Optional[Literal['RepositoryDiscussionAuthor']] = Field(
        'RepositoryDiscussionAuthor', alias='__typename'
    )


class RepositoryDiscussionCommentAuthor(BaseModel):
    """
    Represents an author of discussion comments in repositories.
    """

    repositoryDiscussionComments: DiscussionCommentConnection = Field(
        ..., description='Discussion comments this user has authored.'
    )
    typename__: Optional[Literal['RepositoryDiscussionCommentAuthor']] = Field(
        'RepositoryDiscussionCommentAuthor', alias='__typename'
    )


class RepositoryInfo(BaseModel):
    """
    A subset of repository info.
    """

    archivedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the repository was archived.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    description: Optional[String] = Field(
        None, description='The description of the repository.'
    )
    descriptionHTML: HTML = Field(
        ..., description='The description of the repository rendered to HTML.'
    )
    forkCount: Int = Field(
        ...,
        description='Returns how many forks there are of this repository in the whole network.',
    )
    hasDiscussionsEnabled: Boolean = Field(
        ...,
        description='Indicates if the repository has the Discussions feature enabled.',
    )
    hasIssuesEnabled: Boolean = Field(
        ..., description='Indicates if the repository has issues feature enabled.'
    )
    hasProjectsEnabled: Boolean = Field(
        ..., description='Indicates if the repository has the Projects feature enabled.'
    )
    hasSponsorshipsEnabled: Boolean = Field(
        ...,
        description='Indicates if the repository displays a Sponsor button for financial contributions.',
    )
    hasWikiEnabled: Boolean = Field(
        ..., description='Indicates if the repository has wiki feature enabled.'
    )
    homepageUrl: Optional[URI] = Field(None, description="The repository's URL.")
    isArchived: Boolean = Field(
        ..., description='Indicates if the repository is unmaintained.'
    )
    isFork: Boolean = Field(..., description='Identifies if the repository is a fork.')
    isInOrganization: Boolean = Field(
        ...,
        description='Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.',
    )
    isLocked: Boolean = Field(
        ..., description='Indicates if the repository has been locked or not.'
    )
    isMirror: Boolean = Field(
        ..., description='Identifies if the repository is a mirror.'
    )
    isPrivate: Boolean = Field(
        ..., description='Identifies if the repository is private or internal.'
    )
    isTemplate: Boolean = Field(
        ...,
        description='Identifies if the repository is a template that can be used to generate new repositories.',
    )
    licenseInfo: Optional[License] = Field(
        None, description='The license associated with the repository'
    )
    lockReason: Optional[RepositoryLockReason] = Field(
        None, description='The reason the repository has been locked.'
    )
    mirrorUrl: Optional[URI] = Field(
        None, description="The repository's original mirror URL."
    )
    name: String = Field(..., description='The name of the repository.')
    nameWithOwner: String = Field(..., description="The repository's name with owner.")
    openGraphImageUrl: URI = Field(
        ...,
        description='The image used to represent this repository in Open Graph data.',
    )
    owner: RepositoryOwner = Field(..., description='The User owner of the repository.')
    pushedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the repository was last pushed to.',
    )
    resourcePath: URI = Field(..., description='The HTTP path for this repository')
    shortDescriptionHTML: HTML = Field(
        ...,
        description='A description of the repository, rendered to HTML without any links in it.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this repository')
    usesCustomOpenGraphImage: Boolean = Field(
        ...,
        description="Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.",
    )
    visibility: RepositoryVisibility = Field(
        ..., description="Indicates the repository's visibility level."
    )
    typename__: Optional[Literal['RepositoryInfo']] = Field(
        'RepositoryInfo', alias='__typename'
    )


class RepositoryNode(BaseModel):
    """
    Represents a object that belongs to a repository.
    """

    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    typename__: Optional[Literal['RepositoryNode']] = Field(
        'RepositoryNode', alias='__typename'
    )


class RepositoryOwner(BaseModel):
    """
    Represents an owner of a Repository.
    """

    avatarUrl: URI = Field(
        ..., description="A URL pointing to the owner's public avatar."
    )
    id: ID_aliased = Field(..., description='The Node ID of the RepositoryOwner object')
    login: String = Field(..., description='The username used to login.')
    repositories: RepositoryConnection = Field(
        ..., description='A list of repositories that the user owns.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='Find Repository.'
    )
    resourcePath: URI = Field(..., description='The HTTP URL for the owner.')
    url: URI = Field(..., description='The HTTP URL for the owner.')
    typename__: Optional[Literal['RepositoryOwner']] = Field(
        'RepositoryOwner', alias='__typename'
    )


class RequirableByPullRequest(BaseModel):
    """
    Represents a type that can be required by a pull request for merging.
    """

    isRequired: Boolean = Field(
        ...,
        description='Whether this is required to pass before merging for a specific pull request.',
    )
    typename__: Optional[Literal['RequirableByPullRequest']] = Field(
        'RequirableByPullRequest', alias='__typename'
    )


class Sponsorable(BaseModel):
    """
    Entities that can sponsor or be sponsored through GitHub Sponsors.
    """

    estimatedNextSponsorsPayoutInCents: Int = Field(
        ...,
        description='The estimated next GitHub Sponsors payout for this user/organization in cents (USD).',
    )
    hasSponsorsListing: Boolean = Field(
        ..., description='True if this user/organization has a GitHub Sponsors listing.'
    )
    isSponsoredBy: Boolean = Field(
        ...,
        description='Whether the given account is sponsoring this user/organization.',
    )
    isSponsoringViewer: Boolean = Field(
        ..., description='True if the viewer is sponsored by this user/organization.'
    )
    lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection = Field(
        ...,
        description='Calculate how much each sponsor has ever paid total to this maintainer via\nGitHub Sponsors. Does not include sponsorships paid via Patreon.',
    )
    monthlyEstimatedSponsorsIncomeInCents: Int = Field(
        ...,
        description='The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).',
    )
    sponsoring: SponsorConnection = Field(
        ..., description='List of users and organizations this entity is sponsoring.'
    )
    sponsors: SponsorConnection = Field(
        ..., description='List of sponsors for this user or organization.'
    )
    sponsorsActivities: SponsorsActivityConnection = Field(
        ..., description='Events involving this sponsorable, such as new sponsorships.'
    )
    sponsorsListing: Optional[SponsorsListing] = Field(
        None, description='The GitHub Sponsors listing for this user or organization.'
    )
    sponsorshipForViewerAsSponsor: Optional[Sponsorship] = Field(
        None,
        description="The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.",
    )
    sponsorshipForViewerAsSponsorable: Optional[Sponsorship] = Field(
        None,
        description="The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.",
    )
    sponsorshipNewsletters: SponsorshipNewsletterConnection = Field(
        ...,
        description='List of sponsorship updates sent from this sponsorable to sponsors.',
    )
    sponsorshipsAsMaintainer: SponsorshipConnection = Field(
        ...,
        description='The sponsorships where this user or organization is the maintainer receiving the funds.',
    )
    sponsorshipsAsSponsor: SponsorshipConnection = Field(
        ...,
        description='The sponsorships where this user or organization is the funder.',
    )
    totalSponsorshipAmountAsSponsorInCents: Optional[Int] = Field(
        None,
        description='The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has\nspent on GitHub to fund sponsorships. Only returns a value when viewed by the\nuser themselves or by a user who can manage sponsorships for the requested organization.',
    )
    viewerCanSponsor: Boolean = Field(
        ...,
        description='Whether or not the viewer is able to sponsor this user/organization.',
    )
    viewerIsSponsoring: Boolean = Field(
        ..., description='True if the viewer is sponsoring this user/organization.'
    )
    typename__: Optional[Literal['Sponsorable']] = Field(
        'Sponsorable', alias='__typename'
    )


class Starrable(BaseModel):
    """
    Things that can be starred.
    """

    id: ID_aliased = Field(..., description='The Node ID of the Starrable object')
    stargazerCount: Int = Field(
        ...,
        description='Returns a count of how many stargazers there are on this object',
    )
    stargazers: StargazerConnection = Field(
        ..., description='A list of users who have starred this starrable.'
    )
    viewerHasStarred: Boolean = Field(
        ...,
        description='Returns a boolean indicating whether the viewing user has starred this starrable.',
    )
    typename__: Optional[Literal['Starrable']] = Field('Starrable', alias='__typename')


class Subscribable(BaseModel):
    """
    Entities that can be subscribed to for web and email notifications.
    """

    id: ID_aliased = Field(..., description='The Node ID of the Subscribable object')
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    typename__: Optional[Literal['Subscribable']] = Field(
        'Subscribable', alias='__typename'
    )


class SubscribableThread(BaseModel):
    """
    Entities that can be subscribed to for web and email notifications.
    """

    id: ID_aliased = Field(
        ..., description='The Node ID of the SubscribableThread object'
    )
    viewerThreadSubscriptionFormAction: Optional[ThreadSubscriptionFormAction] = Field(
        None, description="Identifies the viewer's thread subscription form action."
    )
    viewerThreadSubscriptionStatus: Optional[ThreadSubscriptionState] = Field(
        None, description="Identifies the viewer's thread subscription status."
    )
    typename__: Optional[Literal['SubscribableThread']] = Field(
        'SubscribableThread', alias='__typename'
    )


class TeamAuditEntryData(BaseModel):
    """
    Metadata for an audit entry with action team.*
    """

    team: Optional[Team_aliased] = Field(
        None, description='The team associated with the action'
    )
    teamName: Optional[String] = Field(None, description='The name of the team')
    teamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this team'
    )
    teamUrl: Optional[URI] = Field(None, description='The HTTP URL for this team')
    typename__: Optional[Literal['TeamAuditEntryData']] = Field(
        'TeamAuditEntryData', alias='__typename'
    )


class TopicAuditEntryData(BaseModel):
    """
    Metadata for an audit entry with a topic.
    """

    topic: Optional[Topic] = Field(
        None, description='The name of the topic added to the repository'
    )
    topicName: Optional[String] = Field(
        None, description='The name of the topic added to the repository'
    )
    typename__: Optional[Literal['TopicAuditEntryData']] = Field(
        'TopicAuditEntryData', alias='__typename'
    )


class UniformResourceLocatable(BaseModel):
    """
    Represents a type that can be retrieved by a URL.
    """

    resourcePath: URI = Field(..., description='The HTML path to this resource.')
    url: URI = Field(..., description='The URL to this resource.')
    typename__: Optional[Literal['UniformResourceLocatable']] = Field(
        'UniformResourceLocatable', alias='__typename'
    )


class Updatable(BaseModel):
    """
    Entities that can be updated.
    """

    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    typename__: Optional[Literal['Updatable']] = Field('Updatable', alias='__typename')


class UpdatableComment(BaseModel):
    """
    Comments that can be updated.
    """

    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    typename__: Optional[Literal['UpdatableComment']] = Field(
        'UpdatableComment', alias='__typename'
    )


class Votable(BaseModel):
    """
    A subject that may be upvoted.
    """

    upvoteCount: Int = Field(
        ..., description='Number of upvotes that this subject has received.'
    )
    viewerCanUpvote: Boolean = Field(
        ...,
        description='Whether or not the current user can add or remove an upvote on this subject.',
    )
    viewerHasUpvoted: Boolean = Field(
        ...,
        description='Whether or not the current user has already upvoted this subject.',
    )
    typename__: Optional[Literal['Votable']] = Field('Votable', alias='__typename')


class AbortQueuedMigrationsPayload(BaseModel):
    """
    Autogenerated return type of AbortQueuedMigrations.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    success: Optional[Boolean] = Field(None, description='Did the operation succeed?')
    typename__: Optional[Literal['AbortQueuedMigrationsPayload']] = Field(
        'AbortQueuedMigrationsPayload', alias='__typename'
    )


class AbortRepositoryMigrationPayload(BaseModel):
    """
    Autogenerated return type of AbortRepositoryMigration.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    success: Optional[Boolean] = Field(None, description='Did the operation succeed?')
    typename__: Optional[Literal['AbortRepositoryMigrationPayload']] = Field(
        'AbortRepositoryMigrationPayload', alias='__typename'
    )


class AcceptEnterpriseAdministratorInvitationPayload(BaseModel):
    """
    Autogenerated return type of AcceptEnterpriseAdministratorInvitation.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitation: Optional[EnterpriseAdministratorInvitation] = Field(
        None, description='The invitation that was accepted.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of accepting an administrator invitation.',
    )
    typename__: Optional[Literal['AcceptEnterpriseAdministratorInvitationPayload']] = (
        Field('AcceptEnterpriseAdministratorInvitationPayload', alias='__typename')
    )


class AcceptEnterpriseMemberInvitationPayload(BaseModel):
    """
    Autogenerated return type of AcceptEnterpriseMemberInvitation.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitation: Optional[EnterpriseMemberInvitation] = Field(
        None, description='The invitation that was accepted.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of accepting an unaffiliated member invitation.',
    )
    typename__: Optional[Literal['AcceptEnterpriseMemberInvitationPayload']] = Field(
        'AcceptEnterpriseMemberInvitationPayload', alias='__typename'
    )


class AcceptTopicSuggestionPayload(BaseModel):
    """
    Autogenerated return type of AcceptTopicSuggestion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    topic: Optional[Topic] = Field(None, description='The accepted topic.')
    typename__: Optional[Literal['AcceptTopicSuggestionPayload']] = Field(
        'AcceptTopicSuggestionPayload', alias='__typename'
    )


class AccessUserNamespaceRepositoryPayload(BaseModel):
    """
    Autogenerated return type of AccessUserNamespaceRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    expiresAt: Optional[DateTime] = Field(
        None, description='The time that repository access expires at'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository that is temporarily accessible.'
    )
    typename__: Optional[Literal['AccessUserNamespaceRepositoryPayload']] = Field(
        'AccessUserNamespaceRepositoryPayload', alias='__typename'
    )


class ActorConnection(BaseModel):
    """
    The connection type for Actor.
    """

    edges: Optional[List[Optional[ActorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Actor]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ActorConnection']] = Field(
        'ActorConnection', alias='__typename'
    )


class ActorEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Actor] = Field(None, description='The item at the end of the edge.')
    typename__: Optional[Literal['ActorEdge']] = Field('ActorEdge', alias='__typename')


class ActorLocation(BaseModel):
    """
    Location information for an actor
    """

    city: Optional[String] = Field(None, description='City')
    country: Optional[String] = Field(None, description='Country name')
    countryCode: Optional[String] = Field(None, description='Country code')
    region: Optional[String] = Field(None, description='Region name')
    regionCode: Optional[String] = Field(None, description='Region or state code')
    typename__: Optional[Literal['ActorLocation']] = Field(
        'ActorLocation', alias='__typename'
    )


class AddAssigneesToAssignablePayload(BaseModel):
    """
    Autogenerated return type of AddAssigneesToAssignable.
    """

    assignable: Optional[Assignable] = Field(
        None, description='The item that was assigned.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['AddAssigneesToAssignablePayload']] = Field(
        'AddAssigneesToAssignablePayload', alias='__typename'
    )


class AddCommentPayload(BaseModel):
    """
    Autogenerated return type of AddComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    commentEdge: Optional[IssueCommentEdge] = Field(
        None, description="The edge from the subject's comment connection."
    )
    subject: Optional[Node] = Field(None, description='The subject')
    timelineEdge: Optional[IssueTimelineItemEdge] = Field(
        None, description="The edge from the subject's timeline connection."
    )
    typename__: Optional[Literal['AddCommentPayload']] = Field(
        'AddCommentPayload', alias='__typename'
    )


class AddDiscussionCommentPayload(BaseModel):
    """
    Autogenerated return type of AddDiscussionComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comment: Optional[DiscussionComment] = Field(
        None, description='The newly created discussion comment.'
    )
    typename__: Optional[Literal['AddDiscussionCommentPayload']] = Field(
        'AddDiscussionCommentPayload', alias='__typename'
    )


class AddDiscussionPollVotePayload(BaseModel):
    """
    Autogenerated return type of AddDiscussionPollVote.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pollOption: Optional[DiscussionPollOption] = Field(
        None, description='The poll option that a vote was added to.'
    )
    typename__: Optional[Literal['AddDiscussionPollVotePayload']] = Field(
        'AddDiscussionPollVotePayload', alias='__typename'
    )


class AddEnterpriseOrganizationMemberPayload(BaseModel):
    """
    Autogenerated return type of AddEnterpriseOrganizationMember.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    users: Optional[List[User]] = Field(
        None, description='The users who were added to the organization.'
    )
    typename__: Optional[Literal['AddEnterpriseOrganizationMemberPayload']] = Field(
        'AddEnterpriseOrganizationMemberPayload', alias='__typename'
    )


class AddEnterpriseSupportEntitlementPayload(BaseModel):
    """
    Autogenerated return type of AddEnterpriseSupportEntitlement.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of adding the support entitlement.',
    )
    typename__: Optional[Literal['AddEnterpriseSupportEntitlementPayload']] = Field(
        'AddEnterpriseSupportEntitlementPayload', alias='__typename'
    )


class AddLabelsToLabelablePayload(BaseModel):
    """
    Autogenerated return type of AddLabelsToLabelable.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    labelable: Optional[Labelable] = Field(
        None, description='The item that was labeled.'
    )
    typename__: Optional[Literal['AddLabelsToLabelablePayload']] = Field(
        'AddLabelsToLabelablePayload', alias='__typename'
    )


class AddProjectCardPayload(BaseModel):
    """
    Autogenerated return type of AddProjectCard.
    """

    cardEdge: Optional[ProjectCardEdge] = Field(
        None, description="The edge from the ProjectColumn's card connection."
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectColumn: Optional[ProjectColumn] = Field(
        None, description='The ProjectColumn'
    )
    typename__: Optional[Literal['AddProjectCardPayload']] = Field(
        'AddProjectCardPayload', alias='__typename'
    )


class AddProjectColumnPayload(BaseModel):
    """
    Autogenerated return type of AddProjectColumn.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    columnEdge: Optional[ProjectColumnEdge] = Field(
        None, description="The edge from the project's column connection."
    )
    project: Optional[Project] = Field(None, description='The project')
    typename__: Optional[Literal['AddProjectColumnPayload']] = Field(
        'AddProjectColumnPayload', alias='__typename'
    )


class AddProjectV2DraftIssuePayload(BaseModel):
    """
    Autogenerated return type of AddProjectV2DraftIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectItem: Optional[ProjectV2Item] = Field(
        None, description='The draft issue added to the project.'
    )
    typename__: Optional[Literal['AddProjectV2DraftIssuePayload']] = Field(
        'AddProjectV2DraftIssuePayload', alias='__typename'
    )


class AddProjectV2ItemByIdPayload(BaseModel):
    """
    Autogenerated return type of AddProjectV2ItemById.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    item: Optional[ProjectV2Item] = Field(
        None, description='The item added to the project.'
    )
    typename__: Optional[Literal['AddProjectV2ItemByIdPayload']] = Field(
        'AddProjectV2ItemByIdPayload', alias='__typename'
    )


class AddPullRequestReviewCommentPayload(BaseModel):
    """
    Autogenerated return type of AddPullRequestReviewComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comment: Optional[PullRequestReviewComment_aliased] = Field(
        None, description='The newly created comment.'
    )
    commentEdge: Optional[PullRequestReviewCommentEdge] = Field(
        None, description="The edge from the review's comment connection."
    )
    typename__: Optional[Literal['AddPullRequestReviewCommentPayload']] = Field(
        'AddPullRequestReviewCommentPayload', alias='__typename'
    )


class AddPullRequestReviewPayload(BaseModel):
    """
    Autogenerated return type of AddPullRequestReview.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The newly created pull request review.'
    )
    reviewEdge: Optional[PullRequestReviewEdge] = Field(
        None, description="The edge from the pull request's review connection."
    )
    typename__: Optional[Literal['AddPullRequestReviewPayload']] = Field(
        'AddPullRequestReviewPayload', alias='__typename'
    )


class AddPullRequestReviewThreadPayload(BaseModel):
    """
    Autogenerated return type of AddPullRequestReviewThread.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    thread: Optional[PullRequestReviewThread_aliased] = Field(
        None, description='The newly created thread.'
    )
    typename__: Optional[Literal['AddPullRequestReviewThreadPayload']] = Field(
        'AddPullRequestReviewThreadPayload', alias='__typename'
    )


class AddPullRequestReviewThreadReplyPayload(BaseModel):
    """
    Autogenerated return type of AddPullRequestReviewThreadReply.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comment: Optional[PullRequestReviewComment_aliased] = Field(
        None, description='The newly created reply.'
    )
    typename__: Optional[Literal['AddPullRequestReviewThreadReplyPayload']] = Field(
        'AddPullRequestReviewThreadReplyPayload', alias='__typename'
    )


class AddReactionPayload(BaseModel):
    """
    Autogenerated return type of AddReaction.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    reaction: Optional[Reaction] = Field(None, description='The reaction object.')
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='The reaction groups for the subject.'
    )
    subject: Optional[Reactable] = Field(None, description='The reactable subject.')
    typename__: Optional[Literal['AddReactionPayload']] = Field(
        'AddReactionPayload', alias='__typename'
    )


class AddStarPayload(BaseModel):
    """
    Autogenerated return type of AddStar.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    starrable: Optional[Starrable] = Field(None, description='The starrable.')
    typename__: Optional[Literal['AddStarPayload']] = Field(
        'AddStarPayload', alias='__typename'
    )


class AddSubIssuePayload(BaseModel):
    """
    Autogenerated return type of AddSubIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The parent issue that the sub-issue was added to.'
    )
    subIssue: Optional[Issue_aliased] = Field(
        None, description='The sub-issue of the parent.'
    )
    typename__: Optional[Literal['AddSubIssuePayload']] = Field(
        'AddSubIssuePayload', alias='__typename'
    )


class AddUpvotePayload(BaseModel):
    """
    Autogenerated return type of AddUpvote.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subject: Optional[Votable] = Field(None, description='The votable subject.')
    typename__: Optional[Literal['AddUpvotePayload']] = Field(
        'AddUpvotePayload', alias='__typename'
    )


class AddVerifiableDomainPayload(BaseModel):
    """
    Autogenerated return type of AddVerifiableDomain.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    domain: Optional[VerifiableDomain] = Field(
        None, description='The verifiable domain that was added.'
    )
    typename__: Optional[Literal['AddVerifiableDomainPayload']] = Field(
        'AddVerifiableDomainPayload', alias='__typename'
    )


class AddedToMergeQueueEvent(Node):
    """
    Represents an 'added_to_merge_queue' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enqueuer: Optional[User_aliased] = Field(
        None, description='The user who added this Pull Request to the merge queue'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AddedToMergeQueueEvent object'
    )
    mergeQueue: Optional[MergeQueue] = Field(
        None, description='The merge queue where this pull request was added to.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['AddedToMergeQueueEvent']] = Field(
        'AddedToMergeQueueEvent', alias='__typename'
    )


class AddedToProjectEvent(Node):
    """
    Represents a 'added_to_project' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AddedToProjectEvent object'
    )
    project: Optional[Project] = Field(None, description='Project referenced by event.')
    projectCard: Optional[ProjectCard] = Field(
        None, description='Project card referenced by this project event.'
    )
    projectColumnName: String = Field(
        ..., description='Column name referenced by this project event.'
    )
    typename__: Optional[Literal['AddedToProjectEvent']] = Field(
        'AddedToProjectEvent', alias='__typename'
    )


class AnnouncementBanner(BaseModel):
    """
    An announcement banner for an enterprise or organization.
    """

    createdAt: DateTime = Field(
        ..., description='The date the announcement was created'
    )
    expiresAt: Optional[DateTime] = Field(
        None, description='The expiration date of the announcement, if any'
    )
    isUserDismissible: Boolean = Field(
        ..., description='Whether the announcement can be dismissed by the user'
    )
    message: Optional[String] = Field(None, description='The text of the announcement')
    typename__: Optional[Literal['AnnouncementBanner']] = Field(
        'AnnouncementBanner', alias='__typename'
    )


class App(Node):
    """
    A GitHub App.
    """

    clientId: Optional[String] = Field(None, description='The client ID of the app.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: Optional[String] = Field(
        None, description='The description of the app.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the App object')
    ipAllowListEntries: IpAllowListEntryConnection = Field(
        ..., description='The IP addresses of the app.'
    )
    logoBackgroundColor: String = Field(
        ...,
        description="The hex color code, without the leading '#', for the logo background.",
    )
    logoUrl: URI = Field(..., description="A URL pointing to the app's logo.")
    name: String = Field(..., description='The name of the app.')
    slug: String = Field(
        ..., description='A slug based on the name of the app for use in URLs.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description="The URL to the app's homepage.")
    typename__: Optional[Literal['App']] = Field('App', alias='__typename')


class ApproveDeploymentsPayload(BaseModel):
    """
    Autogenerated return type of ApproveDeployments.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deployments: Optional[List[Deployment]] = Field(
        None, description='The affected deployments.'
    )
    typename__: Optional[Literal['ApproveDeploymentsPayload']] = Field(
        'ApproveDeploymentsPayload', alias='__typename'
    )


class ApproveVerifiableDomainPayload(BaseModel):
    """
    Autogenerated return type of ApproveVerifiableDomain.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    domain: Optional[VerifiableDomain] = Field(
        None, description='The verifiable domain that was approved.'
    )
    typename__: Optional[Literal['ApproveVerifiableDomainPayload']] = Field(
        'ApproveVerifiableDomainPayload', alias='__typename'
    )


class ArchiveProjectV2ItemPayload(BaseModel):
    """
    Autogenerated return type of ArchiveProjectV2Item.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    item: Optional[ProjectV2Item] = Field(
        None, description='The item archived from the project.'
    )
    typename__: Optional[Literal['ArchiveProjectV2ItemPayload']] = Field(
        'ArchiveProjectV2ItemPayload', alias='__typename'
    )


class ArchiveRepositoryPayload(BaseModel):
    """
    Autogenerated return type of ArchiveRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository that was marked as archived.'
    )
    typename__: Optional[Literal['ArchiveRepositoryPayload']] = Field(
        'ArchiveRepositoryPayload', alias='__typename'
    )


class AssignedEvent(Node):
    """
    Represents an 'assigned' event on any assignable object.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    assignable: Assignable = Field(
        ..., description='Identifies the assignable associated with the event.'
    )
    assignee: Optional[Assignee] = Field(
        None, description='Identifies the user or mannequin that was assigned.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the AssignedEvent object')
    user: Optional[User_aliased] = Field(
        None, description='Identifies the user who was assigned.'
    )
    typename__: Optional[Literal['AssignedEvent']] = Field(
        'AssignedEvent', alias='__typename'
    )


class AssigneeConnection(BaseModel):
    """
    The connection type for Assignee.
    """

    edges: Optional[List[Optional[AssigneeEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Assignee]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['AssigneeConnection']] = Field(
        'AssigneeConnection', alias='__typename'
    )


class AssigneeEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Assignee] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['AssigneeEdge']] = Field(
        'AssigneeEdge', alias='__typename'
    )


class AutoMergeDisabledEvent(Node):
    """
    Represents a 'auto_merge_disabled' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    disabler: Optional[User_aliased] = Field(
        None, description='The user who disabled auto-merge for this Pull Request'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AutoMergeDisabledEvent object'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='PullRequest referenced by event'
    )
    reason: Optional[String] = Field(
        None, description='The reason auto-merge was disabled'
    )
    reasonCode: Optional[String] = Field(
        None, description='The reason_code relating to why auto-merge was disabled'
    )
    typename__: Optional[Literal['AutoMergeDisabledEvent']] = Field(
        'AutoMergeDisabledEvent', alias='__typename'
    )


class AutoMergeEnabledEvent(Node):
    """
    Represents a 'auto_merge_enabled' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enabler: Optional[User_aliased] = Field(
        None, description='The user who enabled auto-merge for this Pull Request'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AutoMergeEnabledEvent object'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['AutoMergeEnabledEvent']] = Field(
        'AutoMergeEnabledEvent', alias='__typename'
    )


class AutoMergeRequest(BaseModel):
    """
    Represents an auto-merge request for a pull request
    """

    authorEmail: Optional[String] = Field(
        None, description='The email address of the author of this auto-merge request.'
    )
    commitBody: Optional[String] = Field(
        None,
        description='The commit message of the auto-merge request. If a merge queue is required by\nthe base branch, this value will be set by the merge queue when merging.',
    )
    commitHeadline: Optional[String] = Field(
        None,
        description='The commit title of the auto-merge request. If a merge queue is required by\nthe base branch, this value will be set by the merge queue when merging',
    )
    enabledAt: Optional[DateTime] = Field(
        None, description='When was this auto-merge request was enabled.'
    )
    enabledBy: Optional[Actor] = Field(
        None, description='The actor who created the auto-merge request.'
    )
    mergeMethod: PullRequestMergeMethod = Field(
        ...,
        description='The merge method of the auto-merge request. If a merge queue is required by\nthe base branch, this value will be set by the merge queue when merging.',
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='The pull request that this auto-merge request is set against.'
    )
    typename__: Optional[Literal['AutoMergeRequest']] = Field(
        'AutoMergeRequest', alias='__typename'
    )


class AutoRebaseEnabledEvent(Node):
    """
    Represents a 'auto_rebase_enabled' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enabler: Optional[User_aliased] = Field(
        None,
        description='The user who enabled auto-merge (rebase) for this Pull Request',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AutoRebaseEnabledEvent object'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['AutoRebaseEnabledEvent']] = Field(
        'AutoRebaseEnabledEvent', alias='__typename'
    )


class AutoSquashEnabledEvent(Node):
    """
    Represents a 'auto_squash_enabled' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enabler: Optional[User_aliased] = Field(
        None,
        description='The user who enabled auto-merge (squash) for this Pull Request',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AutoSquashEnabledEvent object'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['AutoSquashEnabledEvent']] = Field(
        'AutoSquashEnabledEvent', alias='__typename'
    )


class AutomaticBaseChangeFailedEvent(Node):
    """
    Represents a 'automatic_base_change_failed' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AutomaticBaseChangeFailedEvent object'
    )
    newBase: String = Field(..., description='The new base for this PR')
    oldBase: String = Field(..., description='The old base for this PR')
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['AutomaticBaseChangeFailedEvent']] = Field(
        'AutomaticBaseChangeFailedEvent', alias='__typename'
    )


class AutomaticBaseChangeSucceededEvent(Node):
    """
    Represents a 'automatic_base_change_succeeded' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the AutomaticBaseChangeSucceededEvent object'
    )
    newBase: String = Field(..., description='The new base for this PR')
    oldBase: String = Field(..., description='The old base for this PR')
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['AutomaticBaseChangeSucceededEvent']] = Field(
        'AutomaticBaseChangeSucceededEvent', alias='__typename'
    )


class BaseRefChangedEvent(Node):
    """
    Represents a 'base_ref_changed' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    currentRefName: String = Field(
        ...,
        description='Identifies the name of the base ref for the pull request after it was changed.',
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the BaseRefChangedEvent object'
    )
    previousRefName: String = Field(
        ...,
        description='Identifies the name of the base ref for the pull request before it was changed.',
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['BaseRefChangedEvent']] = Field(
        'BaseRefChangedEvent', alias='__typename'
    )


class BaseRefDeletedEvent(Node):
    """
    Represents a 'base_ref_deleted' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    baseRefName: Optional[String] = Field(
        None,
        description='Identifies the name of the Ref associated with the `base_ref_deleted` event.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the BaseRefDeletedEvent object'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['BaseRefDeletedEvent']] = Field(
        'BaseRefDeletedEvent', alias='__typename'
    )


class BaseRefForcePushedEvent(Node):
    """
    Represents a 'base_ref_force_pushed' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    afterCommit: Optional[Commit_aliased] = Field(
        None,
        description="Identifies the after commit SHA for the 'base_ref_force_pushed' event.",
    )
    beforeCommit: Optional[Commit_aliased] = Field(
        None,
        description="Identifies the before commit SHA for the 'base_ref_force_pushed' event.",
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the BaseRefForcePushedEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    ref: Optional[Ref] = Field(
        None,
        description="Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.",
    )
    typename__: Optional[Literal['BaseRefForcePushedEvent']] = Field(
        'BaseRefForcePushedEvent', alias='__typename'
    )


class Blame(BaseModel):
    """
    Represents a Git blame.
    """

    ranges: List[BlameRange] = Field(
        ..., description='The list of ranges from a Git blame.'
    )
    typename__: Optional[Literal['Blame']] = Field('Blame', alias='__typename')


class BlameRange(BaseModel):
    """
    Represents a range of information from a Git blame.
    """

    age: Int = Field(
        ...,
        description="Identifies the recency of the change, from 1 (new) to 10 (old). This is\ncalculated as a 2-quantile and determines the length of distance between the\nmedian age of all the changes in the file and the recency of the current\nrange's change.",
    )
    commit: Commit_aliased = Field(..., description='Identifies the line author')
    endingLine: Int = Field(..., description='The ending line for the range')
    startingLine: Int = Field(..., description='The starting line for the range')
    typename__: Optional[Literal['BlameRange']] = Field(
        'BlameRange', alias='__typename'
    )


class Blob(GitObject, Node):
    """
    Represents a Git blob.
    """

    abbreviatedOid: String = Field(
        ..., description='An abbreviated version of the Git object ID'
    )
    byteSize: Int = Field(..., description='Byte size of Blob object')
    commitResourcePath: URI = Field(
        ..., description='The HTTP path for this Git object'
    )
    commitUrl: URI = Field(..., description='The HTTP URL for this Git object')
    id: ID_aliased = Field(..., description='The Node ID of the Blob object')
    isBinary: Optional[Boolean] = Field(
        None,
        description='Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.',
    )
    isTruncated: Boolean = Field(
        ..., description='Indicates whether the contents is truncated'
    )
    oid: GitObjectID = Field(..., description='The Git object ID')
    repository: Repository_aliased = Field(
        ..., description='The Repository the Git object belongs to'
    )
    text: Optional[String] = Field(
        None, description='UTF8 text data or null if the Blob is binary'
    )
    typename__: Optional[Literal['Blob']] = Field('Blob', alias='__typename')


class Bot(Actor, Node, UniformResourceLocatable):
    """
    A special type of user which takes actions on behalf of GitHub Apps.
    """

    avatarUrl: URI = Field(
        ..., description="A URL pointing to the GitHub App's public avatar."
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Bot object')
    login: String = Field(..., description='The username of the actor.')
    resourcePath: URI = Field(..., description='The HTTP path for this bot')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this bot')
    typename__: Optional[Literal['Bot']] = Field('Bot', alias='__typename')


class BranchNamePatternParameters(BaseModel):
    """
    Parameters to be used for the branch_name_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Boolean = Field(
        ..., description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['BranchNamePatternParameters']] = Field(
        'BranchNamePatternParameters', alias='__typename'
    )


class BranchProtectionRule(Node):
    """
    A branch protection rule.
    """

    allowsDeletions: Boolean = Field(..., description='Can this branch be deleted.')
    allowsForcePushes: Boolean = Field(
        ..., description='Are force pushes allowed on this branch.'
    )
    blocksCreations: Boolean = Field(
        ..., description='Is branch creation a protected operation.'
    )
    branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection = Field(
        ...,
        description='A list of conflicts matching branches protection rule and other branch protection rules',
    )
    bypassForcePushAllowances: BypassForcePushAllowanceConnection = Field(
        ...,
        description='A list of actors able to force push for this branch protection rule.',
    )
    bypassPullRequestAllowances: BypassPullRequestAllowanceConnection = Field(
        ...,
        description='A list of actors able to bypass PRs for this branch protection rule.',
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created this branch protection rule.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    dismissesStaleReviews: Boolean = Field(
        ...,
        description='Will new commits pushed to matching branches dismiss pull request review approvals.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the BranchProtectionRule object'
    )
    isAdminEnforced: Boolean = Field(
        ..., description='Can admins override branch protection.'
    )
    lockAllowsFetchAndMerge: Boolean = Field(
        ...,
        description='Whether users can pull changes from upstream when the branch is locked. Set to\n`true` to allow fork syncing. Set to `false` to prevent fork syncing.',
    )
    lockBranch: Boolean = Field(
        ...,
        description='Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.',
    )
    matchingRefs: RefConnection = Field(
        ..., description='Repository refs that are protected by this rule'
    )
    pattern: String = Field(..., description='Identifies the protection rule pattern.')
    pushAllowances: PushAllowanceConnection = Field(
        ..., description='A list push allowances for this branch protection rule.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with this branch protection rule.'
    )
    requireLastPushApproval: Boolean = Field(
        ...,
        description='Whether the most recent push must be approved by someone other than the person who pushed it',
    )
    requiredApprovingReviewCount: Optional[Int] = Field(
        None,
        description='Number of approving reviews required to update matching branches.',
    )
    requiredDeploymentEnvironments: Optional[List[Optional[String]]] = Field(
        None,
        description='List of required deployment environments that must be deployed successfully to update matching branches',
    )
    requiredStatusCheckContexts: Optional[List[Optional[String]]] = Field(
        None,
        description='List of required status check contexts that must pass for commits to be accepted to matching branches.',
    )
    requiredStatusChecks: Optional[List[RequiredStatusCheckDescription]] = Field(
        None,
        description='List of required status checks that must pass for commits to be accepted to matching branches.',
    )
    requiresApprovingReviews: Boolean = Field(
        ..., description='Are approving reviews required to update matching branches.'
    )
    requiresCodeOwnerReviews: Boolean = Field(
        ...,
        description='Are reviews from code owners required to update matching branches.',
    )
    requiresCommitSignatures: Boolean = Field(
        ..., description='Are commits required to be signed.'
    )
    requiresConversationResolution: Boolean = Field(
        ..., description='Are conversations required to be resolved before merging.'
    )
    requiresDeployments: Boolean = Field(
        ...,
        description='Does this branch require deployment to specific environments before merging',
    )
    requiresLinearHistory: Boolean = Field(
        ...,
        description='Are merge commits prohibited from being pushed to this branch.',
    )
    requiresStatusChecks: Boolean = Field(
        ..., description='Are status checks required to update matching branches.'
    )
    requiresStrictStatusChecks: Boolean = Field(
        ..., description='Are branches required to be up to date before merging.'
    )
    restrictsPushes: Boolean = Field(
        ..., description='Is pushing to matching branches restricted.'
    )
    restrictsReviewDismissals: Boolean = Field(
        ..., description='Is dismissal of pull request reviews restricted.'
    )
    reviewDismissalAllowances: ReviewDismissalAllowanceConnection = Field(
        ...,
        description='A list review dismissal allowances for this branch protection rule.',
    )
    typename__: Optional[Literal['BranchProtectionRule']] = Field(
        'BranchProtectionRule', alias='__typename'
    )


class BranchProtectionRuleConflict(BaseModel):
    """
    A conflict between two branch protection rules.
    """

    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None, description='Identifies the branch protection rule.'
    )
    conflictingBranchProtectionRule: Optional[BranchProtectionRule] = Field(
        None, description='Identifies the conflicting branch protection rule.'
    )
    ref: Optional[Ref] = Field(
        None, description='Identifies the branch ref that has conflicting rules'
    )
    typename__: Optional[Literal['BranchProtectionRuleConflict']] = Field(
        'BranchProtectionRuleConflict', alias='__typename'
    )


class BranchProtectionRuleConflictConnection(BaseModel):
    """
    The connection type for BranchProtectionRuleConflict.
    """

    edges: Optional[List[Optional[BranchProtectionRuleConflictEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[BranchProtectionRuleConflict]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['BranchProtectionRuleConflictConnection']] = Field(
        'BranchProtectionRuleConflictConnection', alias='__typename'
    )


class BranchProtectionRuleConflictEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[BranchProtectionRuleConflict] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['BranchProtectionRuleConflictEdge']] = Field(
        'BranchProtectionRuleConflictEdge', alias='__typename'
    )


class BranchProtectionRuleConnection(BaseModel):
    """
    The connection type for BranchProtectionRule.
    """

    edges: Optional[List[Optional[BranchProtectionRuleEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[BranchProtectionRule]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['BranchProtectionRuleConnection']] = Field(
        'BranchProtectionRuleConnection', alias='__typename'
    )


class BranchProtectionRuleEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[BranchProtectionRule] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['BranchProtectionRuleEdge']] = Field(
        'BranchProtectionRuleEdge', alias='__typename'
    )


class BypassForcePushAllowance(Node):
    """
    A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
    """

    actor: Optional[BranchActorAllowanceActor] = Field(
        None, description='The actor that can force push.'
    )
    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None,
        description='Identifies the branch protection rule associated with the allowed user, team, or app.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the BypassForcePushAllowance object'
    )
    typename__: Optional[Literal['BypassForcePushAllowance']] = Field(
        'BypassForcePushAllowance', alias='__typename'
    )


class BypassForcePushAllowanceConnection(BaseModel):
    """
    The connection type for BypassForcePushAllowance.
    """

    edges: Optional[List[Optional[BypassForcePushAllowanceEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[BypassForcePushAllowance]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['BypassForcePushAllowanceConnection']] = Field(
        'BypassForcePushAllowanceConnection', alias='__typename'
    )


class BypassForcePushAllowanceEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[BypassForcePushAllowance] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['BypassForcePushAllowanceEdge']] = Field(
        'BypassForcePushAllowanceEdge', alias='__typename'
    )


class BypassPullRequestAllowance(Node):
    """
    A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
    """

    actor: Optional[BranchActorAllowanceActor] = Field(
        None, description='The actor that can bypass.'
    )
    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None,
        description='Identifies the branch protection rule associated with the allowed user, team, or app.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the BypassPullRequestAllowance object'
    )
    typename__: Optional[Literal['BypassPullRequestAllowance']] = Field(
        'BypassPullRequestAllowance', alias='__typename'
    )


class BypassPullRequestAllowanceConnection(BaseModel):
    """
    The connection type for BypassPullRequestAllowance.
    """

    edges: Optional[List[Optional[BypassPullRequestAllowanceEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[BypassPullRequestAllowance]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['BypassPullRequestAllowanceConnection']] = Field(
        'BypassPullRequestAllowanceConnection', alias='__typename'
    )


class BypassPullRequestAllowanceEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[BypassPullRequestAllowance] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['BypassPullRequestAllowanceEdge']] = Field(
        'BypassPullRequestAllowanceEdge', alias='__typename'
    )


class CVSS(BaseModel):
    """
    The Common Vulnerability Scoring System
    """

    score: Float = Field(
        ..., description='The CVSS score associated with this advisory'
    )
    vectorString: Optional[String] = Field(
        None, description='The CVSS vector string associated with this advisory'
    )
    typename__: Optional[Literal['CVSS']] = Field('CVSS', alias='__typename')


class CWE(Node):
    """
    A common weakness enumeration
    """

    cweId: String = Field(..., description='The id of the CWE')
    description: String = Field(..., description='A detailed description of this CWE')
    id: ID_aliased = Field(..., description='The Node ID of the CWE object')
    name: String = Field(..., description='The name of this CWE')
    typename__: Optional[Literal['CWE']] = Field('CWE', alias='__typename')


class CWEConnection(BaseModel):
    """
    The connection type for CWE.
    """

    edges: Optional[List[Optional[CWEEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CWE]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CWEConnection']] = Field(
        'CWEConnection', alias='__typename'
    )


class CWEEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CWE] = Field(None, description='The item at the end of the edge.')
    typename__: Optional[Literal['CWEEdge']] = Field('CWEEdge', alias='__typename')


class CancelEnterpriseAdminInvitationPayload(BaseModel):
    """
    Autogenerated return type of CancelEnterpriseAdminInvitation.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitation: Optional[EnterpriseAdministratorInvitation] = Field(
        None, description='The invitation that was canceled.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of canceling an administrator invitation.',
    )
    typename__: Optional[Literal['CancelEnterpriseAdminInvitationPayload']] = Field(
        'CancelEnterpriseAdminInvitationPayload', alias='__typename'
    )


class CancelEnterpriseMemberInvitationPayload(BaseModel):
    """
    Autogenerated return type of CancelEnterpriseMemberInvitation.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitation: Optional[EnterpriseMemberInvitation] = Field(
        None, description='The invitation that was canceled.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of canceling an member invitation.',
    )
    typename__: Optional[Literal['CancelEnterpriseMemberInvitationPayload']] = Field(
        'CancelEnterpriseMemberInvitationPayload', alias='__typename'
    )


class CancelSponsorshipPayload(BaseModel):
    """
    Autogenerated return type of CancelSponsorship.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorsTier: Optional[SponsorsTier] = Field(
        None, description='The tier that was being used at the time of cancellation.'
    )
    typename__: Optional[Literal['CancelSponsorshipPayload']] = Field(
        'CancelSponsorshipPayload', alias='__typename'
    )


class ChangeUserStatusPayload(BaseModel):
    """
    Autogenerated return type of ChangeUserStatus.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    status: Optional[UserStatus] = Field(None, description='Your updated status.')
    typename__: Optional[Literal['ChangeUserStatusPayload']] = Field(
        'ChangeUserStatusPayload', alias='__typename'
    )


class CheckAnnotation(BaseModel):
    """
    A single check annotation.
    """

    annotationLevel: Optional[CheckAnnotationLevel] = Field(
        None, description="The annotation's severity level."
    )
    blobUrl: URI = Field(
        ..., description='The path to the file that this annotation was made on.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    location: CheckAnnotationSpan = Field(
        ..., description='The position of this annotation.'
    )
    message: String = Field(..., description="The annotation's message.")
    path: String = Field(..., description='The path that this annotation was made on.')
    rawDetails: Optional[String] = Field(
        None, description='Additional information about the annotation.'
    )
    title: Optional[String] = Field(None, description="The annotation's title")
    typename__: Optional[Literal['CheckAnnotation']] = Field(
        'CheckAnnotation', alias='__typename'
    )


class CheckAnnotationConnection(BaseModel):
    """
    The connection type for CheckAnnotation.
    """

    edges: Optional[List[Optional[CheckAnnotationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CheckAnnotation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CheckAnnotationConnection']] = Field(
        'CheckAnnotationConnection', alias='__typename'
    )


class CheckAnnotationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CheckAnnotation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CheckAnnotationEdge']] = Field(
        'CheckAnnotationEdge', alias='__typename'
    )


class CheckAnnotationPosition(BaseModel):
    """
    A character position in a check annotation.
    """

    column: Optional[Int] = Field(None, description='Column number (1 indexed).')
    line: Int = Field(..., description='Line number (1 indexed).')
    typename__: Optional[Literal['CheckAnnotationPosition']] = Field(
        'CheckAnnotationPosition', alias='__typename'
    )


class CheckAnnotationSpan(BaseModel):
    """
    An inclusive pair of positions for a check annotation.
    """

    end: CheckAnnotationPosition = Field(..., description='End position (inclusive).')
    start: CheckAnnotationPosition = Field(
        ..., description='Start position (inclusive).'
    )
    typename__: Optional[Literal['CheckAnnotationSpan']] = Field(
        'CheckAnnotationSpan', alias='__typename'
    )


class CheckRun(Node, RequirableByPullRequest, UniformResourceLocatable):
    """
    A check run.
    """

    annotations: Optional[CheckAnnotationConnection] = Field(
        None, description="The check run's annotations"
    )
    checkSuite: CheckSuite = Field(
        ..., description='The check suite that this run is a part of.'
    )
    completedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the check run was completed.',
    )
    conclusion: Optional[CheckConclusionState] = Field(
        None, description='The conclusion of the check run.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    deployment: Optional[Deployment] = Field(
        None, description='The corresponding deployment for this job, if any'
    )
    detailsUrl: Optional[URI] = Field(
        None,
        description="The URL from which to find full details of the check run on the integrator's site.",
    )
    externalId: Optional[String] = Field(
        None, description="A reference for the check run on the integrator's system."
    )
    id: ID_aliased = Field(..., description='The Node ID of the CheckRun object')
    isRequired: Boolean = Field(
        ...,
        description='Whether this is required to pass before merging for a specific pull request.',
    )
    name: String = Field(..., description='The name of the check for this check run.')
    pendingDeploymentRequest: Optional[DeploymentRequest] = Field(
        None,
        description='Information about a pending deployment, if any, in this check run',
    )
    permalink: URI = Field(..., description='The permalink to the check run summary.')
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this check run.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this check run.')
    startedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the check run was started.'
    )
    status: CheckStatusState = Field(
        ..., description='The current status of the check run.'
    )
    steps: Optional[CheckStepConnection] = Field(
        None, description="The check run's steps"
    )
    summary: Optional[String] = Field(
        None, description="A string representing the check run's summary"
    )
    text: Optional[String] = Field(
        None, description="A string representing the check run's text"
    )
    title: Optional[String] = Field(
        None, description='A string representing the check run'
    )
    url: URI = Field(..., description='The HTTP URL for this check run.')
    typename__: Optional[Literal['CheckRun']] = Field('CheckRun', alias='__typename')


class CheckRunConnection(BaseModel):
    """
    The connection type for CheckRun.
    """

    edges: Optional[List[Optional[CheckRunEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CheckRun]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CheckRunConnection']] = Field(
        'CheckRunConnection', alias='__typename'
    )


class CheckRunEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CheckRun_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CheckRunEdge']] = Field(
        'CheckRunEdge', alias='__typename'
    )


class CheckRunStateCount(BaseModel):
    """
    Represents a count of the state of a check run.
    """

    count: Int = Field(..., description='The number of check runs with this state.')
    state: CheckRunState = Field(..., description='The state of a check run.')
    typename__: Optional[Literal['CheckRunStateCount']] = Field(
        'CheckRunStateCount', alias='__typename'
    )


class CheckStep(BaseModel):
    """
    A single check step.
    """

    completedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the check step was completed.',
    )
    conclusion: Optional[CheckConclusionState] = Field(
        None, description='The conclusion of the check step.'
    )
    externalId: Optional[String] = Field(
        None, description="A reference for the check step on the integrator's system."
    )
    name: String = Field(..., description="The step's name.")
    number: Int = Field(
        ...,
        description='The index of the step in the list of steps of the parent check run.',
    )
    secondsToCompletion: Optional[Int] = Field(
        None, description='Number of seconds to completion.'
    )
    startedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the check step was started.',
    )
    status: CheckStatusState = Field(
        ..., description='The current status of the check step.'
    )
    typename__: Optional[Literal['CheckStep']] = Field('CheckStep', alias='__typename')


class CheckStepConnection(BaseModel):
    """
    The connection type for CheckStep.
    """

    edges: Optional[List[Optional[CheckStepEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CheckStep]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CheckStepConnection']] = Field(
        'CheckStepConnection', alias='__typename'
    )


class CheckStepEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CheckStep] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CheckStepEdge']] = Field(
        'CheckStepEdge', alias='__typename'
    )


class CheckSuite(Node):
    """
    A check suite.
    """

    app: Optional[App_aliased] = Field(
        None, description='The GitHub App which created this check suite.'
    )
    branch: Optional[Ref] = Field(
        None, description='The name of the branch for this check suite.'
    )
    checkRuns: Optional[CheckRunConnection] = Field(
        None, description='The check runs associated with a check suite.'
    )
    commit: Commit_aliased = Field(..., description='The commit for this check suite')
    conclusion: Optional[CheckConclusionState] = Field(
        None, description='The conclusion of this check suite.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[User_aliased] = Field(
        None, description='The user who triggered the check suite.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the CheckSuite object')
    matchingPullRequests: Optional[PullRequestConnection] = Field(
        None, description='A list of open pull requests matching the check suite.'
    )
    push: Optional[Push] = Field(
        None, description='The push that triggered this check suite.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this check suite.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this check suite')
    status: CheckStatusState = Field(..., description='The status of this check suite.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this check suite')
    workflowRun: Optional[WorkflowRun] = Field(
        None, description='The workflow run associated with this check suite.'
    )
    typename__: Optional[Literal['CheckSuite']] = Field(
        'CheckSuite', alias='__typename'
    )


class CheckSuiteConnection(BaseModel):
    """
    The connection type for CheckSuite.
    """

    edges: Optional[List[Optional[CheckSuiteEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CheckSuite]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CheckSuiteConnection']] = Field(
        'CheckSuiteConnection', alias='__typename'
    )


class CheckSuiteEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CheckSuite] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CheckSuiteEdge']] = Field(
        'CheckSuiteEdge', alias='__typename'
    )


class ClearLabelsFromLabelablePayload(BaseModel):
    """
    Autogenerated return type of ClearLabelsFromLabelable.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    labelable: Optional[Labelable] = Field(
        None, description='The item that was unlabeled.'
    )
    typename__: Optional[Literal['ClearLabelsFromLabelablePayload']] = Field(
        'ClearLabelsFromLabelablePayload', alias='__typename'
    )


class ClearProjectV2ItemFieldValuePayload(BaseModel):
    """
    Autogenerated return type of ClearProjectV2ItemFieldValue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2Item: Optional[ProjectV2Item] = Field(
        None, description='The updated item.'
    )
    typename__: Optional[Literal['ClearProjectV2ItemFieldValuePayload']] = Field(
        'ClearProjectV2ItemFieldValuePayload', alias='__typename'
    )


class CloneProjectPayload(BaseModel):
    """
    Autogenerated return type of CloneProject.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    jobStatusId: Optional[String] = Field(
        None, description='The id of the JobStatus for populating cloned fields.'
    )
    project: Optional[Project] = Field(None, description='The new cloned project.')
    typename__: Optional[Literal['CloneProjectPayload']] = Field(
        'CloneProjectPayload', alias='__typename'
    )


class CloneTemplateRepositoryPayload(BaseModel):
    """
    Autogenerated return type of CloneTemplateRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The new repository.'
    )
    typename__: Optional[Literal['CloneTemplateRepositoryPayload']] = Field(
        'CloneTemplateRepositoryPayload', alias='__typename'
    )


class CloseDiscussionPayload(BaseModel):
    """
    Autogenerated return type of CloseDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that was closed.'
    )
    typename__: Optional[Literal['CloseDiscussionPayload']] = Field(
        'CloseDiscussionPayload', alias='__typename'
    )


class CloseIssuePayload(BaseModel):
    """
    Autogenerated return type of CloseIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The issue that was closed.'
    )
    typename__: Optional[Literal['CloseIssuePayload']] = Field(
        'CloseIssuePayload', alias='__typename'
    )


class ClosePullRequestPayload(BaseModel):
    """
    Autogenerated return type of ClosePullRequest.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that was closed.'
    )
    typename__: Optional[Literal['ClosePullRequestPayload']] = Field(
        'ClosePullRequestPayload', alias='__typename'
    )


class ClosedEvent(Node, UniformResourceLocatable):
    """
    Represents a 'closed' event on any `Closable`.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    closable: Closable = Field(..., description='Object that was closed.')
    closer: Optional[Closer] = Field(
        None, description='Object which triggered the creation of this event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ClosedEvent object')
    resourcePath: URI = Field(..., description='The HTTP path for this closed event.')
    stateReason: Optional[IssueStateReason] = Field(
        None, description='The reason the issue state was changed to closed.'
    )
    url: URI = Field(..., description='The HTTP URL for this closed event.')
    typename__: Optional[Literal['ClosedEvent']] = Field(
        'ClosedEvent', alias='__typename'
    )


class CodeOfConduct(Node):
    """
    The Code of Conduct for a repository
    """

    body: Optional[String] = Field(None, description='The body of the Code of Conduct')
    id: ID_aliased = Field(..., description='The Node ID of the CodeOfConduct object')
    key: String = Field(..., description='The key for the Code of Conduct')
    name: String = Field(..., description='The formal name of the Code of Conduct')
    resourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this Code of Conduct'
    )
    url: Optional[URI] = Field(
        None, description='The HTTP URL for this Code of Conduct'
    )
    typename__: Optional[Literal['CodeOfConduct']] = Field(
        'CodeOfConduct', alias='__typename'
    )


class CodeScanningParameters(BaseModel):
    """
    Choose which tools must provide code scanning results before the reference is
    updated. When configured, code scanning must be enabled and have results for
    both the commit and the reference being updated.
    """

    codeScanningTools: List[CodeScanningTool] = Field(
        ...,
        description='Tools that must provide code scanning results for this rule to pass.',
    )
    typename__: Optional[Literal['CodeScanningParameters']] = Field(
        'CodeScanningParameters', alias='__typename'
    )


class CodeScanningTool(BaseModel):
    """
    A tool that must provide code scanning results for this rule to pass.
    """

    alertsThreshold: String = Field(
        ...,
        description='The severity level at which code scanning results that raise alerts block a\nreference update. For more information on alert severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."',
    )
    securityAlertsThreshold: String = Field(
        ...,
        description='The severity level at which code scanning results that raise security alerts\nblock a reference update. For more information on security severity levels,\nsee "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."',
    )
    tool: String = Field(..., description='The name of a code scanning tool')
    typename__: Optional[Literal['CodeScanningTool']] = Field(
        'CodeScanningTool', alias='__typename'
    )


class CommentDeletedEvent(Node):
    """
    Represents a 'comment_deleted' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    deletedCommentAuthor: Optional[Actor] = Field(
        None, description='The user who authored the deleted comment.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the CommentDeletedEvent object'
    )
    typename__: Optional[Literal['CommentDeletedEvent']] = Field(
        'CommentDeletedEvent', alias='__typename'
    )


class Commit(GitObject, Node, Subscribable, UniformResourceLocatable):
    """
    Represents a Git commit.
    """

    abbreviatedOid: String = Field(
        ..., description='An abbreviated version of the Git object ID'
    )
    additions: Int = Field(..., description='The number of additions in this commit.')
    associatedPullRequests: Optional[PullRequestConnection] = Field(
        None,
        description='The merged Pull Request that introduced the commit to the repository. If the\ncommit is not present in the default branch, additionally returns open Pull\nRequests associated with the commit',
    )
    author: Optional[GitActor] = Field(
        None, description='Authorship details of the commit.'
    )
    authoredByCommitter: Boolean = Field(
        ..., description='Check if the committer and the author match.'
    )
    authoredDate: DateTime = Field(
        ..., description='The datetime when this commit was authored.'
    )
    authors: GitActorConnection = Field(
        ...,
        description='The list of authors for this commit based on the git author and the Co-authored-by\nmessage trailer. The git author will always be first.',
    )
    blame: Blame = Field(..., description='Fetches `git blame` information.')
    changedFiles: Int = Field(
        ...,
        description='We recommend using the `changedFilesIfAvailable` field instead of\n`changedFiles`, as `changedFiles` will cause your request to return an error\nif GitHub is unable to calculate the number of changed files.',
    )
    changedFilesIfAvailable: Optional[Int] = Field(
        None,
        description='The number of changed files in this commit. If GitHub is unable to calculate\nthe number of changed files (for example due to a timeout), this will return\n`null`. We recommend using this field instead of `changedFiles`.',
    )
    checkSuites: Optional[CheckSuiteConnection] = Field(
        None, description='The check suites associated with a commit.'
    )
    comments: CommitCommentConnection = Field(
        ..., description='Comments made on the commit.'
    )
    commitResourcePath: URI = Field(
        ..., description='The HTTP path for this Git object'
    )
    commitUrl: URI = Field(..., description='The HTTP URL for this Git object')
    committedDate: DateTime = Field(
        ..., description='The datetime when this commit was committed.'
    )
    committedViaWeb: Boolean = Field(
        ..., description='Check if committed via GitHub web UI.'
    )
    committer: Optional[GitActor] = Field(
        None, description='Committer details of the commit.'
    )
    deletions: Int = Field(..., description='The number of deletions in this commit.')
    deployments: Optional[DeploymentConnection] = Field(
        None, description='The deployments associated with a commit.'
    )
    file: Optional[TreeEntry] = Field(
        None,
        description='The tree entry representing the file located at the given path.',
    )
    history: CommitHistoryConnection = Field(
        ...,
        description='The linear commit history starting from (and including) this commit, in the same order as `git log`.',
    )
    id: ID_aliased = Field(..., description='The Node ID of the Commit object')
    message: String = Field(..., description='The Git commit message')
    messageBody: String = Field(..., description='The Git commit message body')
    messageBodyHTML: HTML = Field(
        ..., description='The commit message body rendered to HTML.'
    )
    messageHeadline: String = Field(..., description='The Git commit message headline')
    messageHeadlineHTML: HTML = Field(
        ..., description='The commit message headline rendered to HTML.'
    )
    oid: GitObjectID = Field(..., description='The Git object ID')
    onBehalfOf: Optional[Organization_aliased] = Field(
        None, description='The organization this commit was made on behalf of.'
    )
    parents: CommitConnection = Field(..., description='The parents of a commit.')
    pushedDate: Optional[DateTime] = Field(
        None, description='The datetime when this commit was pushed.'
    )
    repository: Repository_aliased = Field(
        ..., description='The Repository this commit belongs to'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this commit')
    signature: Optional[GitSignature] = Field(
        None, description='Commit signing information, if present.'
    )
    status: Optional[Status] = Field(
        None, description='Status information for this commit'
    )
    statusCheckRollup: Optional[StatusCheckRollup] = Field(
        None, description='Check and Status rollup information for this commit.'
    )
    submodules: SubmoduleConnection = Field(
        ...,
        description='Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.',
    )
    tarballUrl: URI = Field(
        ...,
        description='Returns a URL to download a tarball archive for a repository.\nNote: For private repositories, these links are temporary and expire after five minutes.',
    )
    tree: Tree = Field(..., description="Commit's root Tree")
    treeResourcePath: URI = Field(
        ..., description='The HTTP path for the tree of this commit'
    )
    treeUrl: URI = Field(..., description='The HTTP URL for the tree of this commit')
    url: URI = Field(..., description='The HTTP URL for this commit')
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    zipballUrl: URI = Field(
        ...,
        description='Returns a URL to download a zipball archive for a repository.\nNote: For private repositories, these links are temporary and expire after five minutes.',
    )
    typename__: Optional[Literal['Commit']] = Field('Commit', alias='__typename')


class CommitAuthorEmailPatternParameters(BaseModel):
    """
    Parameters to be used for the commit_author_email_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Boolean = Field(
        ..., description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['CommitAuthorEmailPatternParameters']] = Field(
        'CommitAuthorEmailPatternParameters', alias='__typename'
    )


class CommitComment(
    Comment,
    Deletable,
    Minimizable,
    Node,
    Reactable,
    RepositoryNode,
    Updatable,
    UpdatableComment,
):
    """
    Represents a comment on a given Commit.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    body: String = Field(..., description='Identifies the comment body.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    commit: Optional[Commit_aliased] = Field(
        None,
        description='Identifies the commit associated with the comment, if the commit exists.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the CommitComment object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isMinimized: Boolean = Field(
        ..., description='Returns whether or not a comment has been minimized.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    minimizedReason: Optional[String] = Field(
        None,
        description='Returns why the comment was minimized. One of `abuse`, `off-topic`,\n`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\nformatting of these values differs from the inputs to the `MinimizeComment` mutation.',
    )
    path: Optional[String] = Field(
        None, description='Identifies the file path associated with the comment.'
    )
    position: Optional[Int] = Field(
        None, description='Identifies the line position associated with the comment.'
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path permalink for this commit comment.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL permalink for this commit comment.')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanMinimize: Boolean = Field(
        ..., description='Check if the current viewer can minimize this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    typename__: Optional[Literal['CommitComment']] = Field(
        'CommitComment', alias='__typename'
    )


class CommitCommentConnection(BaseModel):
    """
    The connection type for CommitComment.
    """

    edges: Optional[List[Optional[CommitCommentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CommitComment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CommitCommentConnection']] = Field(
        'CommitCommentConnection', alias='__typename'
    )


class CommitCommentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CommitComment] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CommitCommentEdge']] = Field(
        'CommitCommentEdge', alias='__typename'
    )


class CommitCommentThread(Node, RepositoryNode):
    """
    A thread of comments on a commit.
    """

    comments: CommitCommentConnection = Field(
        ..., description='The comments that exist in this thread.'
    )
    commit: Optional[Commit_aliased] = Field(
        None, description='The commit the comments were made on.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the CommitCommentThread object'
    )
    path: Optional[String] = Field(
        None, description='The file the comments were made on.'
    )
    position: Optional[Int] = Field(
        None,
        description='The position in the diff for the commit that the comment was made on.',
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    typename__: Optional[Literal['CommitCommentThread']] = Field(
        'CommitCommentThread', alias='__typename'
    )


class CommitConnection(BaseModel):
    """
    The connection type for Commit.
    """

    edges: Optional[List[Optional[CommitEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Commit]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CommitConnection']] = Field(
        'CommitConnection', alias='__typename'
    )


class CommitContributionsByRepository(BaseModel):
    """
    This aggregates commits made by a user within one repository.
    """

    contributions: CreatedCommitContributionConnection = Field(
        ..., description='The commit contributions, each representing a day.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository in which the commits were made.'
    )
    resourcePath: URI = Field(
        ...,
        description="The HTTP path for the user's commits to the repository in this time range.",
    )
    url: URI = Field(
        ...,
        description="The HTTP URL for the user's commits to the repository in this time range.",
    )
    typename__: Optional[Literal['CommitContributionsByRepository']] = Field(
        'CommitContributionsByRepository', alias='__typename'
    )


class CommitEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Commit_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CommitEdge']] = Field(
        'CommitEdge', alias='__typename'
    )


class CommitHistoryConnection(BaseModel):
    """
    The connection type for Commit.
    """

    edges: Optional[List[Optional[CommitEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Commit]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CommitHistoryConnection']] = Field(
        'CommitHistoryConnection', alias='__typename'
    )


class CommitMessagePatternParameters(BaseModel):
    """
    Parameters to be used for the commit_message_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Boolean = Field(
        ..., description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['CommitMessagePatternParameters']] = Field(
        'CommitMessagePatternParameters', alias='__typename'
    )


class CommitterEmailPatternParameters(BaseModel):
    """
    Parameters to be used for the committer_email_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Boolean = Field(
        ..., description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['CommitterEmailPatternParameters']] = Field(
        'CommitterEmailPatternParameters', alias='__typename'
    )


class Comparison(Node):
    """
    Represents a comparison between two commit revisions.
    """

    aheadBy: Int = Field(
        ..., description='The number of commits ahead of the base branch.'
    )
    baseTarget: GitObject = Field(
        ..., description='The base revision of this comparison.'
    )
    behindBy: Int = Field(
        ..., description='The number of commits behind the base branch.'
    )
    commits: ComparisonCommitConnection = Field(
        ..., description='The commits which compose this comparison.'
    )
    headTarget: GitObject = Field(
        ..., description='The head revision of this comparison.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Comparison object')
    status: ComparisonStatus = Field(..., description='The status of this comparison.')
    typename__: Optional[Literal['Comparison']] = Field(
        'Comparison', alias='__typename'
    )


class ComparisonCommitConnection(BaseModel):
    """
    The connection type for Commit.
    """

    authorCount: Int = Field(
        ..., description='The total count of authors and co-authors across all commits.'
    )
    edges: Optional[List[Optional[CommitEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Commit]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ComparisonCommitConnection']] = Field(
        'ComparisonCommitConnection', alias='__typename'
    )


class ConnectedEvent(Node):
    """
    Represents a 'connected' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ConnectedEvent object')
    isCrossRepository: Boolean = Field(
        ..., description='Reference originated in a different repository.'
    )
    source: ReferencedSubject = Field(
        ..., description='Issue or pull request that made the reference.'
    )
    subject: ReferencedSubject = Field(
        ..., description='Issue or pull request which was connected.'
    )
    typename__: Optional[Literal['ConnectedEvent']] = Field(
        'ConnectedEvent', alias='__typename'
    )


class ContributingGuidelines(BaseModel):
    """
    The Contributing Guidelines for a repository.
    """

    body: Optional[String] = Field(
        None, description='The body of the Contributing Guidelines.'
    )
    resourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the Contributing Guidelines.'
    )
    url: Optional[URI] = Field(
        None, description='The HTTP URL for the Contributing Guidelines.'
    )
    typename__: Optional[Literal['ContributingGuidelines']] = Field(
        'ContributingGuidelines', alias='__typename'
    )


class ContributionCalendar(BaseModel):
    """
    A calendar of contributions made on GitHub by a user.
    """

    colors: List[String] = Field(
        ...,
        description='A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.',
    )
    isHalloween: Boolean = Field(
        ...,
        description="Determine if the color set was chosen because it's currently Halloween.",
    )
    months: List[ContributionCalendarMonth] = Field(
        ..., description='A list of the months of contributions in this calendar.'
    )
    totalContributions: Int = Field(
        ..., description='The count of total contributions in the calendar.'
    )
    weeks: List[ContributionCalendarWeek] = Field(
        ..., description='A list of the weeks of contributions in this calendar.'
    )
    typename__: Optional[Literal['ContributionCalendar']] = Field(
        'ContributionCalendar', alias='__typename'
    )


class ContributionCalendarDay(BaseModel):
    """
    Represents a single day of contributions on GitHub by a user.
    """

    color: String = Field(
        ...,
        description='The hex color code that represents how many contributions were made on this day compared to others in the calendar.',
    )
    contributionCount: Int = Field(
        ..., description='How many contributions were made by the user on this day.'
    )
    contributionLevel: ContributionLevel = Field(
        ...,
        description='Indication of contributions, relative to other days. Can be used to indicate\nwhich color to represent this day on a calendar.',
    )
    date: Date = Field(..., description='The day this square represents.')
    weekday: Int = Field(
        ...,
        description='A number representing which day of the week this square represents, e.g., 1 is Monday.',
    )
    typename__: Optional[Literal['ContributionCalendarDay']] = Field(
        'ContributionCalendarDay', alias='__typename'
    )


class ContributionCalendarMonth(BaseModel):
    """
    A month of contributions in a user's contribution graph.
    """

    firstDay: Date = Field(..., description='The date of the first day of this month.')
    name: String = Field(..., description='The name of the month.')
    totalWeeks: Int = Field(..., description='How many weeks started in this month.')
    year: Int = Field(..., description='The year the month occurred in.')
    typename__: Optional[Literal['ContributionCalendarMonth']] = Field(
        'ContributionCalendarMonth', alias='__typename'
    )


class ContributionCalendarWeek(BaseModel):
    """
    A week of contributions in a user's contribution graph.
    """

    contributionDays: List[ContributionCalendarDay] = Field(
        ..., description='The days of contributions in this week.'
    )
    firstDay: Date = Field(
        ..., description='The date of the earliest square in this week.'
    )
    typename__: Optional[Literal['ContributionCalendarWeek']] = Field(
        'ContributionCalendarWeek', alias='__typename'
    )


class ContributionsCollection(BaseModel):
    """
    A contributions collection aggregates contributions such as opened issues and commits created by a user.
    """

    commitContributionsByRepository: List[CommitContributionsByRepository] = Field(
        ..., description='Commit contributions made by the user, grouped by repository.'
    )
    contributionCalendar: ContributionCalendar = Field(
        ..., description="A calendar of this user's contributions on GitHub."
    )
    contributionYears: List[Int] = Field(
        ...,
        description='The years the user has been making contributions with the most recent year first.',
    )
    doesEndInCurrentMonth: Boolean = Field(
        ...,
        description="Determine if this collection's time span ends in the current month.",
    )
    earliestRestrictedContributionDate: Optional[Date] = Field(
        None,
        description='The date of the first restricted contribution the user made in this time\nperiod. Can only be non-null when the user has enabled private contribution counts.',
    )
    endedAt: DateTime = Field(
        ..., description='The ending date and time of this collection.'
    )
    firstIssueContribution: Optional[CreatedIssueOrRestrictedContribution] = Field(
        None,
        description="The first issue the user opened on GitHub. This will be null if that issue was\nopened outside the collection's time range and ignoreTimeRange is false. If\nthe issue is not visible but the user has opted to show private contributions,\na RestrictedContribution will be returned.",
    )
    firstPullRequestContribution: Optional[
        CreatedPullRequestOrRestrictedContribution
    ] = Field(
        None,
        description="The first pull request the user opened on GitHub. This will be null if that\npull request was opened outside the collection's time range and\nignoreTimeRange is not true. If the pull request is not visible but the user\nhas opted to show private contributions, a RestrictedContribution will be returned.",
    )
    firstRepositoryContribution: Optional[CreatedRepositoryOrRestrictedContribution] = (
        Field(
            None,
            description="The first repository the user created on GitHub. This will be null if that\nfirst repository was created outside the collection's time range and\nignoreTimeRange is false. If the repository is not visible, then a\nRestrictedContribution is returned.",
        )
    )
    hasActivityInThePast: Boolean = Field(
        ...,
        description="Does the user have any more activity in the timeline that occurred prior to the collection's time range?",
    )
    hasAnyContributions: Boolean = Field(
        ..., description='Determine if there are any contributions in this collection.'
    )
    hasAnyRestrictedContributions: Boolean = Field(
        ...,
        description='Determine if the user made any contributions in this time frame whose details\nare not visible because they were made in a private repository. Can only be\ntrue if the user enabled private contribution counts.',
    )
    isSingleDay: Boolean = Field(
        ...,
        description="Whether or not the collector's time span is all within the same day.",
    )
    issueContributions: CreatedIssueContributionConnection = Field(
        ..., description='A list of issues the user opened.'
    )
    issueContributionsByRepository: List[IssueContributionsByRepository] = Field(
        ..., description='Issue contributions made by the user, grouped by repository.'
    )
    joinedGitHubContribution: Optional[JoinedGitHubContribution] = Field(
        None,
        description="When the user signed up for GitHub. This will be null if that sign up date\nfalls outside the collection's time range and ignoreTimeRange is false.",
    )
    latestRestrictedContributionDate: Optional[Date] = Field(
        None,
        description='The date of the most recent restricted contribution the user made in this time\nperiod. Can only be non-null when the user has enabled private contribution counts.',
    )
    mostRecentCollectionWithActivity: Optional[ContributionsCollection] = Field(
        None,
        description="When this collection's time range does not include any activity from the user, use this\nto get a different collection from an earlier time range that does have activity.",
    )
    mostRecentCollectionWithoutActivity: Optional[ContributionsCollection] = Field(
        None,
        description='Returns a different contributions collection from an earlier time range than this one\nthat does not have any contributions.',
    )
    popularIssueContribution: Optional[CreatedIssueContribution_aliased] = Field(
        None,
        description='The issue the user opened on GitHub that received the most comments in the specified\ntime frame.',
    )
    popularPullRequestContribution: Optional[CreatedPullRequestContribution_aliased] = (
        Field(
            None,
            description='The pull request the user opened on GitHub that received the most comments in the\nspecified time frame.',
        )
    )
    pullRequestContributions: CreatedPullRequestContributionConnection = Field(
        ..., description='Pull request contributions made by the user.'
    )
    pullRequestContributionsByRepository: List[PullRequestContributionsByRepository] = (
        Field(
            ...,
            description='Pull request contributions made by the user, grouped by repository.',
        )
    )
    pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection = (
        Field(
            ...,
            description='Pull request review contributions made by the user. Returns the most recently\nsubmitted review for each PR reviewed by the user.',
        )
    )
    pullRequestReviewContributionsByRepository: List[
        PullRequestReviewContributionsByRepository
    ] = Field(
        ...,
        description='Pull request review contributions made by the user, grouped by repository.',
    )
    repositoryContributions: CreatedRepositoryContributionConnection = Field(
        ...,
        description='A list of repositories owned by the user that the user created in this time range.',
    )
    restrictedContributionsCount: Int = Field(
        ...,
        description='A count of contributions made by the user that the viewer cannot access. Only\nnon-zero when the user has chosen to share their private contribution counts.',
    )
    startedAt: DateTime = Field(
        ..., description='The beginning date and time of this collection.'
    )
    totalCommitContributions: Int = Field(
        ..., description='How many commits were made by the user in this time span.'
    )
    totalIssueContributions: Int = Field(
        ..., description='How many issues the user opened.'
    )
    totalPullRequestContributions: Int = Field(
        ..., description='How many pull requests the user opened.'
    )
    totalPullRequestReviewContributions: Int = Field(
        ..., description='How many pull request reviews the user left.'
    )
    totalRepositoriesWithContributedCommits: Int = Field(
        ..., description='How many different repositories the user committed to.'
    )
    totalRepositoriesWithContributedIssues: Int = Field(
        ..., description='How many different repositories the user opened issues in.'
    )
    totalRepositoriesWithContributedPullRequestReviews: Int = Field(
        ...,
        description='How many different repositories the user left pull request reviews in.',
    )
    totalRepositoriesWithContributedPullRequests: Int = Field(
        ...,
        description='How many different repositories the user opened pull requests in.',
    )
    totalRepositoryContributions: Int = Field(
        ..., description='How many repositories the user created.'
    )
    user: User_aliased = Field(
        ..., description='The user who made the contributions in this collection.'
    )
    typename__: Optional[Literal['ContributionsCollection']] = Field(
        'ContributionsCollection', alias='__typename'
    )


class ConvertProjectCardNoteToIssuePayload(BaseModel):
    """
    Autogenerated return type of ConvertProjectCardNoteToIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectCard: Optional[ProjectCard] = Field(
        None, description='The updated ProjectCard.'
    )
    typename__: Optional[Literal['ConvertProjectCardNoteToIssuePayload']] = Field(
        'ConvertProjectCardNoteToIssuePayload', alias='__typename'
    )


class ConvertProjectV2DraftIssueItemToIssuePayload(BaseModel):
    """
    Autogenerated return type of ConvertProjectV2DraftIssueItemToIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    item: Optional[ProjectV2Item] = Field(None, description='The updated project item.')
    typename__: Optional[Literal['ConvertProjectV2DraftIssueItemToIssuePayload']] = (
        Field('ConvertProjectV2DraftIssueItemToIssuePayload', alias='__typename')
    )


class ConvertPullRequestToDraftPayload(BaseModel):
    """
    Autogenerated return type of ConvertPullRequestToDraft.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that is now a draft.'
    )
    typename__: Optional[Literal['ConvertPullRequestToDraftPayload']] = Field(
        'ConvertPullRequestToDraftPayload', alias='__typename'
    )


class ConvertToDraftEvent(Node, UniformResourceLocatable):
    """
    Represents a 'convert_to_draft' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ConvertToDraftEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for this convert to draft event.'
    )
    url: URI = Field(..., description='The HTTP URL for this convert to draft event.')
    typename__: Optional[Literal['ConvertToDraftEvent']] = Field(
        'ConvertToDraftEvent', alias='__typename'
    )


class ConvertedNoteToIssueEvent(Node):
    """
    Represents a 'converted_note_to_issue' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ConvertedNoteToIssueEvent object'
    )
    project: Optional[Project] = Field(None, description='Project referenced by event.')
    projectCard: Optional[ProjectCard] = Field(
        None, description='Project card referenced by this project event.'
    )
    projectColumnName: String = Field(
        ..., description='Column name referenced by this project event.'
    )
    typename__: Optional[Literal['ConvertedNoteToIssueEvent']] = Field(
        'ConvertedNoteToIssueEvent', alias='__typename'
    )


class ConvertedToDiscussionEvent(Node):
    """
    Represents a 'converted_to_discussion' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that the issue was converted into.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ConvertedToDiscussionEvent object'
    )
    typename__: Optional[Literal['ConvertedToDiscussionEvent']] = Field(
        'ConvertedToDiscussionEvent', alias='__typename'
    )


class CopilotEndpoints(BaseModel):
    """
    Copilot endpoint information
    """

    api: String = Field(..., description='Copilot API endpoint')
    originTracker: String = Field(..., description='Copilot origin tracker endpoint')
    proxy: String = Field(..., description='Copilot proxy endpoint')
    telemetry: String = Field(..., description='Copilot telemetry endpoint')
    typename__: Optional[Literal['CopilotEndpoints']] = Field(
        'CopilotEndpoints', alias='__typename'
    )


class CopyProjectV2Payload(BaseModel):
    """
    Autogenerated return type of CopyProjectV2.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='The copied project.'
    )
    typename__: Optional[Literal['CopyProjectV2Payload']] = Field(
        'CopyProjectV2Payload', alias='__typename'
    )


class CreateAttributionInvitationPayload(BaseModel):
    """
    Autogenerated return type of CreateAttributionInvitation.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    owner: Optional[Organization_aliased] = Field(
        None, description='The owner scoping the reattributable data.'
    )
    source: Optional[Claimable] = Field(
        None, description='The account owning the data to reattribute.'
    )
    target: Optional[Claimable] = Field(
        None, description='The account which may claim the data.'
    )
    typename__: Optional[Literal['CreateAttributionInvitationPayload']] = Field(
        'CreateAttributionInvitationPayload', alias='__typename'
    )


class CreateBranchProtectionRulePayload(BaseModel):
    """
    Autogenerated return type of CreateBranchProtectionRule.
    """

    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None, description='The newly created BranchProtectionRule.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['CreateBranchProtectionRulePayload']] = Field(
        'CreateBranchProtectionRulePayload', alias='__typename'
    )


class CreateCheckRunPayload(BaseModel):
    """
    Autogenerated return type of CreateCheckRun.
    """

    checkRun: Optional[CheckRun_aliased] = Field(
        None, description='The newly created check run.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['CreateCheckRunPayload']] = Field(
        'CreateCheckRunPayload', alias='__typename'
    )


class CreateCheckSuitePayload(BaseModel):
    """
    Autogenerated return type of CreateCheckSuite.
    """

    checkSuite: Optional[CheckSuite] = Field(
        None, description='The newly created check suite.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['CreateCheckSuitePayload']] = Field(
        'CreateCheckSuitePayload', alias='__typename'
    )


class CreateCommitOnBranchPayload(BaseModel):
    """
    Autogenerated return type of CreateCommitOnBranch.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    commit: Optional[Commit_aliased] = Field(None, description='The new commit.')
    ref: Optional[Ref] = Field(
        None, description='The ref which has been updated to point to the new commit.'
    )
    typename__: Optional[Literal['CreateCommitOnBranchPayload']] = Field(
        'CreateCommitOnBranchPayload', alias='__typename'
    )


class CreateDeploymentPayload(BaseModel):
    """
    Autogenerated return type of CreateDeployment.
    """

    autoMerged: Optional[Boolean] = Field(
        None,
        description='True if the default branch has been auto-merged into the deployment ref.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deployment: Optional[Deployment] = Field(None, description='The new deployment.')
    typename__: Optional[Literal['CreateDeploymentPayload']] = Field(
        'CreateDeploymentPayload', alias='__typename'
    )


class CreateDeploymentStatusPayload(BaseModel):
    """
    Autogenerated return type of CreateDeploymentStatus.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deploymentStatus: Optional[DeploymentStatus] = Field(
        None, description='The new deployment status.'
    )
    typename__: Optional[Literal['CreateDeploymentStatusPayload']] = Field(
        'CreateDeploymentStatusPayload', alias='__typename'
    )


class CreateDiscussionPayload(BaseModel):
    """
    Autogenerated return type of CreateDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that was just created.'
    )
    typename__: Optional[Literal['CreateDiscussionPayload']] = Field(
        'CreateDiscussionPayload', alias='__typename'
    )


class CreateEnterpriseOrganizationPayload(BaseModel):
    """
    Autogenerated return type of CreateEnterpriseOrganization.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The enterprise that owns the created organization.'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The organization that was created.'
    )
    typename__: Optional[Literal['CreateEnterpriseOrganizationPayload']] = Field(
        'CreateEnterpriseOrganizationPayload', alias='__typename'
    )


class CreateEnvironmentPayload(BaseModel):
    """
    Autogenerated return type of CreateEnvironment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    environment: Optional[Environment] = Field(
        None, description='The new or existing environment.'
    )
    typename__: Optional[Literal['CreateEnvironmentPayload']] = Field(
        'CreateEnvironmentPayload', alias='__typename'
    )


class CreateIpAllowListEntryPayload(BaseModel):
    """
    Autogenerated return type of CreateIpAllowListEntry.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ipAllowListEntry: Optional[IpAllowListEntry] = Field(
        None, description='The IP allow list entry that was created.'
    )
    typename__: Optional[Literal['CreateIpAllowListEntryPayload']] = Field(
        'CreateIpAllowListEntryPayload', alias='__typename'
    )


class CreateIssuePayload(BaseModel):
    """
    Autogenerated return type of CreateIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(None, description='The new issue.')
    typename__: Optional[Literal['CreateIssuePayload']] = Field(
        'CreateIssuePayload', alias='__typename'
    )


class CreateIssueTypePayload(BaseModel):
    """
    Autogenerated return type of CreateIssueType.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueType: Optional[IssueType] = Field(
        None, description='The newly created issue type'
    )
    typename__: Optional[Literal['CreateIssueTypePayload']] = Field(
        'CreateIssueTypePayload', alias='__typename'
    )


class CreateLabelPayload(BaseModel):
    """
    Autogenerated return type of CreateLabel.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    label: Optional[Label] = Field(None, description='The new label.')
    typename__: Optional[Literal['CreateLabelPayload']] = Field(
        'CreateLabelPayload', alias='__typename'
    )


class CreateLinkedBranchPayload(BaseModel):
    """
    Autogenerated return type of CreateLinkedBranch.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The issue that was linked to.'
    )
    linkedBranch: Optional[LinkedBranch] = Field(
        None, description='The new branch issue reference.'
    )
    typename__: Optional[Literal['CreateLinkedBranchPayload']] = Field(
        'CreateLinkedBranchPayload', alias='__typename'
    )


class CreateMigrationSourcePayload(BaseModel):
    """
    Autogenerated return type of CreateMigrationSource.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    migrationSource: Optional[MigrationSource] = Field(
        None, description='The created migration source.'
    )
    typename__: Optional[Literal['CreateMigrationSourcePayload']] = Field(
        'CreateMigrationSourcePayload', alias='__typename'
    )


class CreateProjectPayload(BaseModel):
    """
    Autogenerated return type of CreateProject.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    project: Optional[Project] = Field(None, description='The new project.')
    typename__: Optional[Literal['CreateProjectPayload']] = Field(
        'CreateProjectPayload', alias='__typename'
    )


class CreateProjectV2FieldPayload(BaseModel):
    """
    Autogenerated return type of CreateProjectV2Field.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2Field: Optional[ProjectV2FieldConfiguration] = Field(
        None, description='The new field.'
    )
    typename__: Optional[Literal['CreateProjectV2FieldPayload']] = Field(
        'CreateProjectV2FieldPayload', alias='__typename'
    )


class CreateProjectV2Payload(BaseModel):
    """
    Autogenerated return type of CreateProjectV2.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(None, description='The new project.')
    typename__: Optional[Literal['CreateProjectV2Payload']] = Field(
        'CreateProjectV2Payload', alias='__typename'
    )


class CreateProjectV2StatusUpdatePayload(BaseModel):
    """
    Autogenerated return type of CreateProjectV2StatusUpdate.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    statusUpdate: Optional[ProjectV2StatusUpdate] = Field(
        None, description='The status update updated in the project.'
    )
    typename__: Optional[Literal['CreateProjectV2StatusUpdatePayload']] = Field(
        'CreateProjectV2StatusUpdatePayload', alias='__typename'
    )


class CreatePullRequestPayload(BaseModel):
    """
    Autogenerated return type of CreatePullRequest.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The new pull request.'
    )
    typename__: Optional[Literal['CreatePullRequestPayload']] = Field(
        'CreatePullRequestPayload', alias='__typename'
    )


class CreateRefPayload(BaseModel):
    """
    Autogenerated return type of CreateRef.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ref: Optional[Ref] = Field(None, description='The newly created ref.')
    typename__: Optional[Literal['CreateRefPayload']] = Field(
        'CreateRefPayload', alias='__typename'
    )


class CreateRepositoryPayload(BaseModel):
    """
    Autogenerated return type of CreateRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The new repository.'
    )
    typename__: Optional[Literal['CreateRepositoryPayload']] = Field(
        'CreateRepositoryPayload', alias='__typename'
    )


class CreateRepositoryRulesetPayload(BaseModel):
    """
    Autogenerated return type of CreateRepositoryRuleset.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ruleset: Optional[RepositoryRuleset] = Field(
        None, description='The newly created Ruleset.'
    )
    typename__: Optional[Literal['CreateRepositoryRulesetPayload']] = Field(
        'CreateRepositoryRulesetPayload', alias='__typename'
    )


class CreateSponsorsListingPayload(BaseModel):
    """
    Autogenerated return type of CreateSponsorsListing.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorsListing: Optional[SponsorsListing] = Field(
        None, description='The new GitHub Sponsors profile.'
    )
    typename__: Optional[Literal['CreateSponsorsListingPayload']] = Field(
        'CreateSponsorsListingPayload', alias='__typename'
    )


class CreateSponsorsTierPayload(BaseModel):
    """
    Autogenerated return type of CreateSponsorsTier.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorsTier: Optional[SponsorsTier] = Field(None, description='The new tier.')
    typename__: Optional[Literal['CreateSponsorsTierPayload']] = Field(
        'CreateSponsorsTierPayload', alias='__typename'
    )


class CreateSponsorshipPayload(BaseModel):
    """
    Autogenerated return type of CreateSponsorship.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorship: Optional[Sponsorship] = Field(
        None, description='The sponsorship that was started.'
    )
    typename__: Optional[Literal['CreateSponsorshipPayload']] = Field(
        'CreateSponsorshipPayload', alias='__typename'
    )


class CreateSponsorshipsPayload(BaseModel):
    """
    Autogenerated return type of CreateSponsorships.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorables: Optional[List[Sponsorable]] = Field(
        None, description='The users and organizations who received a sponsorship.'
    )
    typename__: Optional[Literal['CreateSponsorshipsPayload']] = Field(
        'CreateSponsorshipsPayload', alias='__typename'
    )


class CreateTeamDiscussionCommentPayload(BaseModel):
    """
    Autogenerated return type of CreateTeamDiscussionComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    teamDiscussionComment: Optional[TeamDiscussionComment] = Field(
        None, description='The new comment.'
    )
    typename__: Optional[Literal['CreateTeamDiscussionCommentPayload']] = Field(
        'CreateTeamDiscussionCommentPayload', alias='__typename'
    )


class CreateTeamDiscussionPayload(BaseModel):
    """
    Autogenerated return type of CreateTeamDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    teamDiscussion: Optional[TeamDiscussion] = Field(
        None, description='The new discussion.'
    )
    typename__: Optional[Literal['CreateTeamDiscussionPayload']] = Field(
        'CreateTeamDiscussionPayload', alias='__typename'
    )


class CreateUserListPayload(BaseModel):
    """
    Autogenerated return type of CreateUserList.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    list: Optional[UserList] = Field(None, description='The list that was just created')
    viewer: Optional[User_aliased] = Field(
        None, description='The user who created the list'
    )
    typename__: Optional[Literal['CreateUserListPayload']] = Field(
        'CreateUserListPayload', alias='__typename'
    )


class CreatedCommitContribution(Contribution):
    """
    Represents the contribution a user made by committing to a repository.
    """

    commitCount: Int = Field(
        ...,
        description='How many commits were made on this day to this repository by the user.',
    )
    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    repository: Repository_aliased = Field(
        ..., description='The repository the user made a commit in.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['CreatedCommitContribution']] = Field(
        'CreatedCommitContribution', alias='__typename'
    )


class CreatedCommitContributionConnection(BaseModel):
    """
    The connection type for CreatedCommitContribution.
    """

    edges: Optional[List[Optional[CreatedCommitContributionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CreatedCommitContribution]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ...,
        description='Identifies the total count of commits across days and repositories in the connection.',
    )
    typename__: Optional[Literal['CreatedCommitContributionConnection']] = Field(
        'CreatedCommitContributionConnection', alias='__typename'
    )


class CreatedCommitContributionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CreatedCommitContribution] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CreatedCommitContributionEdge']] = Field(
        'CreatedCommitContributionEdge', alias='__typename'
    )


class CreatedIssueContribution(Contribution):
    """
    Represents the contribution a user made on GitHub by opening an issue.
    """

    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    issue: Issue_aliased = Field(..., description='The issue that was opened.')
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['CreatedIssueContribution']] = Field(
        'CreatedIssueContribution', alias='__typename'
    )


class CreatedIssueContributionConnection(BaseModel):
    """
    The connection type for CreatedIssueContribution.
    """

    edges: Optional[List[Optional[CreatedIssueContributionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CreatedIssueContribution]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CreatedIssueContributionConnection']] = Field(
        'CreatedIssueContributionConnection', alias='__typename'
    )


class CreatedIssueContributionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CreatedIssueContribution_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CreatedIssueContributionEdge']] = Field(
        'CreatedIssueContributionEdge', alias='__typename'
    )


class CreatedPullRequestContribution(Contribution):
    """
    Represents the contribution a user made on GitHub by opening a pull request.
    """

    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    pullRequest: PullRequest_aliased = Field(
        ..., description='The pull request that was opened.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['CreatedPullRequestContribution']] = Field(
        'CreatedPullRequestContribution', alias='__typename'
    )


class CreatedPullRequestContributionConnection(BaseModel):
    """
    The connection type for CreatedPullRequestContribution.
    """

    edges: Optional[List[Optional[CreatedPullRequestContributionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CreatedPullRequestContribution]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CreatedPullRequestContributionConnection']] = Field(
        'CreatedPullRequestContributionConnection', alias='__typename'
    )


class CreatedPullRequestContributionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CreatedPullRequestContribution_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CreatedPullRequestContributionEdge']] = Field(
        'CreatedPullRequestContributionEdge', alias='__typename'
    )


class CreatedPullRequestReviewContribution(Contribution):
    """
    Represents the contribution a user made by leaving a review on a pull request.
    """

    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    pullRequest: PullRequest_aliased = Field(
        ..., description='The pull request the user reviewed.'
    )
    pullRequestReview: PullRequestReview_aliased = Field(
        ..., description='The review the user left on the pull request.'
    )
    repository: Repository_aliased = Field(
        ...,
        description='The repository containing the pull request that the user reviewed.',
    )
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['CreatedPullRequestReviewContribution']] = Field(
        'CreatedPullRequestReviewContribution', alias='__typename'
    )


class CreatedPullRequestReviewContributionConnection(BaseModel):
    """
    The connection type for CreatedPullRequestReviewContribution.
    """

    edges: Optional[List[Optional[CreatedPullRequestReviewContributionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CreatedPullRequestReviewContribution]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CreatedPullRequestReviewContributionConnection']] = (
        Field('CreatedPullRequestReviewContributionConnection', alias='__typename')
    )


class CreatedPullRequestReviewContributionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CreatedPullRequestReviewContribution] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CreatedPullRequestReviewContributionEdge']] = Field(
        'CreatedPullRequestReviewContributionEdge', alias='__typename'
    )


class CreatedRepositoryContribution(Contribution):
    """
    Represents the contribution a user made on GitHub by creating a repository.
    """

    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    repository: Repository_aliased = Field(
        ..., description='The repository that was created.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['CreatedRepositoryContribution']] = Field(
        'CreatedRepositoryContribution', alias='__typename'
    )


class CreatedRepositoryContributionConnection(BaseModel):
    """
    The connection type for CreatedRepositoryContribution.
    """

    edges: Optional[List[Optional[CreatedRepositoryContributionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[CreatedRepositoryContribution]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['CreatedRepositoryContributionConnection']] = Field(
        'CreatedRepositoryContributionConnection', alias='__typename'
    )


class CreatedRepositoryContributionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[CreatedRepositoryContribution_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['CreatedRepositoryContributionEdge']] = Field(
        'CreatedRepositoryContributionEdge', alias='__typename'
    )


class CrossReferencedEvent(Node, UniformResourceLocatable):
    """
    Represents a mention made by one issue or pull request to another.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the CrossReferencedEvent object'
    )
    isCrossRepository: Boolean = Field(
        ..., description='Reference originated in a different repository.'
    )
    referencedAt: DateTime = Field(
        ..., description='Identifies when the reference was made.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this pull request.')
    source: ReferencedSubject = Field(
        ..., description='Issue or pull request that made the reference.'
    )
    target: ReferencedSubject = Field(
        ..., description='Issue or pull request to which the reference was made.'
    )
    url: URI = Field(..., description='The HTTP URL for this pull request.')
    willCloseTarget: Boolean = Field(
        ...,
        description='Checks if the target will be closed when the source is merged.',
    )
    typename__: Optional[Literal['CrossReferencedEvent']] = Field(
        'CrossReferencedEvent', alias='__typename'
    )


class CvssSeverities(BaseModel):
    """
    The Common Vulnerability Scoring System
    """

    cvssV3: Optional[CVSS] = Field(
        None, description='The CVSS v3 severity associated with this advisory'
    )
    cvssV4: Optional[CVSS] = Field(
        None, description='The CVSS v4 severity associated with this advisory'
    )
    typename__: Optional[Literal['CvssSeverities']] = Field(
        'CvssSeverities', alias='__typename'
    )


class DeclineTopicSuggestionPayload(BaseModel):
    """
    Autogenerated return type of DeclineTopicSuggestion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    topic: Optional[Topic] = Field(None, description='The declined topic.')
    typename__: Optional[Literal['DeclineTopicSuggestionPayload']] = Field(
        'DeclineTopicSuggestionPayload', alias='__typename'
    )


class DeleteBranchProtectionRulePayload(BaseModel):
    """
    Autogenerated return type of DeleteBranchProtectionRule.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteBranchProtectionRulePayload']] = Field(
        'DeleteBranchProtectionRulePayload', alias='__typename'
    )


class DeleteDeploymentPayload(BaseModel):
    """
    Autogenerated return type of DeleteDeployment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteDeploymentPayload']] = Field(
        'DeleteDeploymentPayload', alias='__typename'
    )


class DeleteDiscussionCommentPayload(BaseModel):
    """
    Autogenerated return type of DeleteDiscussionComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comment: Optional[DiscussionComment] = Field(
        None, description='The discussion comment that was just deleted.'
    )
    typename__: Optional[Literal['DeleteDiscussionCommentPayload']] = Field(
        'DeleteDiscussionCommentPayload', alias='__typename'
    )


class DeleteDiscussionPayload(BaseModel):
    """
    Autogenerated return type of DeleteDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that was just deleted.'
    )
    typename__: Optional[Literal['DeleteDiscussionPayload']] = Field(
        'DeleteDiscussionPayload', alias='__typename'
    )


class DeleteEnvironmentPayload(BaseModel):
    """
    Autogenerated return type of DeleteEnvironment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteEnvironmentPayload']] = Field(
        'DeleteEnvironmentPayload', alias='__typename'
    )


class DeleteIpAllowListEntryPayload(BaseModel):
    """
    Autogenerated return type of DeleteIpAllowListEntry.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ipAllowListEntry: Optional[IpAllowListEntry] = Field(
        None, description='The IP allow list entry that was deleted.'
    )
    typename__: Optional[Literal['DeleteIpAllowListEntryPayload']] = Field(
        'DeleteIpAllowListEntryPayload', alias='__typename'
    )


class DeleteIssueCommentPayload(BaseModel):
    """
    Autogenerated return type of DeleteIssueComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteIssueCommentPayload']] = Field(
        'DeleteIssueCommentPayload', alias='__typename'
    )


class DeleteIssuePayload(BaseModel):
    """
    Autogenerated return type of DeleteIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository the issue belonged to'
    )
    typename__: Optional[Literal['DeleteIssuePayload']] = Field(
        'DeleteIssuePayload', alias='__typename'
    )


class DeleteIssueTypePayload(BaseModel):
    """
    Autogenerated return type of DeleteIssueType.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deletedIssueTypeId: Optional[ID_aliased] = Field(
        None, description='The ID of the deleted issue type'
    )
    typename__: Optional[Literal['DeleteIssueTypePayload']] = Field(
        'DeleteIssueTypePayload', alias='__typename'
    )


class DeleteLabelPayload(BaseModel):
    """
    Autogenerated return type of DeleteLabel.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteLabelPayload']] = Field(
        'DeleteLabelPayload', alias='__typename'
    )


class DeleteLinkedBranchPayload(BaseModel):
    """
    Autogenerated return type of DeleteLinkedBranch.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The issue the linked branch was unlinked from.'
    )
    typename__: Optional[Literal['DeleteLinkedBranchPayload']] = Field(
        'DeleteLinkedBranchPayload', alias='__typename'
    )


class DeletePackageVersionPayload(BaseModel):
    """
    Autogenerated return type of DeletePackageVersion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    success: Optional[Boolean] = Field(
        None, description='Whether or not the operation succeeded.'
    )
    typename__: Optional[Literal['DeletePackageVersionPayload']] = Field(
        'DeletePackageVersionPayload', alias='__typename'
    )


class DeleteProjectCardPayload(BaseModel):
    """
    Autogenerated return type of DeleteProjectCard.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    column: Optional[ProjectColumn] = Field(
        None, description='The column the deleted card was in.'
    )
    deletedCardId: Optional[ID_aliased] = Field(
        None, description='The deleted card ID.'
    )
    typename__: Optional[Literal['DeleteProjectCardPayload']] = Field(
        'DeleteProjectCardPayload', alias='__typename'
    )


class DeleteProjectColumnPayload(BaseModel):
    """
    Autogenerated return type of DeleteProjectColumn.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deletedColumnId: Optional[ID_aliased] = Field(
        None, description='The deleted column ID.'
    )
    project: Optional[Project] = Field(
        None, description='The project the deleted column was in.'
    )
    typename__: Optional[Literal['DeleteProjectColumnPayload']] = Field(
        'DeleteProjectColumnPayload', alias='__typename'
    )


class DeleteProjectPayload(BaseModel):
    """
    Autogenerated return type of DeleteProject.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    owner: Optional[ProjectOwner] = Field(
        None, description='The repository or organization the project was removed from.'
    )
    typename__: Optional[Literal['DeleteProjectPayload']] = Field(
        'DeleteProjectPayload', alias='__typename'
    )


class DeleteProjectV2FieldPayload(BaseModel):
    """
    Autogenerated return type of DeleteProjectV2Field.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2Field: Optional[ProjectV2FieldConfiguration] = Field(
        None, description='The deleted field.'
    )
    typename__: Optional[Literal['DeleteProjectV2FieldPayload']] = Field(
        'DeleteProjectV2FieldPayload', alias='__typename'
    )


class DeleteProjectV2ItemPayload(BaseModel):
    """
    Autogenerated return type of DeleteProjectV2Item.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deletedItemId: Optional[ID_aliased] = Field(
        None, description='The ID of the deleted item.'
    )
    typename__: Optional[Literal['DeleteProjectV2ItemPayload']] = Field(
        'DeleteProjectV2ItemPayload', alias='__typename'
    )


class DeleteProjectV2Payload(BaseModel):
    """
    Autogenerated return type of DeleteProjectV2.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='The deleted Project.'
    )
    typename__: Optional[Literal['DeleteProjectV2Payload']] = Field(
        'DeleteProjectV2Payload', alias='__typename'
    )


class DeleteProjectV2StatusUpdatePayload(BaseModel):
    """
    Autogenerated return type of DeleteProjectV2StatusUpdate.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deletedStatusUpdateId: Optional[ID_aliased] = Field(
        None, description='The ID of the deleted status update.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='The project the deleted status update was in.'
    )
    typename__: Optional[Literal['DeleteProjectV2StatusUpdatePayload']] = Field(
        'DeleteProjectV2StatusUpdatePayload', alias='__typename'
    )


class DeleteProjectV2WorkflowPayload(BaseModel):
    """
    Autogenerated return type of DeleteProjectV2Workflow.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deletedWorkflowId: Optional[ID_aliased] = Field(
        None, description='The ID of the deleted workflow.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='The project the deleted workflow was in.'
    )
    typename__: Optional[Literal['DeleteProjectV2WorkflowPayload']] = Field(
        'DeleteProjectV2WorkflowPayload', alias='__typename'
    )


class DeletePullRequestReviewCommentPayload(BaseModel):
    """
    Autogenerated return type of DeletePullRequestReviewComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The pull request review the deleted comment belonged to.'
    )
    pullRequestReviewComment: Optional[PullRequestReviewComment_aliased] = Field(
        None, description='The deleted pull request review comment.'
    )
    typename__: Optional[Literal['DeletePullRequestReviewCommentPayload']] = Field(
        'DeletePullRequestReviewCommentPayload', alias='__typename'
    )


class DeletePullRequestReviewPayload(BaseModel):
    """
    Autogenerated return type of DeletePullRequestReview.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The deleted pull request review.'
    )
    typename__: Optional[Literal['DeletePullRequestReviewPayload']] = Field(
        'DeletePullRequestReviewPayload', alias='__typename'
    )


class DeleteRefPayload(BaseModel):
    """
    Autogenerated return type of DeleteRef.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteRefPayload']] = Field(
        'DeleteRefPayload', alias='__typename'
    )


class DeleteRepositoryRulesetPayload(BaseModel):
    """
    Autogenerated return type of DeleteRepositoryRuleset.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteRepositoryRulesetPayload']] = Field(
        'DeleteRepositoryRulesetPayload', alias='__typename'
    )


class DeleteTeamDiscussionCommentPayload(BaseModel):
    """
    Autogenerated return type of DeleteTeamDiscussionComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteTeamDiscussionCommentPayload']] = Field(
        'DeleteTeamDiscussionCommentPayload', alias='__typename'
    )


class DeleteTeamDiscussionPayload(BaseModel):
    """
    Autogenerated return type of DeleteTeamDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteTeamDiscussionPayload']] = Field(
        'DeleteTeamDiscussionPayload', alias='__typename'
    )


class DeleteUserListPayload(BaseModel):
    """
    Autogenerated return type of DeleteUserList.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The owner of the list that will be deleted'
    )
    typename__: Optional[Literal['DeleteUserListPayload']] = Field(
        'DeleteUserListPayload', alias='__typename'
    )


class DeleteVerifiableDomainPayload(BaseModel):
    """
    Autogenerated return type of DeleteVerifiableDomain.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    owner: Optional[VerifiableDomainOwner] = Field(
        None, description='The owning account from which the domain was deleted.'
    )
    typename__: Optional[Literal['DeleteVerifiableDomainPayload']] = Field(
        'DeleteVerifiableDomainPayload', alias='__typename'
    )


class DemilestonedEvent(Node):
    """
    Represents a 'demilestoned' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the DemilestonedEvent object'
    )
    milestoneTitle: String = Field(
        ...,
        description="Identifies the milestone title associated with the 'demilestoned' event.",
    )
    subject: MilestoneItem = Field(..., description='Object referenced by event.')
    typename__: Optional[Literal['DemilestonedEvent']] = Field(
        'DemilestonedEvent', alias='__typename'
    )


class DependabotUpdate(RepositoryNode):
    """
    A Dependabot Update for a dependency in a repository
    """

    error: Optional[DependabotUpdateError] = Field(
        None, description='The error from a dependency update'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The associated pull request'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    typename__: Optional[Literal['DependabotUpdate']] = Field(
        'DependabotUpdate', alias='__typename'
    )


class DependabotUpdateError(BaseModel):
    """
    An error produced from a Dependabot Update
    """

    body: String = Field(..., description='The body of the error')
    errorType: String = Field(..., description='The error code')
    title: String = Field(..., description='The title of the error')
    typename__: Optional[Literal['DependabotUpdateError']] = Field(
        'DependabotUpdateError', alias='__typename'
    )


class DependencyGraphDependency(BaseModel):
    """
    A dependency manifest entry
    """

    hasDependencies: Boolean = Field(
        ..., description='Does the dependency itself have dependencies?'
    )
    packageLabel: String = Field(
        ...,
        description='The original name of the package, as it appears in the manifest.',
    )
    packageManager: Optional[String] = Field(
        None, description='The dependency package manager'
    )
    packageName: String = Field(
        ...,
        description='The name of the package in the canonical form used by the package manager.',
    )
    packageUrl: Optional[URI] = Field(
        None, description='Public preview: The dependency package URL'
    )
    relationship: String = Field(
        ...,
        description='Public preview: The relationship of the dependency. Can be direct, transitive, or unknown',
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository containing the package'
    )
    requirements: String = Field(..., description='The dependency version requirements')
    typename__: Optional[Literal['DependencyGraphDependency']] = Field(
        'DependencyGraphDependency', alias='__typename'
    )


class DependencyGraphDependencyConnection(BaseModel):
    """
    The connection type for DependencyGraphDependency.
    """

    edges: Optional[List[Optional[DependencyGraphDependencyEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DependencyGraphDependency]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DependencyGraphDependencyConnection']] = Field(
        'DependencyGraphDependencyConnection', alias='__typename'
    )


class DependencyGraphDependencyEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DependencyGraphDependency] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DependencyGraphDependencyEdge']] = Field(
        'DependencyGraphDependencyEdge', alias='__typename'
    )


class DependencyGraphManifest(Node):
    """
    Dependency manifest for a repository
    """

    blobPath: String = Field(..., description='Path to view the manifest file blob')
    dependencies: Optional[DependencyGraphDependencyConnection] = Field(
        None, description='A list of manifest dependencies'
    )
    dependenciesCount: Optional[Int] = Field(
        None, description='The number of dependencies listed in the manifest'
    )
    exceedsMaxSize: Boolean = Field(
        ..., description='Is the manifest too big to parse?'
    )
    filename: String = Field(..., description='Fully qualified manifest filename')
    id: ID_aliased = Field(
        ..., description='The Node ID of the DependencyGraphManifest object'
    )
    parseable: Boolean = Field(..., description='Were we able to parse the manifest?')
    repository: Repository_aliased = Field(
        ..., description='The repository containing the manifest'
    )
    typename__: Optional[Literal['DependencyGraphManifest']] = Field(
        'DependencyGraphManifest', alias='__typename'
    )


class DependencyGraphManifestConnection(BaseModel):
    """
    The connection type for DependencyGraphManifest.
    """

    edges: Optional[List[Optional[DependencyGraphManifestEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DependencyGraphManifest]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DependencyGraphManifestConnection']] = Field(
        'DependencyGraphManifestConnection', alias='__typename'
    )


class DependencyGraphManifestEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DependencyGraphManifest] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DependencyGraphManifestEdge']] = Field(
        'DependencyGraphManifestEdge', alias='__typename'
    )


class DeployKey(Node):
    """
    A repository deploy key.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enabled: Boolean = Field(
        ...,
        description='Whether or not the deploy key is enabled by policy at the Enterprise or Organization level.',
    )
    id: ID_aliased = Field(..., description='The Node ID of the DeployKey object')
    key: String = Field(..., description='The deploy key.')
    readOnly: Boolean = Field(
        ..., description='Whether or not the deploy key is read only.'
    )
    title: String = Field(..., description='The deploy key title.')
    verified: Boolean = Field(
        ..., description='Whether or not the deploy key has been verified.'
    )
    typename__: Optional[Literal['DeployKey']] = Field('DeployKey', alias='__typename')


class DeployKeyConnection(BaseModel):
    """
    The connection type for DeployKey.
    """

    edges: Optional[List[Optional[DeployKeyEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DeployKey]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DeployKeyConnection']] = Field(
        'DeployKeyConnection', alias='__typename'
    )


class DeployKeyEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DeployKey] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DeployKeyEdge']] = Field(
        'DeployKeyEdge', alias='__typename'
    )


class DeployedEvent(Node):
    """
    Represents a 'deployed' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    deployment: Deployment = Field(
        ..., description="The deployment associated with the 'deployed' event."
    )
    id: ID_aliased = Field(..., description='The Node ID of the DeployedEvent object')
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    ref: Optional[Ref] = Field(
        None, description="The ref associated with the 'deployed' event."
    )
    typename__: Optional[Literal['DeployedEvent']] = Field(
        'DeployedEvent', alias='__typename'
    )


class Deployment(Node):
    """
    Represents triggered deployment instance.
    """

    commit: Optional[Commit_aliased] = Field(
        None, description='Identifies the commit sha of the deployment.'
    )
    commitOid: String = Field(
        ...,
        description='Identifies the oid of the deployment commit, even if the commit has been deleted.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Actor = Field(
        ..., description='Identifies the actor who triggered the deployment.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: Optional[String] = Field(
        None, description='The deployment description.'
    )
    environment: Optional[String] = Field(
        None, description='The latest environment to which this deployment was made.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Deployment object')
    latestEnvironment: Optional[String] = Field(
        None, description='The latest environment to which this deployment was made.'
    )
    latestStatus: Optional[DeploymentStatus] = Field(
        None, description='The latest status of this deployment.'
    )
    originalEnvironment: Optional[String] = Field(
        None, description='The original environment to which this deployment was made.'
    )
    payload: Optional[String] = Field(
        None, description='Extra information that a deployment system might need.'
    )
    ref: Optional[Ref] = Field(
        None,
        description='Identifies the Ref of the deployment, if the deployment was created by ref.',
    )
    repository: Repository_aliased = Field(
        ..., description='Identifies the repository associated with the deployment.'
    )
    state: Optional[DeploymentState] = Field(
        None, description='The current state of the deployment.'
    )
    statuses: Optional[DeploymentStatusConnection] = Field(
        None, description='A list of statuses associated with the deployment.'
    )
    task: Optional[String] = Field(None, description='The deployment task.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['Deployment']] = Field(
        'Deployment', alias='__typename'
    )


class DeploymentConnection(BaseModel):
    """
    The connection type for Deployment.
    """

    edges: Optional[List[Optional[DeploymentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Deployment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DeploymentConnection']] = Field(
        'DeploymentConnection', alias='__typename'
    )


class DeploymentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Deployment] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DeploymentEdge']] = Field(
        'DeploymentEdge', alias='__typename'
    )


class DeploymentEnvironmentChangedEvent(Node):
    """
    Represents a 'deployment_environment_changed' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    deploymentStatus: DeploymentStatus = Field(
        ...,
        description='The deployment status that updated the deployment environment.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the DeploymentEnvironmentChangedEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['DeploymentEnvironmentChangedEvent']] = Field(
        'DeploymentEnvironmentChangedEvent', alias='__typename'
    )


class DeploymentProtectionRule(BaseModel):
    """
    A protection rule.
    """

    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    preventSelfReview: Optional[Boolean] = Field(
        None,
        description='Whether deployments to this environment can be approved by the user who created the deployment.',
    )
    reviewers: DeploymentReviewerConnection = Field(
        ..., description='The teams or users that can review the deployment'
    )
    timeout: Int = Field(
        ..., description='The timeout in minutes for this protection rule.'
    )
    type: DeploymentProtectionRuleType = Field(
        ..., description='The type of protection rule.'
    )
    typename__: Optional[Literal['DeploymentProtectionRule']] = Field(
        'DeploymentProtectionRule', alias='__typename'
    )


class DeploymentProtectionRuleConnection(BaseModel):
    """
    The connection type for DeploymentProtectionRule.
    """

    edges: Optional[List[Optional[DeploymentProtectionRuleEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DeploymentProtectionRule]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DeploymentProtectionRuleConnection']] = Field(
        'DeploymentProtectionRuleConnection', alias='__typename'
    )


class DeploymentProtectionRuleEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DeploymentProtectionRule] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DeploymentProtectionRuleEdge']] = Field(
        'DeploymentProtectionRuleEdge', alias='__typename'
    )


class DeploymentRequest(BaseModel):
    """
    A request to deploy a workflow run to an environment.
    """

    currentUserCanApprove: Boolean = Field(
        ..., description='Whether or not the current user can approve the deployment'
    )
    environment: Environment = Field(
        ..., description='The target environment of the deployment'
    )
    reviewers: DeploymentReviewerConnection = Field(
        ..., description='The teams or users that can review the deployment'
    )
    waitTimer: Int = Field(
        ..., description='The wait timer in minutes configured in the environment'
    )
    waitTimerStartedAt: Optional[DateTime] = Field(
        None, description='The wait timer in minutes configured in the environment'
    )
    typename__: Optional[Literal['DeploymentRequest']] = Field(
        'DeploymentRequest', alias='__typename'
    )


class DeploymentRequestConnection(BaseModel):
    """
    The connection type for DeploymentRequest.
    """

    edges: Optional[List[Optional[DeploymentRequestEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DeploymentRequest]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DeploymentRequestConnection']] = Field(
        'DeploymentRequestConnection', alias='__typename'
    )


class DeploymentRequestEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DeploymentRequest] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DeploymentRequestEdge']] = Field(
        'DeploymentRequestEdge', alias='__typename'
    )


class DeploymentReview(Node):
    """
    A deployment review.
    """

    comment: String = Field(..., description='The comment the user left.')
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    environments: EnvironmentConnection = Field(
        ..., description='The environments approved or rejected'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the DeploymentReview object'
    )
    state: DeploymentReviewState = Field(..., description='The decision of the user.')
    user: User_aliased = Field(
        ..., description='The user that reviewed the deployment.'
    )
    typename__: Optional[Literal['DeploymentReview']] = Field(
        'DeploymentReview', alias='__typename'
    )


class DeploymentReviewConnection(BaseModel):
    """
    The connection type for DeploymentReview.
    """

    edges: Optional[List[Optional[DeploymentReviewEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DeploymentReview]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DeploymentReviewConnection']] = Field(
        'DeploymentReviewConnection', alias='__typename'
    )


class DeploymentReviewEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DeploymentReview] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DeploymentReviewEdge']] = Field(
        'DeploymentReviewEdge', alias='__typename'
    )


class DeploymentReviewerConnection(BaseModel):
    """
    The connection type for DeploymentReviewer.
    """

    edges: Optional[List[Optional[DeploymentReviewerEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DeploymentReviewer]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DeploymentReviewerConnection']] = Field(
        'DeploymentReviewerConnection', alias='__typename'
    )


class DeploymentReviewerEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DeploymentReviewer] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DeploymentReviewerEdge']] = Field(
        'DeploymentReviewerEdge', alias='__typename'
    )


class DeploymentStatus(Node):
    """
    Describes the status of a given deployment attempt.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Actor = Field(
        ..., description='Identifies the actor who triggered the deployment.'
    )
    deployment: Deployment = Field(
        ..., description='Identifies the deployment associated with status.'
    )
    description: Optional[String] = Field(
        None, description='Identifies the description of the deployment.'
    )
    environment: Optional[String] = Field(
        None,
        description='Identifies the environment of the deployment at the time of this deployment status',
    )
    environmentUrl: Optional[URI] = Field(
        None, description='Identifies the environment URL of the deployment.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the DeploymentStatus object'
    )
    logUrl: Optional[URI] = Field(
        None, description='Identifies the log URL of the deployment.'
    )
    state: DeploymentStatusState = Field(
        ..., description='Identifies the current state of the deployment.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['DeploymentStatus']] = Field(
        'DeploymentStatus', alias='__typename'
    )


class DeploymentStatusConnection(BaseModel):
    """
    The connection type for DeploymentStatus.
    """

    edges: Optional[List[Optional[DeploymentStatusEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DeploymentStatus]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DeploymentStatusConnection']] = Field(
        'DeploymentStatusConnection', alias='__typename'
    )


class DeploymentStatusEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DeploymentStatus] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DeploymentStatusEdge']] = Field(
        'DeploymentStatusEdge', alias='__typename'
    )


class DequeuePullRequestPayload(BaseModel):
    """
    Autogenerated return type of DequeuePullRequest.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    mergeQueueEntry: Optional[MergeQueueEntry] = Field(
        None, description='The merge queue entry of the dequeued pull request.'
    )
    typename__: Optional[Literal['DequeuePullRequestPayload']] = Field(
        'DequeuePullRequestPayload', alias='__typename'
    )


class DisablePullRequestAutoMergePayload(BaseModel):
    """
    Autogenerated return type of DisablePullRequestAutoMerge.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request auto merge was disabled on.'
    )
    typename__: Optional[Literal['DisablePullRequestAutoMergePayload']] = Field(
        'DisablePullRequestAutoMergePayload', alias='__typename'
    )


class DisconnectedEvent(Node):
    """
    Represents a 'disconnected' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the DisconnectedEvent object'
    )
    isCrossRepository: Boolean = Field(
        ..., description='Reference originated in a different repository.'
    )
    source: ReferencedSubject = Field(
        ..., description='Issue or pull request from which the issue was disconnected.'
    )
    subject: ReferencedSubject = Field(
        ..., description='Issue or pull request which was disconnected.'
    )
    typename__: Optional[Literal['DisconnectedEvent']] = Field(
        'DisconnectedEvent', alias='__typename'
    )


class Discussion(
    Closable,
    Comment,
    Deletable,
    Labelable,
    Lockable,
    Node,
    Reactable,
    RepositoryNode,
    Subscribable,
    Updatable,
    Votable,
):
    """
    A discussion in a repository.
    """

    activeLockReason: Optional[LockReason] = Field(
        None, description='Reason that the conversation was locked.'
    )
    answer: Optional[DiscussionComment] = Field(
        None, description="The comment chosen as this discussion's answer, if any."
    )
    answerChosenAt: Optional[DateTime] = Field(
        None,
        description="The time when a user chose this discussion's answer, if answered.",
    )
    answerChosenBy: Optional[Actor] = Field(
        None, description="The user who chose this discussion's answer, if answered."
    )
    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    body: String = Field(..., description='The main text of the discussion post.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    category: DiscussionCategory = Field(
        ..., description='The category for this discussion.'
    )
    closed: Boolean = Field(
        ...,
        description='Indicates if the object is closed (definition of closed may depend on type)',
    )
    closedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was closed.'
    )
    comments: DiscussionCommentConnection = Field(
        ..., description='The replies to the discussion.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Discussion object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isAnswered: Optional[Boolean] = Field(
        None, description='Only return answered/unanswered discussions'
    )
    labels: Optional[LabelConnection] = Field(
        None, description='A list of labels associated with the object.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    locked: Boolean = Field(..., description='`true` if the object is locked')
    number: Int = Field(
        ..., description='The number identifying this discussion within the repository.'
    )
    poll: Optional[DiscussionPoll] = Field(
        None, description='The poll associated with this discussion, if one exists.'
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    resourcePath: URI = Field(..., description='The path for this discussion.')
    stateReason: Optional[DiscussionStateReason] = Field(
        None, description="Identifies the reason for the discussion's state."
    )
    title: String = Field(..., description='The title of this discussion.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    upvoteCount: Int = Field(
        ..., description='Number of upvotes that this subject has received.'
    )
    url: URI = Field(..., description='The URL for this discussion.')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanClose: Boolean = Field(
        ..., description='Indicates if the object can be closed by the viewer.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanLabel: Boolean = Field(
        ..., description='Indicates if the viewer can edit labels for this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanReopen: Boolean = Field(
        ..., description='Indicates if the object can be reopened by the viewer.'
    )
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCanUpvote: Boolean = Field(
        ...,
        description='Whether or not the current user can add or remove an upvote on this subject.',
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    viewerHasUpvoted: Boolean = Field(
        ...,
        description='Whether or not the current user has already upvoted this subject.',
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    typename__: Optional[Literal['Discussion']] = Field(
        'Discussion', alias='__typename'
    )


class DiscussionCategory(Node, RepositoryNode):
    """
    A category for discussions in a repository.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    description: Optional[String] = Field(
        None, description='A description of this category.'
    )
    emoji: String = Field(..., description='An emoji representing this category.')
    emojiHTML: HTML = Field(..., description="This category's emoji rendered as HTML.")
    id: ID_aliased = Field(
        ..., description='The Node ID of the DiscussionCategory object'
    )
    isAnswerable: Boolean = Field(
        ...,
        description='Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.',
    )
    name: String = Field(..., description='The name of this category.')
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    slug: String = Field(..., description='The slug of this category.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['DiscussionCategory']] = Field(
        'DiscussionCategory', alias='__typename'
    )


class DiscussionCategoryConnection(BaseModel):
    """
    The connection type for DiscussionCategory.
    """

    edges: Optional[List[Optional[DiscussionCategoryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DiscussionCategory]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DiscussionCategoryConnection']] = Field(
        'DiscussionCategoryConnection', alias='__typename'
    )


class DiscussionCategoryEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DiscussionCategory] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DiscussionCategoryEdge']] = Field(
        'DiscussionCategoryEdge', alias='__typename'
    )


class DiscussionComment(
    Comment,
    Deletable,
    Minimizable,
    Node,
    Reactable,
    Updatable,
    UpdatableComment,
    Votable,
):
    """
    A comment on a discussion.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    body: String = Field(..., description='The body as Markdown.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    deletedAt: Optional[DateTime] = Field(
        None, description='The time when this replied-to comment was deleted'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion this comment was created in'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the DiscussionComment object'
    )
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isAnswer: Boolean = Field(
        ..., description='Has this comment been chosen as the answer of its discussion?'
    )
    isMinimized: Boolean = Field(
        ..., description='Returns whether or not a comment has been minimized.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    minimizedReason: Optional[String] = Field(
        None,
        description='Returns why the comment was minimized. One of `abuse`, `off-topic`,\n`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\nformatting of these values differs from the inputs to the `MinimizeComment` mutation.',
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    replies: DiscussionCommentConnection = Field(
        ..., description='The threaded replies to this comment.'
    )
    replyTo: Optional[DiscussionComment] = Field(
        None, description='The discussion comment this comment is a reply to'
    )
    resourcePath: URI = Field(..., description='The path for this discussion comment.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    upvoteCount: Int = Field(
        ..., description='Number of upvotes that this subject has received.'
    )
    url: URI = Field(..., description='The URL for this discussion comment.')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanMarkAsAnswer: Boolean = Field(
        ..., description='Can the current user mark this comment as an answer?'
    )
    viewerCanMinimize: Boolean = Field(
        ..., description='Check if the current viewer can minimize this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanUnmarkAsAnswer: Boolean = Field(
        ..., description='Can the current user unmark this comment as an answer?'
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCanUpvote: Boolean = Field(
        ...,
        description='Whether or not the current user can add or remove an upvote on this subject.',
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    viewerHasUpvoted: Boolean = Field(
        ...,
        description='Whether or not the current user has already upvoted this subject.',
    )
    typename__: Optional[Literal['DiscussionComment']] = Field(
        'DiscussionComment', alias='__typename'
    )


class DiscussionCommentConnection(BaseModel):
    """
    The connection type for DiscussionComment.
    """

    edges: Optional[List[Optional[DiscussionCommentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DiscussionComment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DiscussionCommentConnection']] = Field(
        'DiscussionCommentConnection', alias='__typename'
    )


class DiscussionCommentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DiscussionComment] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DiscussionCommentEdge']] = Field(
        'DiscussionCommentEdge', alias='__typename'
    )


class DiscussionConnection(BaseModel):
    """
    The connection type for Discussion.
    """

    edges: Optional[List[Optional[DiscussionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Discussion]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DiscussionConnection']] = Field(
        'DiscussionConnection', alias='__typename'
    )


class DiscussionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Discussion_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DiscussionEdge']] = Field(
        'DiscussionEdge', alias='__typename'
    )


class DiscussionPoll(Node):
    """
    A poll for a discussion.
    """

    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that this poll belongs to.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the DiscussionPoll object')
    options: Optional[DiscussionPollOptionConnection] = Field(
        None, description='The options for this poll.'
    )
    question: String = Field(
        ..., description='The question that is being asked by this poll.'
    )
    totalVoteCount: Int = Field(
        ..., description='The total number of votes that have been cast for this poll.'
    )
    viewerCanVote: Boolean = Field(
        ..., description='Indicates if the viewer has permission to vote in this poll.'
    )
    viewerHasVoted: Boolean = Field(
        ...,
        description='Indicates if the viewer has voted for any option in this poll.',
    )
    typename__: Optional[Literal['DiscussionPoll']] = Field(
        'DiscussionPoll', alias='__typename'
    )


class DiscussionPollOption(Node):
    """
    An option for a discussion poll.
    """

    id: ID_aliased = Field(
        ..., description='The Node ID of the DiscussionPollOption object'
    )
    option: String = Field(..., description='The text for this option.')
    poll: Optional[DiscussionPoll] = Field(
        None, description='The discussion poll that this option belongs to.'
    )
    totalVoteCount: Int = Field(
        ...,
        description='The total number of votes that have been cast for this option.',
    )
    viewerHasVoted: Boolean = Field(
        ...,
        description='Indicates if the viewer has voted for this option in the poll.',
    )
    typename__: Optional[Literal['DiscussionPollOption']] = Field(
        'DiscussionPollOption', alias='__typename'
    )


class DiscussionPollOptionConnection(BaseModel):
    """
    The connection type for DiscussionPollOption.
    """

    edges: Optional[List[Optional[DiscussionPollOptionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[DiscussionPollOption]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['DiscussionPollOptionConnection']] = Field(
        'DiscussionPollOptionConnection', alias='__typename'
    )


class DiscussionPollOptionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[DiscussionPollOption] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['DiscussionPollOptionEdge']] = Field(
        'DiscussionPollOptionEdge', alias='__typename'
    )


class DismissPullRequestReviewPayload(BaseModel):
    """
    Autogenerated return type of DismissPullRequestReview.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The dismissed pull request review.'
    )
    typename__: Optional[Literal['DismissPullRequestReviewPayload']] = Field(
        'DismissPullRequestReviewPayload', alias='__typename'
    )


class DismissRepositoryVulnerabilityAlertPayload(BaseModel):
    """
    Autogenerated return type of DismissRepositoryVulnerabilityAlert.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryVulnerabilityAlert: Optional[RepositoryVulnerabilityAlert] = Field(
        None, description='The Dependabot alert that was dismissed'
    )
    typename__: Optional[Literal['DismissRepositoryVulnerabilityAlertPayload']] = Field(
        'DismissRepositoryVulnerabilityAlertPayload', alias='__typename'
    )


class DraftIssue(Node):
    """
    A draft issue within a project.
    """

    assignees: UserConnection = Field(
        ..., description='A list of users to assigned to this draft issue.'
    )
    body: String = Field(..., description='The body of the draft issue.')
    bodyHTML: HTML = Field(
        ..., description='The body of the draft issue rendered to HTML.'
    )
    bodyText: String = Field(
        ..., description='The body of the draft issue rendered to text.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created this draft issue.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the DraftIssue object')
    projectV2Items: ProjectV2ItemConnection = Field(
        ...,
        description='List of items linked with the draft issue (currently draft issue can be linked to only one item).',
    )
    projectsV2: ProjectV2Connection = Field(
        ...,
        description='Projects that link to this draft issue (currently draft issue can be linked to only one project).',
    )
    title: String = Field(..., description='The title of the draft issue')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['DraftIssue']] = Field(
        'DraftIssue', alias='__typename'
    )


class EPSS(BaseModel):
    """
    The Exploit Prediction Scoring System
    """

    percentage: Optional[Float] = Field(
        None,
        description='The EPSS percentage represents the likelihood of a CVE being exploited.',
    )
    percentile: Optional[Float] = Field(
        None,
        description="The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.",
    )
    typename__: Optional[Literal['EPSS']] = Field('EPSS', alias='__typename')


class EnablePullRequestAutoMergePayload(BaseModel):
    """
    Autogenerated return type of EnablePullRequestAutoMerge.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request auto-merge was enabled on.'
    )
    typename__: Optional[Literal['EnablePullRequestAutoMergePayload']] = Field(
        'EnablePullRequestAutoMergePayload', alias='__typename'
    )


class EnqueuePullRequestPayload(BaseModel):
    """
    Autogenerated return type of EnqueuePullRequest.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    mergeQueueEntry: Optional[MergeQueueEntry] = Field(
        None, description='The merge queue entry for the enqueued pull request.'
    )
    typename__: Optional[Literal['EnqueuePullRequestPayload']] = Field(
        'EnqueuePullRequestPayload', alias='__typename'
    )


class Enterprise(Node):
    """
    An account to manage multiple organizations with consolidated policy and billing.
    """

    announcementBanner: Optional[AnnouncementBanner] = Field(
        None,
        description='The announcement banner set on this enterprise, if any. Only visible to members of the enterprise.',
    )
    avatarUrl: URI = Field(
        ..., description="A URL pointing to the enterprise's public avatar."
    )
    billingEmail: Optional[String] = Field(
        None, description="The enterprise's billing email."
    )
    billingInfo: Optional[EnterpriseBillingInfo] = Field(
        None,
        description='Enterprise billing information\xa0visible to enterprise billing managers.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: Optional[String] = Field(
        None, description='The description of the enterprise.'
    )
    descriptionHTML: HTML = Field(
        ..., description='The description of the enterprise as HTML.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Enterprise object')
    location: Optional[String] = Field(
        None, description='The location of the enterprise.'
    )
    members: EnterpriseMemberConnection = Field(
        ..., description='A list of users who are members of this enterprise.'
    )
    name: String = Field(..., description='The name of the enterprise.')
    organizations: OrganizationConnection = Field(
        ..., description='A list of organizations that belong to this enterprise.'
    )
    ownerInfo: Optional[EnterpriseOwnerInfo] = Field(
        None,
        description="Enterprise information visible to enterprise owners or enterprise owners'\npersonal access tokens (classic) with read:enterprise or admin:enterprise scope.",
    )
    readme: Optional[String] = Field(
        None, description='The raw content of the enterprise README.'
    )
    readmeHTML: HTML = Field(
        ..., description='The content of the enterprise README as HTML.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this enterprise.')
    ruleset: Optional[RepositoryRuleset] = Field(
        None, description='Returns a single ruleset from the current enterprise by ID.'
    )
    rulesets: Optional[RepositoryRulesetConnection] = Field(
        None, description='A list of rulesets for this enterprise.'
    )
    slug: String = Field(
        ..., description='The URL-friendly identifier for the enterprise.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this enterprise.')
    userNamespaceRepositories: UserNamespaceRepositoryConnection = Field(
        ...,
        description='A list of repositories that belong to users. Only available for enterprises with Enterprise Managed Users.',
    )
    viewerIsAdmin: Boolean = Field(
        ..., description='Is the current viewer an admin of this enterprise?'
    )
    websiteUrl: Optional[URI] = Field(
        None, description='The URL of the enterprise website.'
    )
    typename__: Optional[Literal['Enterprise']] = Field(
        'Enterprise', alias='__typename'
    )


class EnterpriseAdministratorConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[EnterpriseAdministratorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseAdministratorConnection']] = Field(
        'EnterpriseAdministratorConnection', alias='__typename'
    )


class EnterpriseAdministratorEdge(BaseModel):
    """
    A User who is an administrator of an enterprise.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[User_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    role: EnterpriseAdministratorRole = Field(
        ..., description='The role of the administrator.'
    )
    typename__: Optional[Literal['EnterpriseAdministratorEdge']] = Field(
        'EnterpriseAdministratorEdge', alias='__typename'
    )


class EnterpriseAdministratorInvitation(Node):
    """
    An invitation for a user to become an owner or billing manager of an enterprise.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    email: Optional[String] = Field(
        None, description='The email of the person who was invited to the enterprise.'
    )
    enterprise: Enterprise_aliased = Field(
        ..., description='The enterprise the invitation is for.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseAdministratorInvitation object'
    )
    invitee: Optional[User_aliased] = Field(
        None, description='The user who was invited to the enterprise.'
    )
    inviter: Optional[User_aliased] = Field(
        None, description='The user who created the invitation.'
    )
    role: EnterpriseAdministratorRole = Field(
        ...,
        description="The invitee's pending role in the enterprise (owner or billing_manager).",
    )
    typename__: Optional[Literal['EnterpriseAdministratorInvitation']] = Field(
        'EnterpriseAdministratorInvitation', alias='__typename'
    )


class EnterpriseAdministratorInvitationConnection(BaseModel):
    """
    The connection type for EnterpriseAdministratorInvitation.
    """

    edges: Optional[List[Optional[EnterpriseAdministratorInvitationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseAdministratorInvitation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseAdministratorInvitationConnection']] = (
        Field('EnterpriseAdministratorInvitationConnection', alias='__typename')
    )


class EnterpriseAdministratorInvitationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseAdministratorInvitation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseAdministratorInvitationEdge']] = Field(
        'EnterpriseAdministratorInvitationEdge', alias='__typename'
    )


class EnterpriseBillingInfo(BaseModel):
    """
    Enterprise billing information visible to enterprise billing managers and owners.
    """

    allLicensableUsersCount: Int = Field(
        ..., description='The number of licenseable users/emails across the enterprise.'
    )
    assetPacks: Int = Field(
        ...,
        description='The number of data packs used by all organizations owned by the enterprise.',
    )
    bandwidthQuota: Float = Field(
        ...,
        description='The bandwidth quota in GB for all organizations owned by the enterprise.',
    )
    bandwidthUsage: Float = Field(
        ...,
        description='The bandwidth usage in GB for all organizations owned by the enterprise.',
    )
    bandwidthUsagePercentage: Int = Field(
        ..., description='The bandwidth usage as a percentage of the bandwidth quota.'
    )
    storageQuota: Float = Field(
        ...,
        description='The storage quota in GB for all organizations owned by the enterprise.',
    )
    storageUsage: Float = Field(
        ...,
        description='The storage usage in GB for all organizations owned by the enterprise.',
    )
    storageUsagePercentage: Int = Field(
        ..., description='The storage usage as a percentage of the storage quota.'
    )
    totalAvailableLicenses: Int = Field(
        ...,
        description='The number of available licenses across all owned organizations based on the unique number of billable users.',
    )
    totalLicenses: Int = Field(
        ..., description='The total number of licenses allocated.'
    )
    typename__: Optional[Literal['EnterpriseBillingInfo']] = Field(
        'EnterpriseBillingInfo', alias='__typename'
    )


class EnterpriseConnection(BaseModel):
    """
    The connection type for Enterprise.
    """

    edges: Optional[List[Optional[EnterpriseEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Enterprise]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseConnection']] = Field(
        'EnterpriseConnection', alias='__typename'
    )


class EnterpriseEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Enterprise_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseEdge']] = Field(
        'EnterpriseEdge', alias='__typename'
    )


class EnterpriseFailedInvitationConnection(BaseModel):
    """
    The connection type for OrganizationInvitation.
    """

    edges: Optional[List[Optional[EnterpriseFailedInvitationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[OrganizationInvitation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    totalUniqueUserCount: Int = Field(
        ..., description='Identifies the total count of unique users in the connection.'
    )
    typename__: Optional[Literal['EnterpriseFailedInvitationConnection']] = Field(
        'EnterpriseFailedInvitationConnection', alias='__typename'
    )


class EnterpriseFailedInvitationEdge(BaseModel):
    """
    A failed invitation to be a member in an enterprise organization.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[OrganizationInvitation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseFailedInvitationEdge']] = Field(
        'EnterpriseFailedInvitationEdge', alias='__typename'
    )


class EnterpriseIdentityProvider(Node):
    """
    An identity provider configured to provision identities for an enterprise.
    Visible to enterprise owners or enterprise owners' personal access tokens
    (classic) with read:enterprise or admin:enterprise scope.
    """

    digestMethod: Optional[SamlDigestAlgorithm] = Field(
        None,
        description='The digest algorithm used to sign SAML requests for the identity provider.',
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The enterprise this identity provider belongs to.'
    )
    externalIdentities: ExternalIdentityConnection = Field(
        ..., description='ExternalIdentities provisioned by this identity provider.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseIdentityProvider object'
    )
    idpCertificate: Optional[X509Certificate] = Field(
        None,
        description='The x509 certificate used by the identity provider to sign assertions and responses.',
    )
    issuer: Optional[String] = Field(
        None, description='The Issuer Entity ID for the SAML identity provider.'
    )
    recoveryCodes: Optional[List[String]] = Field(
        None,
        description='Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.',
    )
    signatureMethod: Optional[SamlSignatureAlgorithm] = Field(
        None,
        description='The signature algorithm used to sign SAML requests for the identity provider.',
    )
    ssoUrl: Optional[URI] = Field(
        None, description="The URL endpoint for the identity provider's SAML SSO."
    )
    typename__: Optional[Literal['EnterpriseIdentityProvider']] = Field(
        'EnterpriseIdentityProvider', alias='__typename'
    )


class EnterpriseMemberConnection(BaseModel):
    """
    The connection type for EnterpriseMember.
    """

    edges: Optional[List[Optional[EnterpriseMemberEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseMember]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseMemberConnection']] = Field(
        'EnterpriseMemberConnection', alias='__typename'
    )


class EnterpriseMemberEdge(BaseModel):
    """
    A User who is a member of an enterprise through one or more organizations.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseMember] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseMemberEdge']] = Field(
        'EnterpriseMemberEdge', alias='__typename'
    )


class EnterpriseMemberInvitation(Node):
    """
    An invitation for a user to become an unaffiliated member of an enterprise.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    email: Optional[String] = Field(
        None, description='The email of the person who was invited to the enterprise.'
    )
    enterprise: Enterprise_aliased = Field(
        ..., description='The enterprise the invitation is for.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseMemberInvitation object'
    )
    invitee: Optional[User_aliased] = Field(
        None, description='The user who was invited to the enterprise.'
    )
    inviter: Optional[User_aliased] = Field(
        None, description='The user who created the invitation.'
    )
    typename__: Optional[Literal['EnterpriseMemberInvitation']] = Field(
        'EnterpriseMemberInvitation', alias='__typename'
    )


class EnterpriseMemberInvitationConnection(BaseModel):
    """
    The connection type for EnterpriseMemberInvitation.
    """

    edges: Optional[List[Optional[EnterpriseMemberInvitationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseMemberInvitation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseMemberInvitationConnection']] = Field(
        'EnterpriseMemberInvitationConnection', alias='__typename'
    )


class EnterpriseMemberInvitationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseMemberInvitation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseMemberInvitationEdge']] = Field(
        'EnterpriseMemberInvitationEdge', alias='__typename'
    )


class EnterpriseOrganizationMembershipConnection(BaseModel):
    """
    The connection type for Organization.
    """

    edges: Optional[List[Optional[EnterpriseOrganizationMembershipEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Organization]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseOrganizationMembershipConnection']] = Field(
        'EnterpriseOrganizationMembershipConnection', alias='__typename'
    )


class EnterpriseOrganizationMembershipEdge(BaseModel):
    """
    An enterprise organization that a user is a member of.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Organization_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    role: EnterpriseUserAccountMembershipRole = Field(
        ..., description='The role of the user in the enterprise membership.'
    )
    typename__: Optional[Literal['EnterpriseOrganizationMembershipEdge']] = Field(
        'EnterpriseOrganizationMembershipEdge', alias='__typename'
    )


class EnterpriseOutsideCollaboratorConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[EnterpriseOutsideCollaboratorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseOutsideCollaboratorConnection']] = Field(
        'EnterpriseOutsideCollaboratorConnection', alias='__typename'
    )


class EnterpriseOutsideCollaboratorEdge(BaseModel):
    """
    A User who is an outside collaborator of an enterprise through one or more organizations.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[User_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    repositories: EnterpriseRepositoryInfoConnection = Field(
        ...,
        description='The enterprise organization repositories this user is a member of.',
    )
    typename__: Optional[Literal['EnterpriseOutsideCollaboratorEdge']] = Field(
        'EnterpriseOutsideCollaboratorEdge', alias='__typename'
    )


class EnterpriseOwnerInfo(BaseModel):
    """
    Enterprise information visible to enterprise owners or enterprise owners'
    personal access tokens (classic) with read:enterprise or admin:enterprise scope.
    """

    admins: EnterpriseAdministratorConnection = Field(
        ..., description='A list of all of the administrators for this enterprise.'
    )
    affiliatedUsersWithTwoFactorDisabled: UserConnection = Field(
        ...,
        description='A list of users in the enterprise who currently have two-factor authentication disabled.',
    )
    affiliatedUsersWithTwoFactorDisabledExist: Boolean = Field(
        ...,
        description='Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.',
    )
    allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.',
    )
    allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided private repository forking setting value.',
    )
    allowPrivateRepositoryForkingSettingPolicyValue: Optional[
        EnterpriseAllowPrivateRepositoryForkingPolicyValue
    ] = Field(
        None,
        description='The value for the allow private repository forking policy on the enterprise.',
    )
    defaultRepositoryPermissionSetting: (
        EnterpriseDefaultRepositoryPermissionSettingValue
    ) = Field(
        ...,
        description='The setting value for base repository permissions for organizations in this enterprise.',
    )
    defaultRepositoryPermissionSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided base repository permission.',
    )
    domains: VerifiableDomainConnection = Field(
        ...,
        description="A list of domains owned by the enterprise. Visible to enterprise owners or\nenterprise owners' personal access tokens (classic) with admin:enterprise scope.",
    )
    enterpriseServerInstallations: EnterpriseServerInstallationConnection = Field(
        ..., description='Enterprise Server installations owned by the enterprise.'
    )
    failedInvitations: EnterpriseFailedInvitationConnection = Field(
        ..., description='A list of failed invitations in the enterprise.'
    )
    ipAllowListEnabledSetting: IpAllowListEnabledSettingValue = Field(
        ...,
        description='The setting value for whether the enterprise has an IP allow list enabled.',
    )
    ipAllowListEntries: IpAllowListEntryConnection = Field(
        ...,
        description="The IP addresses that are allowed to access resources owned by the enterprise.\nVisible to enterprise owners or enterprise owners' personal access tokens\n(classic) with admin:enterprise scope.",
    )
    ipAllowListForInstalledAppsEnabledSetting: (
        IpAllowListForInstalledAppsEnabledSettingValue
    ) = Field(
        ...,
        description='The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.',
    )
    isUpdatingDefaultRepositoryPermission: Boolean = Field(
        ...,
        description='Whether or not the base repository permission is currently being updated.',
    )
    isUpdatingTwoFactorRequirement: Boolean = Field(
        ...,
        description='Whether the two-factor authentication requirement is currently being enforced.',
    )
    membersCanChangeRepositoryVisibilitySetting: (
        EnterpriseEnabledDisabledSettingValue
    ) = Field(
        ...,
        description='The setting value for whether organization members with admin permissions on a\nrepository can change repository visibility.',
    )
    membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection = (
        Field(
            ...,
            description='A list of enterprise organizations configured with the provided can change repository visibility setting value.',
        )
    )
    membersCanCreateInternalRepositoriesSetting: Optional[Boolean] = Field(
        None,
        description='The setting value for whether members of organizations in the enterprise can create internal repositories.',
    )
    membersCanCreatePrivateRepositoriesSetting: Optional[Boolean] = Field(
        None,
        description='The setting value for whether members of organizations in the enterprise can create private repositories.',
    )
    membersCanCreatePublicRepositoriesSetting: Optional[Boolean] = Field(
        None,
        description='The setting value for whether members of organizations in the enterprise can create public repositories.',
    )
    membersCanCreateRepositoriesSetting: Optional[
        EnterpriseMembersCanCreateRepositoriesSettingValue
    ] = Field(
        None,
        description='The setting value for whether members of organizations in the enterprise can create repositories.',
    )
    membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided repository creation setting value.',
    )
    membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether members with admin permissions for repositories can delete issues.',
    )
    membersCanDeleteIssuesSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided members can delete issues setting value.',
    )
    membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether members with admin permissions for repositories can delete or transfer repositories.',
    )
    membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided members can delete repositories setting value.',
    )
    membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether members of organizations in the enterprise can invite outside collaborators.',
    )
    membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided members can invite collaborators setting value.',
    )
    membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue = (
        Field(
            ...,
            description="Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.",
        )
    )
    membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue = (
        Field(
            ...,
            description='The setting value for whether members with admin permissions for repositories can update protected branches.',
        )
    )
    membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection = (
        Field(
            ...,
            description='A list of enterprise organizations configured with the provided members can update protected branches setting value.',
        )
    )
    membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue = (
        Field(
            ...,
            description='The setting value for whether members can view dependency insights.',
        )
    )
    membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection = (
        Field(
            ...,
            description='A list of enterprise organizations configured with the provided members can view dependency insights setting value.',
        )
    )
    notificationDeliveryRestrictionEnabledSetting: (
        NotificationRestrictionSettingValue
    ) = Field(
        ...,
        description='Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.',
    )
    oidcProvider: Optional[OIDCProvider] = Field(
        None, description='The OIDC Identity Provider for the enterprise.'
    )
    organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether organization projects are enabled for organizations in this enterprise.',
    )
    organizationProjectsSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided organization projects setting value.',
    )
    outsideCollaborators: EnterpriseOutsideCollaboratorConnection = Field(
        ...,
        description='A list of outside collaborators across the repositories in the enterprise.',
    )
    pendingAdminInvitations: EnterpriseAdministratorInvitationConnection = Field(
        ...,
        description='A list of pending administrator invitations for the enterprise.',
    )
    pendingCollaboratorInvitations: RepositoryInvitationConnection = Field(
        ...,
        description='A list of pending collaborator invitations across the repositories in the enterprise.',
    )
    pendingMemberInvitations: EnterprisePendingMemberInvitationConnection = Field(
        ...,
        description='A list of pending member invitations for organizations in the enterprise.',
    )
    pendingUnaffiliatedMemberInvitations: EnterpriseMemberInvitationConnection = Field(
        ...,
        description='A list of pending unaffiliated member invitations for the enterprise.',
    )
    repositoryDeployKeySetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether deploy keys are enabled for repositories in organizations in this enterprise.',
    )
    repositoryDeployKeySettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided deploy keys setting value.',
    )
    repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether repository projects are enabled in this enterprise.',
    )
    repositoryProjectsSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided repository projects setting value.',
    )
    samlIdentityProvider: Optional[EnterpriseIdentityProvider] = Field(
        None, description='The SAML Identity Provider for the enterprise.'
    )
    samlIdentityProviderSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the SAML single sign-on setting value.',
    )
    supportEntitlements: EnterpriseMemberConnection = Field(
        ..., description='A list of members with a support entitlement.'
    )
    teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The setting value for whether team discussions are enabled for organizations in this enterprise.',
    )
    teamDiscussionsSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the provided team discussions setting value.',
    )
    twoFactorDisallowedMethodsSetting: EnterpriseDisallowedMethodsSettingValue = Field(
        ...,
        description='The setting value for what methods of two-factor authentication the enterprise prevents its users from having.',
    )
    twoFactorRequiredSetting: EnterpriseEnabledSettingValue = Field(
        ...,
        description='The setting value for whether the enterprise requires two-factor authentication for its organizations and users.',
    )
    twoFactorRequiredSettingOrganizations: OrganizationConnection = Field(
        ...,
        description='A list of enterprise organizations configured with the two-factor authentication setting value.',
    )
    typename__: Optional[Literal['EnterpriseOwnerInfo']] = Field(
        'EnterpriseOwnerInfo', alias='__typename'
    )


class EnterprisePendingMemberInvitationConnection(BaseModel):
    """
    The connection type for OrganizationInvitation.
    """

    edges: Optional[List[Optional[EnterprisePendingMemberInvitationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[OrganizationInvitation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    totalUniqueUserCount: Int = Field(
        ..., description='Identifies the total count of unique users in the connection.'
    )
    typename__: Optional[Literal['EnterprisePendingMemberInvitationConnection']] = (
        Field('EnterprisePendingMemberInvitationConnection', alias='__typename')
    )


class EnterprisePendingMemberInvitationEdge(BaseModel):
    """
    An invitation to be a member in an enterprise organization.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[OrganizationInvitation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterprisePendingMemberInvitationEdge']] = Field(
        'EnterprisePendingMemberInvitationEdge', alias='__typename'
    )


class EnterpriseRepositoryInfo(Node):
    """
    A subset of repository information queryable from an enterprise.
    """

    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseRepositoryInfo object'
    )
    isPrivate: Boolean = Field(
        ..., description='Identifies if the repository is private or internal.'
    )
    name: String = Field(..., description="The repository's name.")
    nameWithOwner: String = Field(..., description="The repository's name with owner.")
    typename__: Optional[Literal['EnterpriseRepositoryInfo']] = Field(
        'EnterpriseRepositoryInfo', alias='__typename'
    )


class EnterpriseRepositoryInfoConnection(BaseModel):
    """
    The connection type for EnterpriseRepositoryInfo.
    """

    edges: Optional[List[Optional[EnterpriseRepositoryInfoEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseRepositoryInfo]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseRepositoryInfoConnection']] = Field(
        'EnterpriseRepositoryInfoConnection', alias='__typename'
    )


class EnterpriseRepositoryInfoEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseRepositoryInfo] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseRepositoryInfoEdge']] = Field(
        'EnterpriseRepositoryInfoEdge', alias='__typename'
    )


class EnterpriseServerInstallation(Node):
    """
    An Enterprise Server installation.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    customerName: String = Field(
        ...,
        description='The customer name to which the Enterprise Server installation belongs.',
    )
    hostName: String = Field(
        ..., description='The host name of the Enterprise Server installation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseServerInstallation object'
    )
    isConnected: Boolean = Field(
        ...,
        description='Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    userAccounts: EnterpriseServerUserAccountConnection = Field(
        ..., description='User accounts on this Enterprise Server installation.'
    )
    userAccountsUploads: EnterpriseServerUserAccountsUploadConnection = Field(
        ..., description='User accounts uploads for the Enterprise Server installation.'
    )
    typename__: Optional[Literal['EnterpriseServerInstallation']] = Field(
        'EnterpriseServerInstallation', alias='__typename'
    )


class EnterpriseServerInstallationConnection(BaseModel):
    """
    The connection type for EnterpriseServerInstallation.
    """

    edges: Optional[List[Optional[EnterpriseServerInstallationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseServerInstallation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseServerInstallationConnection']] = Field(
        'EnterpriseServerInstallationConnection', alias='__typename'
    )


class EnterpriseServerInstallationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseServerInstallation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseServerInstallationEdge']] = Field(
        'EnterpriseServerInstallationEdge', alias='__typename'
    )


class EnterpriseServerInstallationMembershipConnection(BaseModel):
    """
    The connection type for EnterpriseServerInstallation.
    """

    edges: Optional[List[Optional[EnterpriseServerInstallationMembershipEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseServerInstallation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[
        Literal['EnterpriseServerInstallationMembershipConnection']
    ] = Field('EnterpriseServerInstallationMembershipConnection', alias='__typename')


class EnterpriseServerInstallationMembershipEdge(BaseModel):
    """
    An Enterprise Server installation that a user is a member of.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseServerInstallation] = Field(
        None, description='The item at the end of the edge.'
    )
    role: EnterpriseUserAccountMembershipRole = Field(
        ..., description='The role of the user in the enterprise membership.'
    )
    typename__: Optional[Literal['EnterpriseServerInstallationMembershipEdge']] = Field(
        'EnterpriseServerInstallationMembershipEdge', alias='__typename'
    )


class EnterpriseServerUserAccount(Node):
    """
    A user account on an Enterprise Server installation.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    emails: EnterpriseServerUserAccountEmailConnection = Field(
        ..., description='User emails belonging to this user account.'
    )
    enterpriseServerInstallation: EnterpriseServerInstallation = Field(
        ...,
        description='The Enterprise Server installation on which this user account exists.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseServerUserAccount object'
    )
    isSiteAdmin: Boolean = Field(
        ...,
        description='Whether the user account is a site administrator on the Enterprise Server installation.',
    )
    login: String = Field(
        ...,
        description='The login of the user account on the Enterprise Server installation.',
    )
    profileName: Optional[String] = Field(
        None,
        description='The profile name of the user account on the Enterprise Server installation.',
    )
    remoteCreatedAt: DateTime = Field(
        ...,
        description='The date and time when the user account was created on the Enterprise Server installation.',
    )
    remoteUserId: Int = Field(
        ...,
        description='The ID of the user account on the Enterprise Server installation.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['EnterpriseServerUserAccount']] = Field(
        'EnterpriseServerUserAccount', alias='__typename'
    )


class EnterpriseServerUserAccountConnection(BaseModel):
    """
    The connection type for EnterpriseServerUserAccount.
    """

    edges: Optional[List[Optional[EnterpriseServerUserAccountEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseServerUserAccount]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountConnection']] = Field(
        'EnterpriseServerUserAccountConnection', alias='__typename'
    )


class EnterpriseServerUserAccountEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseServerUserAccount] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountEdge']] = Field(
        'EnterpriseServerUserAccountEdge', alias='__typename'
    )


class EnterpriseServerUserAccountEmail(Node):
    """
    An email belonging to a user account on an Enterprise Server installation.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    email: String = Field(..., description='The email address.')
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseServerUserAccountEmail object'
    )
    isPrimary: Boolean = Field(
        ...,
        description='Indicates whether this is the primary email of the associated user account.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    userAccount: EnterpriseServerUserAccount = Field(
        ..., description='The user account to which the email belongs.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountEmail']] = Field(
        'EnterpriseServerUserAccountEmail', alias='__typename'
    )


class EnterpriseServerUserAccountEmailConnection(BaseModel):
    """
    The connection type for EnterpriseServerUserAccountEmail.
    """

    edges: Optional[List[Optional[EnterpriseServerUserAccountEmailEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseServerUserAccountEmail]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountEmailConnection']] = Field(
        'EnterpriseServerUserAccountEmailConnection', alias='__typename'
    )


class EnterpriseServerUserAccountEmailEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseServerUserAccountEmail] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountEmailEdge']] = Field(
        'EnterpriseServerUserAccountEmailEdge', alias='__typename'
    )


class EnterpriseServerUserAccountsUpload(Node):
    """
    A user accounts upload from an Enterprise Server installation.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enterprise: Enterprise_aliased = Field(
        ..., description='The enterprise to which this upload belongs.'
    )
    enterpriseServerInstallation: EnterpriseServerInstallation = Field(
        ...,
        description='The Enterprise Server installation for which this upload was generated.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseServerUserAccountsUpload object'
    )
    name: String = Field(..., description='The name of the file uploaded.')
    syncState: EnterpriseServerUserAccountsUploadSyncState = Field(
        ..., description='The synchronization state of the upload'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountsUpload']] = Field(
        'EnterpriseServerUserAccountsUpload', alias='__typename'
    )


class EnterpriseServerUserAccountsUploadConnection(BaseModel):
    """
    The connection type for EnterpriseServerUserAccountsUpload.
    """

    edges: Optional[List[Optional[EnterpriseServerUserAccountsUploadEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[EnterpriseServerUserAccountsUpload]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountsUploadConnection']] = (
        Field('EnterpriseServerUserAccountsUploadConnection', alias='__typename')
    )


class EnterpriseServerUserAccountsUploadEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[EnterpriseServerUserAccountsUpload] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountsUploadEdge']] = Field(
        'EnterpriseServerUserAccountsUploadEdge', alias='__typename'
    )


class EnterpriseUserAccount(Actor, Node):
    """
    An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
    """

    avatarUrl: URI = Field(
        ...,
        description="A URL pointing to the enterprise user account's public avatar.",
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enterprise: Enterprise_aliased = Field(
        ..., description='The enterprise in which this user account exists.'
    )
    enterpriseInstallations: EnterpriseServerInstallationMembershipConnection = Field(
        ...,
        description='A list of Enterprise Server installations this user is a member of.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the EnterpriseUserAccount object'
    )
    login: String = Field(
        ...,
        description='An identifier for the enterprise user account, a login or email address',
    )
    name: Optional[String] = Field(
        None, description='The name of the enterprise user account'
    )
    organizations: EnterpriseOrganizationMembershipConnection = Field(
        ..., description='A list of enterprise organizations this user is a member of.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this user.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this user.')
    user: Optional[User_aliased] = Field(
        None, description='The user within the enterprise.'
    )
    typename__: Optional[Literal['EnterpriseUserAccount']] = Field(
        'EnterpriseUserAccount', alias='__typename'
    )


class Environment(Node):
    """
    An environment.
    """

    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Environment object')
    isPinned: Optional[Boolean] = Field(
        None,
        description='Indicates whether or not this environment is currently pinned to the repository',
    )
    latestCompletedDeployment: Optional[Deployment] = Field(
        None,
        description='The latest completed deployment with status success, failure, or error if it exists',
    )
    name: String = Field(..., description='The name of the environment')
    pinnedPosition: Optional[Int] = Field(
        None,
        description='The position of the environment if it is pinned, null if it is not pinned',
    )
    protectionRules: DeploymentProtectionRuleConnection = Field(
        ..., description='The protection rules defined for this environment'
    )
    typename__: Optional[Literal['Environment']] = Field(
        'Environment', alias='__typename'
    )


class EnvironmentConnection(BaseModel):
    """
    The connection type for Environment.
    """

    edges: Optional[List[Optional[EnvironmentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Environment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['EnvironmentConnection']] = Field(
        'EnvironmentConnection', alias='__typename'
    )


class EnvironmentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Environment] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['EnvironmentEdge']] = Field(
        'EnvironmentEdge', alias='__typename'
    )


class ExternalIdentity(Node):
    """
    An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
    the organization, the external identity is visible to (1) organization owners,
    (2) organization owners' personal access tokens (classic) with read:org or
    admin:org scope, (3) GitHub App with an installation token with read or write
    access to members. If SAML is configured on the enterprise, the external
    identity is visible to (1) enterprise owners, (2) enterprise owners' personal
    access tokens (classic) with read:enterprise or admin:enterprise scope.
    """

    guid: String = Field(..., description='The GUID for this identity')
    id: ID_aliased = Field(
        ..., description='The Node ID of the ExternalIdentity object'
    )
    organizationInvitation: Optional[OrganizationInvitation] = Field(
        None,
        description='Organization invitation for this SCIM-provisioned external identity',
    )
    samlIdentity: Optional[ExternalIdentitySamlAttributes] = Field(
        None, description='SAML Identity attributes'
    )
    scimIdentity: Optional[ExternalIdentityScimAttributes] = Field(
        None, description='SCIM Identity attributes'
    )
    user: Optional[User_aliased] = Field(
        None,
        description='User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.',
    )
    typename__: Optional[Literal['ExternalIdentity']] = Field(
        'ExternalIdentity', alias='__typename'
    )


class ExternalIdentityAttribute(BaseModel):
    """
    An attribute for the External Identity attributes collection
    """

    metadata: Optional[String] = Field(
        None, description='The attribute metadata as JSON'
    )
    name: String = Field(..., description='The attribute name')
    value: String = Field(..., description='The attribute value')
    typename__: Optional[Literal['ExternalIdentityAttribute']] = Field(
        'ExternalIdentityAttribute', alias='__typename'
    )


class ExternalIdentityConnection(BaseModel):
    """
    The connection type for ExternalIdentity.
    """

    edges: Optional[List[Optional[ExternalIdentityEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ExternalIdentity]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ExternalIdentityConnection']] = Field(
        'ExternalIdentityConnection', alias='__typename'
    )


class ExternalIdentityEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ExternalIdentity] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ExternalIdentityEdge']] = Field(
        'ExternalIdentityEdge', alias='__typename'
    )


class ExternalIdentitySamlAttributes(BaseModel):
    """
    SAML attributes for the External Identity
    """

    attributes: List[ExternalIdentityAttribute] = Field(
        ..., description='SAML Identity attributes'
    )
    emails: Optional[List[UserEmailMetadata]] = Field(
        None, description='The emails associated with the SAML identity'
    )
    familyName: Optional[String] = Field(
        None, description='Family name of the SAML identity'
    )
    givenName: Optional[String] = Field(
        None, description='Given name of the SAML identity'
    )
    groups: Optional[List[String]] = Field(
        None, description='The groups linked to this identity in IDP'
    )
    nameId: Optional[String] = Field(
        None, description='The NameID of the SAML identity'
    )
    username: Optional[String] = Field(
        None, description='The userName of the SAML identity'
    )
    typename__: Optional[Literal['ExternalIdentitySamlAttributes']] = Field(
        'ExternalIdentitySamlAttributes', alias='__typename'
    )


class ExternalIdentityScimAttributes(BaseModel):
    """
    SCIM attributes for the External Identity
    """

    emails: Optional[List[UserEmailMetadata]] = Field(
        None, description='The emails associated with the SCIM identity'
    )
    familyName: Optional[String] = Field(
        None, description='Family name of the SCIM identity'
    )
    givenName: Optional[String] = Field(
        None, description='Given name of the SCIM identity'
    )
    groups: Optional[List[String]] = Field(
        None, description='The groups linked to this identity in IDP'
    )
    username: Optional[String] = Field(
        None, description='The userName of the SCIM identity'
    )
    typename__: Optional[Literal['ExternalIdentityScimAttributes']] = Field(
        'ExternalIdentityScimAttributes', alias='__typename'
    )


class FileExtensionRestrictionParameters(BaseModel):
    """
    Prevent commits that include files with specified file extensions from being pushed to the commit graph.
    """

    restrictedFileExtensions: List[String] = Field(
        ...,
        description='The file extensions that are restricted from being pushed to the commit graph.',
    )
    typename__: Optional[Literal['FileExtensionRestrictionParameters']] = Field(
        'FileExtensionRestrictionParameters', alias='__typename'
    )


class FilePathRestrictionParameters(BaseModel):
    """
    Prevent commits that include changes in specified file and folder paths from
    being pushed to the commit graph. This includes absolute paths that contain file names.
    """

    restrictedFilePaths: List[String] = Field(
        ...,
        description='The file paths that are restricted from being pushed to the commit graph.',
    )
    typename__: Optional[Literal['FilePathRestrictionParameters']] = Field(
        'FilePathRestrictionParameters', alias='__typename'
    )


class FollowOrganizationPayload(BaseModel):
    """
    Autogenerated return type of FollowOrganization.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The organization that was followed.'
    )
    typename__: Optional[Literal['FollowOrganizationPayload']] = Field(
        'FollowOrganizationPayload', alias='__typename'
    )


class FollowUserPayload(BaseModel):
    """
    Autogenerated return type of FollowUser.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user that was followed.'
    )
    typename__: Optional[Literal['FollowUserPayload']] = Field(
        'FollowUserPayload', alias='__typename'
    )


class FollowerConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[UserEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['FollowerConnection']] = Field(
        'FollowerConnection', alias='__typename'
    )


class FollowingConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[UserEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['FollowingConnection']] = Field(
        'FollowingConnection', alias='__typename'
    )


class FundingLink(BaseModel):
    """
    A funding platform link for a repository.
    """

    platform: FundingPlatform = Field(
        ..., description='The funding platform this link is for.'
    )
    url: URI = Field(..., description='The configured URL for this funding link.')
    typename__: Optional[Literal['FundingLink']] = Field(
        'FundingLink', alias='__typename'
    )


class GenericHovercardContext(HovercardContext):
    """
    A generic hovercard context with a message and icon
    """

    message: String = Field(..., description='A string describing this context')
    octicon: String = Field(..., description='An octicon to accompany this context')
    typename__: Optional[Literal['GenericHovercardContext']] = Field(
        'GenericHovercardContext', alias='__typename'
    )


class Gist(Node, Starrable, UniformResourceLocatable):
    """
    A Gist.
    """

    comments: GistCommentConnection = Field(
        ..., description='A list of comments associated with the gist'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    description: Optional[String] = Field(None, description='The gist description.')
    files: Optional[List[Optional[GistFile]]] = Field(
        None, description='The files in this gist.'
    )
    forks: GistConnection = Field(
        ..., description='A list of forks associated with the gist'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Gist object')
    isFork: Boolean = Field(..., description='Identifies if the gist is a fork.')
    isPublic: Boolean = Field(..., description='Whether the gist is public or not.')
    name: String = Field(..., description='The gist name.')
    owner: Optional[RepositoryOwner] = Field(None, description='The gist owner.')
    pushedAt: Optional[DateTime] = Field(
        None, description='Identifies when the gist was last pushed to.'
    )
    resourcePath: URI = Field(..., description='The HTML path to this resource.')
    stargazerCount: Int = Field(
        ...,
        description='Returns a count of how many stargazers there are on this object',
    )
    stargazers: StargazerConnection = Field(
        ..., description='A list of users who have starred this starrable.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this Gist.')
    viewerHasStarred: Boolean = Field(
        ...,
        description='Returns a boolean indicating whether the viewing user has starred this starrable.',
    )
    typename__: Optional[Literal['Gist']] = Field('Gist', alias='__typename')


class GistComment(Comment, Deletable, Minimizable, Node, Updatable, UpdatableComment):
    """
    Represents a comment on an Gist.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the gist."
    )
    body: String = Field(..., description='Identifies the comment body.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    gist: Gist_aliased = Field(..., description='The associated gist.')
    id: ID_aliased = Field(..., description='The Node ID of the GistComment object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isMinimized: Boolean = Field(
        ..., description='Returns whether or not a comment has been minimized.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    minimizedReason: Optional[String] = Field(
        None,
        description='Returns why the comment was minimized. One of `abuse`, `off-topic`,\n`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\nformatting of these values differs from the inputs to the `MinimizeComment` mutation.',
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanMinimize: Boolean = Field(
        ..., description='Check if the current viewer can minimize this object.'
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    typename__: Optional[Literal['GistComment']] = Field(
        'GistComment', alias='__typename'
    )


class GistCommentConnection(BaseModel):
    """
    The connection type for GistComment.
    """

    edges: Optional[List[Optional[GistCommentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[GistComment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['GistCommentConnection']] = Field(
        'GistCommentConnection', alias='__typename'
    )


class GistCommentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[GistComment] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['GistCommentEdge']] = Field(
        'GistCommentEdge', alias='__typename'
    )


class GistConnection(BaseModel):
    """
    The connection type for Gist.
    """

    edges: Optional[List[Optional[GistEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Gist]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['GistConnection']] = Field(
        'GistConnection', alias='__typename'
    )


class GistEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Gist_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['GistEdge']] = Field('GistEdge', alias='__typename')


class GistFile(BaseModel):
    """
    A file in a gist.
    """

    encodedName: Optional[String] = Field(
        None,
        description='The file name encoded to remove characters that are invalid in URL paths.',
    )
    encoding: Optional[String] = Field(None, description='The gist file encoding.')
    extension: Optional[String] = Field(
        None, description='The file extension from the file name.'
    )
    isImage: Boolean = Field(..., description='Indicates if this file is an image.')
    isTruncated: Boolean = Field(
        ..., description="Whether the file's contents were truncated."
    )
    language: Optional[Language] = Field(
        None, description='The programming language this file is written in.'
    )
    name: Optional[String] = Field(None, description='The gist file name.')
    size: Optional[Int] = Field(None, description='The gist file size in bytes.')
    text: Optional[String] = Field(
        None, description='UTF8 text data or null if the file is binary'
    )
    typename__: Optional[Literal['GistFile']] = Field('GistFile', alias='__typename')


class GitActor(BaseModel):
    """
    Represents an actor in a Git commit (ie. an author or committer).
    """

    avatarUrl: URI = Field(
        ..., description="A URL pointing to the author's public avatar."
    )
    date: Optional[GitTimestamp] = Field(
        None, description='The timestamp of the Git action (authoring or committing).'
    )
    email: Optional[String] = Field(None, description='The email in the Git commit.')
    name: Optional[String] = Field(None, description='The name in the Git commit.')
    user: Optional[User_aliased] = Field(
        None,
        description='The GitHub user corresponding to the email field. Null if no such user exists.',
    )
    typename__: Optional[Literal['GitActor']] = Field('GitActor', alias='__typename')


class GitActorConnection(BaseModel):
    """
    The connection type for GitActor.
    """

    edges: Optional[List[Optional[GitActorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[GitActor]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['GitActorConnection']] = Field(
        'GitActorConnection', alias='__typename'
    )


class GitActorEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[GitActor] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['GitActorEdge']] = Field(
        'GitActorEdge', alias='__typename'
    )


class GitHubMetadata(BaseModel):
    """
    Represents information about the GitHub instance.
    """

    gitHubServicesSha: GitObjectID = Field(
        ..., description="Returns a String that's a SHA of `github-services`"
    )
    gitIpAddresses: Optional[List[String]] = Field(
        None, description='IP addresses that users connect to for git operations'
    )
    githubEnterpriseImporterIpAddresses: Optional[List[String]] = Field(
        None,
        description='IP addresses that GitHub Enterprise Importer uses for outbound connections',
    )
    hookIpAddresses: Optional[List[String]] = Field(
        None, description='IP addresses that service hooks are sent from'
    )
    importerIpAddresses: Optional[List[String]] = Field(
        None, description='IP addresses that the importer connects from'
    )
    isPasswordAuthenticationVerifiable: Boolean = Field(
        ..., description='Whether or not users are verified'
    )
    pagesIpAddresses: Optional[List[String]] = Field(
        None, description="IP addresses for GitHub Pages' A records"
    )
    typename__: Optional[Literal['GitHubMetadata']] = Field(
        'GitHubMetadata', alias='__typename'
    )


class GpgSignature(GitSignature):
    """
    Represents a GPG signature on a Commit or Tag.
    """

    email: String = Field(..., description='Email used to sign this object.')
    isValid: Boolean = Field(
        ..., description='True if the signature is valid and verified by GitHub.'
    )
    keyId: Optional[String] = Field(
        None, description='Hex-encoded ID of the key that signed this object.'
    )
    payload: String = Field(
        ...,
        description='Payload for GPG signing object. Raw ODB object without the signature header.',
    )
    signature: String = Field(
        ..., description='ASCII-armored signature header from object.'
    )
    signer: Optional[User_aliased] = Field(
        None, description='GitHub user corresponding to the email signing this commit.'
    )
    state: GitSignatureState = Field(
        ...,
        description='The state of this signature. `VALID` if signature is valid and verified by\nGitHub, otherwise represents reason why signature is considered invalid.',
    )
    verifiedAt: Optional[DateTime] = Field(
        None, description='The date the signature was verified, if valid'
    )
    wasSignedByGitHub: Boolean = Field(
        ..., description="True if the signature was made with GitHub's signing key."
    )
    typename__: Optional[Literal['GpgSignature']] = Field(
        'GpgSignature', alias='__typename'
    )


class GrantEnterpriseOrganizationsMigratorRolePayload(BaseModel):
    """
    Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizations: Optional[OrganizationConnection] = Field(
        None,
        description='The organizations that had the migrator role applied to for the given user.',
    )
    typename__: Optional[Literal['GrantEnterpriseOrganizationsMigratorRolePayload']] = (
        Field('GrantEnterpriseOrganizationsMigratorRolePayload', alias='__typename')
    )


class GrantMigratorRolePayload(BaseModel):
    """
    Autogenerated return type of GrantMigratorRole.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    success: Optional[Boolean] = Field(None, description='Did the operation succeed?')
    typename__: Optional[Literal['GrantMigratorRolePayload']] = Field(
        'GrantMigratorRolePayload', alias='__typename'
    )


class HeadRefDeletedEvent(Node):
    """
    Represents a 'head_ref_deleted' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    headRef: Optional[Ref] = Field(
        None,
        description='Identifies the Ref associated with the `head_ref_deleted` event.',
    )
    headRefName: String = Field(
        ...,
        description='Identifies the name of the Ref associated with the `head_ref_deleted` event.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the HeadRefDeletedEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['HeadRefDeletedEvent']] = Field(
        'HeadRefDeletedEvent', alias='__typename'
    )


class HeadRefForcePushedEvent(Node):
    """
    Represents a 'head_ref_force_pushed' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    afterCommit: Optional[Commit_aliased] = Field(
        None,
        description="Identifies the after commit SHA for the 'head_ref_force_pushed' event.",
    )
    beforeCommit: Optional[Commit_aliased] = Field(
        None,
        description="Identifies the before commit SHA for the 'head_ref_force_pushed' event.",
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the HeadRefForcePushedEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    ref: Optional[Ref] = Field(
        None,
        description="Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.",
    )
    typename__: Optional[Literal['HeadRefForcePushedEvent']] = Field(
        'HeadRefForcePushedEvent', alias='__typename'
    )


class HeadRefRestoredEvent(Node):
    """
    Represents a 'head_ref_restored' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the HeadRefRestoredEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    typename__: Optional[Literal['HeadRefRestoredEvent']] = Field(
        'HeadRefRestoredEvent', alias='__typename'
    )


class Hovercard(BaseModel):
    """
    Detail needed to display a hovercard for a user
    """

    contexts: List[HovercardContext] = Field(
        ..., description='Each of the contexts for this hovercard'
    )
    typename__: Optional[Literal['Hovercard']] = Field('Hovercard', alias='__typename')


class ImportProjectPayload(BaseModel):
    """
    Autogenerated return type of ImportProject.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    project: Optional[Project] = Field(None, description='The new Project!')
    typename__: Optional[Literal['ImportProjectPayload']] = Field(
        'ImportProjectPayload', alias='__typename'
    )


class InviteEnterpriseAdminPayload(BaseModel):
    """
    Autogenerated return type of InviteEnterpriseAdmin.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitation: Optional[EnterpriseAdministratorInvitation] = Field(
        None, description='The created enterprise administrator invitation.'
    )
    typename__: Optional[Literal['InviteEnterpriseAdminPayload']] = Field(
        'InviteEnterpriseAdminPayload', alias='__typename'
    )


class InviteEnterpriseMemberPayload(BaseModel):
    """
    Autogenerated return type of InviteEnterpriseMember.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitation: Optional[EnterpriseMemberInvitation] = Field(
        None, description='The created enterprise member invitation.'
    )
    typename__: Optional[Literal['InviteEnterpriseMemberPayload']] = Field(
        'InviteEnterpriseMemberPayload', alias='__typename'
    )


class IpAllowListEntry(Node):
    """
    An IP address or range of addresses that is allowed to access an owner's resources.
    """

    allowListValue: String = Field(
        ...,
        description='A single IP address or range of IP addresses in CIDR notation.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the IpAllowListEntry object'
    )
    isActive: Boolean = Field(..., description='Whether the entry is currently active.')
    name: Optional[String] = Field(
        None, description='The name of the IP allow list entry.'
    )
    owner: IpAllowListOwner = Field(
        ..., description='The owner of the IP allow list entry.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['IpAllowListEntry']] = Field(
        'IpAllowListEntry', alias='__typename'
    )


class IpAllowListEntryConnection(BaseModel):
    """
    The connection type for IpAllowListEntry.
    """

    edges: Optional[List[Optional[IpAllowListEntryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[IpAllowListEntry]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['IpAllowListEntryConnection']] = Field(
        'IpAllowListEntryConnection', alias='__typename'
    )


class IpAllowListEntryEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[IpAllowListEntry] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['IpAllowListEntryEdge']] = Field(
        'IpAllowListEntryEdge', alias='__typename'
    )


class Issue(
    Assignable,
    Closable,
    Comment,
    Deletable,
    Labelable,
    Lockable,
    Node,
    ProjectV2Owner,
    Reactable,
    RepositoryNode,
    Subscribable,
    SubscribableThread,
    UniformResourceLocatable,
    Updatable,
    UpdatableComment,
):
    """
    An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
    """

    activeLockReason: Optional[LockReason] = Field(
        None, description='Reason that the conversation was locked.'
    )
    assignedActors: AssigneeConnection = Field(
        ..., description='A list of actors assigned to this object.'
    )
    assignees: UserConnection = Field(
        ..., description='A list of Users assigned to this object.'
    )
    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    body: String = Field(..., description='Identifies the body of the issue.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyResourcePath: URI = Field(..., description='The http path for this issue body')
    bodyText: String = Field(
        ..., description='Identifies the body of the issue rendered to text.'
    )
    bodyUrl: URI = Field(..., description='The http URL for this issue body')
    closed: Boolean = Field(
        ...,
        description='Indicates if the object is closed (definition of closed may depend on type)',
    )
    closedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was closed.'
    )
    closedByPullRequestsReferences: Optional[PullRequestConnection] = Field(
        None, description='List of open pull requests referenced from this issue'
    )
    comments: IssueCommentConnection = Field(
        ..., description='A list of comments associated with the Issue.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    hovercard: Hovercard = Field(
        ..., description='The hovercard information for this issue'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Issue object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isPinned: Optional[Boolean] = Field(
        None,
        description='Indicates whether or not this issue is currently pinned to the repository issues list',
    )
    isReadByViewer: Optional[Boolean] = Field(
        None, description='Is this issue read by the viewer'
    )
    issueType: Optional[IssueType] = Field(
        None, description='The issue type for this Issue'
    )
    labels: Optional[LabelConnection] = Field(
        None, description='A list of labels associated with the object.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    linkedBranches: LinkedBranchConnection = Field(
        ..., description='Branches linked to this issue.'
    )
    locked: Boolean = Field(..., description='`true` if the object is locked')
    milestone: Optional[Milestone] = Field(
        None, description='Identifies the milestone associated with the issue.'
    )
    number: Int = Field(..., description='Identifies the issue number.')
    parent: Optional[Issue_aliased] = Field(
        None, description='The parent entity of the issue.'
    )
    participants: UserConnection = Field(
        ...,
        description='A list of Users that are participating in the Issue conversation.',
    )
    projectCards: ProjectCardConnection = Field(
        ..., description='List of project cards associated with this issue.'
    )
    projectItems: ProjectV2ItemConnection = Field(
        ..., description='List of project items associated with this issue.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='Find a project by number.'
    )
    projectsV2: ProjectV2Connection = Field(
        ..., description='A list of projects under the owner.'
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this issue')
    state: IssueState = Field(..., description='Identifies the state of the issue.')
    stateReason: Optional[IssueStateReason] = Field(
        None, description='Identifies the reason for the issue state.'
    )
    subIssues: IssueConnection = Field(
        ..., description='A list of sub-issues associated with the Issue.'
    )
    subIssuesSummary: SubIssuesSummary = Field(
        ..., description="Summary of the state of an issue's sub-issues"
    )
    suggestedActors: AssigneeConnection = Field(
        ..., description='A list of suggested actors to assign to this object'
    )
    timeline: IssueTimelineConnection = Field(
        ...,
        description='A list of events, comments, commits, etc. associated with the issue.',
    )
    timelineItems: IssueTimelineItemsConnection = Field(
        ...,
        description='A list of events, comments, commits, etc. associated with the issue.',
    )
    title: String = Field(..., description='Identifies the issue title.')
    titleHTML: String = Field(
        ..., description='Identifies the issue title rendered to HTML.'
    )
    trackedInIssues: IssueConnection = Field(
        ..., description='A list of issues that track this issue'
    )
    trackedIssues: IssueConnection = Field(
        ..., description='A list of issues tracked inside the current issue'
    )
    trackedIssuesCount: Int = Field(
        ..., description='The number of tracked issues for this issue'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this issue')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanClose: Boolean = Field(
        ..., description='Indicates if the object can be closed by the viewer.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanLabel: Boolean = Field(
        ..., description='Indicates if the viewer can edit labels for this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanReopen: Boolean = Field(
        ..., description='Indicates if the object can be reopened by the viewer.'
    )
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    viewerThreadSubscriptionFormAction: Optional[ThreadSubscriptionFormAction] = Field(
        None, description="Identifies the viewer's thread subscription form action."
    )
    viewerThreadSubscriptionStatus: Optional[ThreadSubscriptionState] = Field(
        None, description="Identifies the viewer's thread subscription status."
    )
    typename__: Optional[Literal['Issue']] = Field('Issue', alias='__typename')


class IssueComment(
    Comment,
    Deletable,
    Minimizable,
    Node,
    Reactable,
    RepositoryNode,
    Updatable,
    UpdatableComment,
):
    """
    Represents a comment on an Issue.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    body: String = Field(..., description='The body as Markdown.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the IssueComment object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isMinimized: Boolean = Field(
        ..., description='Returns whether or not a comment has been minimized.'
    )
    issue: Issue_aliased = Field(
        ..., description='Identifies the issue associated with the comment.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    minimizedReason: Optional[String] = Field(
        None,
        description='Returns why the comment was minimized. One of `abuse`, `off-topic`,\n`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\nformatting of these values differs from the inputs to the `MinimizeComment` mutation.',
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None,
        description='Returns the pull request associated with the comment, if this comment was made on a\npull request.',
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this issue comment')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this issue comment')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanMinimize: Boolean = Field(
        ..., description='Check if the current viewer can minimize this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    typename__: Optional[Literal['IssueComment']] = Field(
        'IssueComment', alias='__typename'
    )


class IssueCommentConnection(BaseModel):
    """
    The connection type for IssueComment.
    """

    edges: Optional[List[Optional[IssueCommentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[IssueComment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['IssueCommentConnection']] = Field(
        'IssueCommentConnection', alias='__typename'
    )


class IssueCommentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[IssueComment_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['IssueCommentEdge']] = Field(
        'IssueCommentEdge', alias='__typename'
    )


class IssueConnection(BaseModel):
    """
    The connection type for Issue.
    """

    edges: Optional[List[Optional[IssueEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Issue]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['IssueConnection']] = Field(
        'IssueConnection', alias='__typename'
    )


class IssueContributionsByRepository(BaseModel):
    """
    This aggregates issues opened by a user within one repository.
    """

    contributions: CreatedIssueContributionConnection = Field(
        ..., description='The issue contributions.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository in which the issues were opened.'
    )
    typename__: Optional[Literal['IssueContributionsByRepository']] = Field(
        'IssueContributionsByRepository', alias='__typename'
    )


class IssueEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Issue_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['IssueEdge']] = Field('IssueEdge', alias='__typename')


class IssueTemplate(BaseModel):
    """
    A repository issue template.
    """

    about: Optional[String] = Field(None, description='The template purpose.')
    assignees: UserConnection = Field(..., description='The suggested assignees.')
    body: Optional[String] = Field(None, description='The suggested issue body.')
    filename: String = Field(..., description='The template filename.')
    labels: Optional[LabelConnection] = Field(
        None, description='The suggested issue labels'
    )
    name: String = Field(..., description='The template name.')
    title: Optional[String] = Field(None, description='The suggested issue title.')
    type: Optional[IssueType] = Field(None, description='The suggested issue type')
    typename__: Optional[Literal['IssueTemplate']] = Field(
        'IssueTemplate', alias='__typename'
    )


class IssueTimelineConnection(BaseModel):
    """
    The connection type for IssueTimelineItem.
    """

    edges: Optional[List[Optional[IssueTimelineItemEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[IssueTimelineItem]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['IssueTimelineConnection']] = Field(
        'IssueTimelineConnection', alias='__typename'
    )


class IssueTimelineItemEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[IssueTimelineItem] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['IssueTimelineItemEdge']] = Field(
        'IssueTimelineItemEdge', alias='__typename'
    )


class IssueTimelineItemsConnection(BaseModel):
    """
    The connection type for IssueTimelineItems.
    """

    edges: Optional[List[Optional[IssueTimelineItemsEdge]]] = Field(
        None, description='A list of edges.'
    )
    filteredCount: Int = Field(
        ...,
        description='Identifies the count of items after applying `before` and `after` filters.',
    )
    nodes: Optional[List[Optional[IssueTimelineItems]]] = Field(
        None, description='A list of nodes.'
    )
    pageCount: Int = Field(
        ...,
        description='Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.',
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the timeline was last updated.',
    )
    typename__: Optional[Literal['IssueTimelineItemsConnection']] = Field(
        'IssueTimelineItemsConnection', alias='__typename'
    )


class IssueTimelineItemsEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[IssueTimelineItems] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['IssueTimelineItemsEdge']] = Field(
        'IssueTimelineItemsEdge', alias='__typename'
    )


class IssueType(Node):
    """
    Represents the type of Issue.
    """

    color: IssueTypeColor = Field(..., description="The issue type's color.")
    description: Optional[String] = Field(
        None, description="The issue type's description."
    )
    id: ID_aliased = Field(..., description='The Node ID of the IssueType object')
    isEnabled: Boolean = Field(..., description="The issue type's enabled state.")
    isPrivate: Boolean = Field(
        ..., description='Whether the issue type is publicly visible.'
    )
    issues: IssueConnection = Field(
        ..., description='The issues with this issue type in the given repository.'
    )
    name: String = Field(..., description="The issue type's name.")
    typename__: Optional[Literal['IssueType']] = Field('IssueType', alias='__typename')


class IssueTypeAddedEvent(Node):
    """
    Represents a 'issue_type_added' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the IssueTypeAddedEvent object'
    )
    issueType: Optional[IssueType] = Field(None, description='The issue type added.')
    typename__: Optional[Literal['IssueTypeAddedEvent']] = Field(
        'IssueTypeAddedEvent', alias='__typename'
    )


class IssueTypeChangedEvent(Node):
    """
    Represents a 'issue_type_changed' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the IssueTypeChangedEvent object'
    )
    issueType: Optional[IssueType] = Field(None, description='The issue type added.')
    prevIssueType: Optional[IssueType] = Field(
        None, description='The issue type removed.'
    )
    typename__: Optional[Literal['IssueTypeChangedEvent']] = Field(
        'IssueTypeChangedEvent', alias='__typename'
    )


class IssueTypeConnection(BaseModel):
    """
    The connection type for IssueType.
    """

    edges: Optional[List[Optional[IssueTypeEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[IssueType]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['IssueTypeConnection']] = Field(
        'IssueTypeConnection', alias='__typename'
    )


class IssueTypeEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[IssueType] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['IssueTypeEdge']] = Field(
        'IssueTypeEdge', alias='__typename'
    )


class IssueTypeRemovedEvent(Node):
    """
    Represents a 'issue_type_removed' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the IssueTypeRemovedEvent object'
    )
    issueType: Optional[IssueType] = Field(None, description='The issue type removed.')
    typename__: Optional[Literal['IssueTypeRemovedEvent']] = Field(
        'IssueTypeRemovedEvent', alias='__typename'
    )


class JoinedGitHubContribution(Contribution):
    """
    Represents a user signing up for a GitHub account.
    """

    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['JoinedGitHubContribution']] = Field(
        'JoinedGitHubContribution', alias='__typename'
    )


class Label(Node):
    """
    A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
    """

    color: String = Field(..., description='Identifies the label color.')
    createdAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the label was created.'
    )
    description: Optional[String] = Field(
        None, description='A brief description of this label.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Label object')
    isDefault: Boolean = Field(
        ..., description='Indicates whether or not this is a default label.'
    )
    issues: IssueConnection = Field(
        ..., description='A list of issues associated with this label.'
    )
    name: String = Field(..., description='Identifies the label name.')
    pullRequests: PullRequestConnection = Field(
        ..., description='A list of pull requests associated with this label.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this label.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this label.')
    updatedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the label was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this label.')
    typename__: Optional[Literal['Label']] = Field('Label', alias='__typename')


class LabelConnection(BaseModel):
    """
    The connection type for Label.
    """

    edges: Optional[List[Optional[LabelEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Label]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['LabelConnection']] = Field(
        'LabelConnection', alias='__typename'
    )


class LabelEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Label] = Field(None, description='The item at the end of the edge.')
    typename__: Optional[Literal['LabelEdge']] = Field('LabelEdge', alias='__typename')


class LabeledEvent(Node):
    """
    Represents a 'labeled' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the LabeledEvent object')
    label: Label = Field(
        ..., description="Identifies the label associated with the 'labeled' event."
    )
    labelable: Labelable = Field(
        ..., description='Identifies the `Labelable` associated with the event.'
    )
    typename__: Optional[Literal['LabeledEvent']] = Field(
        'LabeledEvent', alias='__typename'
    )


class Language(Node):
    """
    Represents a given language found in repositories.
    """

    color: Optional[String] = Field(
        None, description='The color defined for the current language.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Language object')
    name: String = Field(..., description='The name of the current language.')
    typename__: Optional[Literal['Language']] = Field('Language', alias='__typename')


class LanguageConnection(BaseModel):
    """
    A list of languages associated with the parent.
    """

    edges: Optional[List[Optional[LanguageEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Language]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    totalSize: Int = Field(
        ..., description='The total size in bytes of files written in that language.'
    )
    typename__: Optional[Literal['LanguageConnection']] = Field(
        'LanguageConnection', alias='__typename'
    )


class LanguageEdge(BaseModel):
    """
    Represents the language of a repository.
    """

    cursor: String
    node: Language
    size: Int = Field(
        ..., description='The number of bytes of code written in the language.'
    )
    typename__: Optional[Literal['LanguageEdge']] = Field(
        'LanguageEdge', alias='__typename'
    )


class License(Node):
    """
    A repository's open source license
    """

    body: String = Field(..., description='The full text of the license')
    conditions: List[Optional[LicenseRule]] = Field(
        ..., description='The conditions set by the license'
    )
    description: Optional[String] = Field(
        None, description='A human-readable description of the license'
    )
    featured: Boolean = Field(..., description='Whether the license should be featured')
    hidden: Boolean = Field(
        ..., description='Whether the license should be displayed in license pickers'
    )
    id: ID_aliased = Field(..., description='The Node ID of the License object')
    implementation: Optional[String] = Field(
        None, description='Instructions on how to implement the license'
    )
    key: String = Field(..., description='The lowercased SPDX ID of the license')
    limitations: List[Optional[LicenseRule]] = Field(
        ..., description='The limitations set by the license'
    )
    name: String = Field(
        ...,
        description='The license full name specified by <https://spdx.org/licenses>',
    )
    nickname: Optional[String] = Field(
        None, description='Customary short name if applicable (e.g, GPLv3)'
    )
    permissions: List[Optional[LicenseRule]] = Field(
        ..., description='The permissions set by the license'
    )
    pseudoLicense: Boolean = Field(
        ...,
        description='Whether the license is a pseudo-license placeholder (e.g., other, no-license)',
    )
    spdxId: Optional[String] = Field(
        None, description='Short identifier specified by <https://spdx.org/licenses>'
    )
    url: Optional[URI] = Field(
        None, description='URL to the license on <https://choosealicense.com>'
    )
    typename__: Optional[Literal['License']] = Field('License', alias='__typename')


class LicenseRule(BaseModel):
    """
    Describes a License's conditions, permissions, and limitations
    """

    description: String = Field(..., description='A description of the rule')
    key: String = Field(..., description='The machine-readable rule key')
    label: String = Field(..., description='The human-readable rule label')
    typename__: Optional[Literal['LicenseRule']] = Field(
        'LicenseRule', alias='__typename'
    )


class LinkProjectV2ToRepositoryPayload(BaseModel):
    """
    Autogenerated return type of LinkProjectV2ToRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository the project is linked to.'
    )
    typename__: Optional[Literal['LinkProjectV2ToRepositoryPayload']] = Field(
        'LinkProjectV2ToRepositoryPayload', alias='__typename'
    )


class LinkProjectV2ToTeamPayload(BaseModel):
    """
    Autogenerated return type of LinkProjectV2ToTeam.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    team: Optional[Team_aliased] = Field(
        None, description='The team the project is linked to'
    )
    typename__: Optional[Literal['LinkProjectV2ToTeamPayload']] = Field(
        'LinkProjectV2ToTeamPayload', alias='__typename'
    )


class LinkRepositoryToProjectPayload(BaseModel):
    """
    Autogenerated return type of LinkRepositoryToProject.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    project: Optional[Project] = Field(None, description='The linked Project.')
    repository: Optional[Repository_aliased] = Field(
        None, description='The linked Repository.'
    )
    typename__: Optional[Literal['LinkRepositoryToProjectPayload']] = Field(
        'LinkRepositoryToProjectPayload', alias='__typename'
    )


class LinkedBranch(Node):
    """
    A branch linked to an issue.
    """

    id: ID_aliased = Field(..., description='The Node ID of the LinkedBranch object')
    ref: Optional[Ref] = Field(None, description="The branch's ref.")
    typename__: Optional[Literal['LinkedBranch']] = Field(
        'LinkedBranch', alias='__typename'
    )


class LinkedBranchConnection(BaseModel):
    """
    A list of branches linked to an issue.
    """

    edges: Optional[List[Optional[LinkedBranchEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[LinkedBranch]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['LinkedBranchConnection']] = Field(
        'LinkedBranchConnection', alias='__typename'
    )


class LinkedBranchEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[LinkedBranch] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['LinkedBranchEdge']] = Field(
        'LinkedBranchEdge', alias='__typename'
    )


class LockLockablePayload(BaseModel):
    """
    Autogenerated return type of LockLockable.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    lockedRecord: Optional[Lockable] = Field(
        None, description='The item that was locked.'
    )
    typename__: Optional[Literal['LockLockablePayload']] = Field(
        'LockLockablePayload', alias='__typename'
    )


class LockedEvent(Node):
    """
    Represents a 'locked' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the LockedEvent object')
    lockReason: Optional[LockReason] = Field(
        None, description='Reason that the conversation was locked (optional).'
    )
    lockable: Lockable = Field(..., description='Object that was locked.')
    typename__: Optional[Literal['LockedEvent']] = Field(
        'LockedEvent', alias='__typename'
    )


class Mannequin(Actor, Node, UniformResourceLocatable):
    """
    A placeholder user for attribution of imported data on GitHub.
    """

    avatarUrl: URI = Field(
        ..., description="A URL pointing to the GitHub App's public avatar."
    )
    claimant: Optional[User_aliased] = Field(
        None,
        description='The user that has claimed the data attributed to this mannequin.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    email: Optional[String] = Field(
        None, description="The mannequin's email on the source instance."
    )
    id: ID_aliased = Field(..., description='The Node ID of the Mannequin object')
    login: String = Field(..., description='The username of the actor.')
    resourcePath: URI = Field(..., description='The HTML path to this resource.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The URL to this resource.')
    typename__: Optional[Literal['Mannequin']] = Field('Mannequin', alias='__typename')


class MannequinConnection(BaseModel):
    """
    A list of mannequins.
    """

    edges: Optional[List[Optional[MannequinEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Mannequin]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['MannequinConnection']] = Field(
        'MannequinConnection', alias='__typename'
    )


class MannequinEdge(BaseModel):
    """
    Represents a mannequin.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Mannequin_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['MannequinEdge']] = Field(
        'MannequinEdge', alias='__typename'
    )


class MarkDiscussionCommentAsAnswerPayload(BaseModel):
    """
    Autogenerated return type of MarkDiscussionCommentAsAnswer.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that includes the chosen comment.'
    )
    typename__: Optional[Literal['MarkDiscussionCommentAsAnswerPayload']] = Field(
        'MarkDiscussionCommentAsAnswerPayload', alias='__typename'
    )


class MarkFileAsViewedPayload(BaseModel):
    """
    Autogenerated return type of MarkFileAsViewed.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The updated pull request.'
    )
    typename__: Optional[Literal['MarkFileAsViewedPayload']] = Field(
        'MarkFileAsViewedPayload', alias='__typename'
    )


class MarkProjectV2AsTemplatePayload(BaseModel):
    """
    Autogenerated return type of MarkProjectV2AsTemplate.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(None, description='The project.')
    typename__: Optional[Literal['MarkProjectV2AsTemplatePayload']] = Field(
        'MarkProjectV2AsTemplatePayload', alias='__typename'
    )


class MarkPullRequestReadyForReviewPayload(BaseModel):
    """
    Autogenerated return type of MarkPullRequestReadyForReview.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that is ready for review.'
    )
    typename__: Optional[Literal['MarkPullRequestReadyForReviewPayload']] = Field(
        'MarkPullRequestReadyForReviewPayload', alias='__typename'
    )


class MarkedAsDuplicateEvent(Node):
    """
    Represents a 'marked_as_duplicate' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    canonical: Optional[IssueOrPullRequest] = Field(
        None,
        description='The authoritative issue or pull request which has been duplicated by another.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    duplicate: Optional[IssueOrPullRequest] = Field(
        None,
        description='The issue or pull request which has been marked as a duplicate of another.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the MarkedAsDuplicateEvent object'
    )
    isCrossRepository: Boolean = Field(
        ..., description='Canonical and duplicate belong to different repositories.'
    )
    typename__: Optional[Literal['MarkedAsDuplicateEvent']] = Field(
        'MarkedAsDuplicateEvent', alias='__typename'
    )


class MarketplaceCategory(Node):
    """
    A public description of a Marketplace category.
    """

    description: Optional[String] = Field(
        None, description="The category's description."
    )
    howItWorks: Optional[String] = Field(
        None,
        description='The technical description of how apps listed in this category work with GitHub.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the MarketplaceCategory object'
    )
    name: String = Field(..., description="The category's name.")
    primaryListingCount: Int = Field(
        ...,
        description='How many Marketplace listings have this as their primary category.',
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for this Marketplace category.'
    )
    secondaryListingCount: Int = Field(
        ...,
        description='How many Marketplace listings have this as their secondary category.',
    )
    slug: String = Field(
        ..., description='The short name of the category used in its URL.'
    )
    url: URI = Field(..., description='The HTTP URL for this Marketplace category.')
    typename__: Optional[Literal['MarketplaceCategory']] = Field(
        'MarketplaceCategory', alias='__typename'
    )


class MarketplaceListing(Node):
    """
    A listing in the GitHub integration marketplace.
    """

    app: Optional[App_aliased] = Field(
        None, description='The GitHub App this listing represents.'
    )
    companyUrl: Optional[URI] = Field(
        None, description="URL to the listing owner's company site."
    )
    configurationResourcePath: URI = Field(
        ...,
        description="The HTTP path for configuring access to the listing's integration or OAuth app",
    )
    configurationUrl: URI = Field(
        ...,
        description="The HTTP URL for configuring access to the listing's integration or OAuth app",
    )
    documentationUrl: Optional[URI] = Field(
        None, description="URL to the listing's documentation."
    )
    extendedDescription: Optional[String] = Field(
        None, description="The listing's detailed description."
    )
    extendedDescriptionHTML: HTML = Field(
        ..., description="The listing's detailed description rendered to HTML."
    )
    fullDescription: String = Field(
        ..., description="The listing's introductory description."
    )
    fullDescriptionHTML: HTML = Field(
        ..., description="The listing's introductory description rendered to HTML."
    )
    hasPublishedFreeTrialPlans: Boolean = Field(
        ..., description='Does this listing have any plans with a free trial?'
    )
    hasTermsOfService: Boolean = Field(
        ..., description='Does this listing have a terms of service link?'
    )
    hasVerifiedOwner: Boolean = Field(
        ..., description='Whether the creator of the app is a verified org'
    )
    howItWorks: Optional[String] = Field(
        None, description='A technical description of how this app works with GitHub.'
    )
    howItWorksHTML: HTML = Field(
        ..., description="The listing's technical description rendered to HTML."
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the MarketplaceListing object'
    )
    installationUrl: Optional[URI] = Field(
        None,
        description="URL to install the product to the viewer's account or organization.",
    )
    installedForViewer: Boolean = Field(
        ...,
        description="Whether this listing's app has been installed for the current viewer",
    )
    isArchived: Boolean = Field(
        ..., description='Whether this listing has been removed from the Marketplace.'
    )
    isDraft: Boolean = Field(
        ...,
        description='Whether this listing is still an editable draft that has not been submitted\nfor review and is not publicly visible in the Marketplace.',
    )
    isPaid: Boolean = Field(
        ...,
        description='Whether the product this listing represents is available as part of a paid plan.',
    )
    isPublic: Boolean = Field(
        ...,
        description='Whether this listing has been approved for display in the Marketplace.',
    )
    isRejected: Boolean = Field(
        ...,
        description='Whether this listing has been rejected by GitHub for display in the Marketplace.',
    )
    isUnverified: Boolean = Field(
        ...,
        description='Whether this listing has been approved for unverified display in the Marketplace.',
    )
    isUnverifiedPending: Boolean = Field(
        ...,
        description='Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.',
    )
    isVerificationPendingFromDraft: Boolean = Field(
        ...,
        description='Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.',
    )
    isVerificationPendingFromUnverified: Boolean = Field(
        ...,
        description='Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.',
    )
    isVerified: Boolean = Field(
        ...,
        description='Whether this listing has been approved for verified display in the Marketplace.',
    )
    logoBackgroundColor: String = Field(
        ...,
        description="The hex color code, without the leading '#', for the logo background.",
    )
    logoUrl: Optional[URI] = Field(
        None, description="URL for the listing's logo image."
    )
    name: String = Field(..., description="The listing's full name.")
    normalizedShortDescription: String = Field(
        ...,
        description="The listing's very short description without a trailing period or ampersands.",
    )
    pricingUrl: Optional[URI] = Field(
        None, description="URL to the listing's detailed pricing."
    )
    primaryCategory: MarketplaceCategory = Field(
        ..., description='The category that best describes the listing.'
    )
    privacyPolicyUrl: URI = Field(
        ...,
        description="URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.",
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for the Marketplace listing.'
    )
    screenshotUrls: List[Optional[String]] = Field(
        ..., description="The URLs for the listing's screenshots."
    )
    secondaryCategory: Optional[MarketplaceCategory] = Field(
        None, description='An alternate category that describes the listing.'
    )
    shortDescription: String = Field(
        ..., description="The listing's very short description."
    )
    slug: String = Field(
        ..., description='The short name of the listing used in its URL.'
    )
    statusUrl: Optional[URI] = Field(
        None, description="URL to the listing's status page."
    )
    supportEmail: Optional[String] = Field(
        None, description="An email address for support for this listing's app."
    )
    supportUrl: URI = Field(
        ...,
        description="Either a URL or an email address for support for this listing's app, may\nreturn an empty string for listings that do not require a support URL.",
    )
    termsOfServiceUrl: Optional[URI] = Field(
        None, description="URL to the listing's terms of service."
    )
    url: URI = Field(..., description='The HTTP URL for the Marketplace listing.')
    viewerCanAddPlans: Boolean = Field(
        ...,
        description='Can the current viewer add plans for this Marketplace listing.',
    )
    viewerCanApprove: Boolean = Field(
        ..., description='Can the current viewer approve this Marketplace listing.'
    )
    viewerCanDelist: Boolean = Field(
        ..., description='Can the current viewer delist this Marketplace listing.'
    )
    viewerCanEdit: Boolean = Field(
        ..., description='Can the current viewer edit this Marketplace listing.'
    )
    viewerCanEditCategories: Boolean = Field(
        ...,
        description='Can the current viewer edit the primary and secondary category of this\nMarketplace listing.',
    )
    viewerCanEditPlans: Boolean = Field(
        ...,
        description='Can the current viewer edit the plans for this Marketplace listing.',
    )
    viewerCanRedraft: Boolean = Field(
        ...,
        description='Can the current viewer return this Marketplace listing to draft state\nso it becomes editable again.',
    )
    viewerCanReject: Boolean = Field(
        ...,
        description='Can the current viewer reject this Marketplace listing by returning it to\nan editable draft state or rejecting it entirely.',
    )
    viewerCanRequestApproval: Boolean = Field(
        ...,
        description='Can the current viewer request this listing be reviewed for display in\nthe Marketplace as verified.',
    )
    viewerHasPurchased: Boolean = Field(
        ...,
        description='Indicates whether the current user has an active subscription to this Marketplace listing.',
    )
    viewerHasPurchasedForAllOrganizations: Boolean = Field(
        ...,
        description='Indicates if the current user has purchased a subscription to this Marketplace listing\nfor all of the organizations the user owns.',
    )
    viewerIsListingAdmin: Boolean = Field(
        ...,
        description='Does the current viewer role allow them to administer this Marketplace listing.',
    )
    typename__: Optional[Literal['MarketplaceListing']] = Field(
        'MarketplaceListing', alias='__typename'
    )


class MarketplaceListingConnection(BaseModel):
    """
    Look up Marketplace Listings
    """

    edges: Optional[List[Optional[MarketplaceListingEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[MarketplaceListing]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['MarketplaceListingConnection']] = Field(
        'MarketplaceListingConnection', alias='__typename'
    )


class MarketplaceListingEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[MarketplaceListing_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['MarketplaceListingEdge']] = Field(
        'MarketplaceListingEdge', alias='__typename'
    )


class MaxFilePathLengthParameters(BaseModel):
    """
    Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
    """

    maxFilePathLength: Int = Field(
        ..., description='The maximum amount of characters allowed in file paths.'
    )
    typename__: Optional[Literal['MaxFilePathLengthParameters']] = Field(
        'MaxFilePathLengthParameters', alias='__typename'
    )


class MaxFileSizeParameters(BaseModel):
    """
    Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
    """

    maxFileSize: Int = Field(
        ...,
        description='The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).',
    )
    typename__: Optional[Literal['MaxFileSizeParameters']] = Field(
        'MaxFileSizeParameters', alias='__typename'
    )


class MemberFeatureRequestNotification(Node):
    """
    Represents a member feature request notification
    """

    body: String = Field(
        ...,
        description='Represents member feature request body containing entity name and the number of feature requests',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the MemberFeatureRequestNotification object'
    )
    title: String = Field(
        ..., description='Represents member feature request notification title'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['MemberFeatureRequestNotification']] = Field(
        'MemberFeatureRequestNotification', alias='__typename'
    )


class MembersCanDeleteReposClearAuditEntry(
    AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a members_can_delete_repos.clear event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the MembersCanDeleteReposClearAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['MembersCanDeleteReposClearAuditEntry']] = Field(
        'MembersCanDeleteReposClearAuditEntry', alias='__typename'
    )


class MembersCanDeleteReposDisableAuditEntry(
    AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a members_can_delete_repos.disable event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the MembersCanDeleteReposDisableAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['MembersCanDeleteReposDisableAuditEntry']] = Field(
        'MembersCanDeleteReposDisableAuditEntry', alias='__typename'
    )


class MembersCanDeleteReposEnableAuditEntry(
    AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a members_can_delete_repos.enable event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the MembersCanDeleteReposEnableAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['MembersCanDeleteReposEnableAuditEntry']] = Field(
        'MembersCanDeleteReposEnableAuditEntry', alias='__typename'
    )


class MentionedEvent(Node):
    """
    Represents a 'mentioned' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the MentionedEvent object')
    typename__: Optional[Literal['MentionedEvent']] = Field(
        'MentionedEvent', alias='__typename'
    )


class MergeBranchPayload(BaseModel):
    """
    Autogenerated return type of MergeBranch.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    mergeCommit: Optional[Commit_aliased] = Field(
        None, description='The resulting merge Commit.'
    )
    typename__: Optional[Literal['MergeBranchPayload']] = Field(
        'MergeBranchPayload', alias='__typename'
    )


class MergePullRequestPayload(BaseModel):
    """
    Autogenerated return type of MergePullRequest.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that was merged.'
    )
    typename__: Optional[Literal['MergePullRequestPayload']] = Field(
        'MergePullRequestPayload', alias='__typename'
    )


class MergeQueue(Node):
    """
    The queue of pull request entries to be merged into a protected branch in a repository.
    """

    configuration: Optional[MergeQueueConfiguration] = Field(
        None, description='The configuration for this merge queue'
    )
    entries: Optional[MergeQueueEntryConnection] = Field(
        None, description='The entries in the queue'
    )
    id: ID_aliased = Field(..., description='The Node ID of the MergeQueue object')
    nextEntryEstimatedTimeToMerge: Optional[Int] = Field(
        None,
        description='The estimated time in seconds until a newly added entry would be merged',
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository this merge queue belongs to'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this merge queue')
    url: URI = Field(..., description='The HTTP URL for this merge queue')
    typename__: Optional[Literal['MergeQueue']] = Field(
        'MergeQueue', alias='__typename'
    )


class MergeQueueConfiguration(BaseModel):
    """
    Configuration for a MergeQueue
    """

    checkResponseTimeout: Optional[Int] = Field(
        None,
        description='The amount of time in minutes to wait for a check response before considering it a failure.',
    )
    maximumEntriesToBuild: Optional[Int] = Field(
        None, description='The maximum number of entries to build at once.'
    )
    maximumEntriesToMerge: Optional[Int] = Field(
        None, description='The maximum number of entries to merge at once.'
    )
    mergeMethod: Optional[PullRequestMergeMethod] = Field(
        None, description='The merge method to use for this queue.'
    )
    mergingStrategy: Optional[MergeQueueMergingStrategy] = Field(
        None, description='The strategy to use when merging entries.'
    )
    minimumEntriesToMerge: Optional[Int] = Field(
        None, description='The minimum number of entries required to merge at once.'
    )
    minimumEntriesToMergeWaitTime: Optional[Int] = Field(
        None,
        description='The amount of time in minutes to wait before ignoring the minumum number of\nentries in the queue requirement and merging a collection of entries',
    )
    typename__: Optional[Literal['MergeQueueConfiguration']] = Field(
        'MergeQueueConfiguration', alias='__typename'
    )


class MergeQueueEntry(Node):
    """
    Entries in a MergeQueue
    """

    baseCommit: Optional[Commit_aliased] = Field(
        None, description='The base commit for this entry'
    )
    enqueuedAt: DateTime = Field(
        ..., description='The date and time this entry was added to the merge queue'
    )
    enqueuer: Actor = Field(..., description='The actor that enqueued this entry')
    estimatedTimeToMerge: Optional[Int] = Field(
        None,
        description='The estimated time in seconds until this entry will be merged',
    )
    headCommit: Optional[Commit_aliased] = Field(
        None, description='The head commit for this entry'
    )
    id: ID_aliased = Field(..., description='The Node ID of the MergeQueueEntry object')
    jump: Boolean = Field(
        ..., description='Whether this pull request should jump the queue'
    )
    mergeQueue: Optional[MergeQueue] = Field(
        None, description='The merge queue that this entry belongs to'
    )
    position: Int = Field(..., description='The position of this entry in the queue')
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that will be added to a merge group'
    )
    solo: Boolean = Field(
        ..., description='Does this pull request need to be deployed on its own'
    )
    state: MergeQueueEntryState = Field(
        ..., description='The state of this entry in the queue'
    )
    typename__: Optional[Literal['MergeQueueEntry']] = Field(
        'MergeQueueEntry', alias='__typename'
    )


class MergeQueueEntryConnection(BaseModel):
    """
    The connection type for MergeQueueEntry.
    """

    edges: Optional[List[Optional[MergeQueueEntryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[MergeQueueEntry]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['MergeQueueEntryConnection']] = Field(
        'MergeQueueEntryConnection', alias='__typename'
    )


class MergeQueueEntryEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[MergeQueueEntry] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['MergeQueueEntryEdge']] = Field(
        'MergeQueueEntryEdge', alias='__typename'
    )


class MergeQueueParameters(BaseModel):
    """
    Merges must be performed via a merge queue.
    """

    checkResponseTimeoutMinutes: Int = Field(
        ...,
        description='Maximum time for a required status check to report a conclusion. After this\nmuch time has elapsed, checks that have not reported a conclusion will be\nassumed to have failed',
    )
    groupingStrategy: MergeQueueGroupingStrategy = Field(
        ...,
        description='When set to ALLGREEN, the merge commit created by merge queue for each PR in\nthe group must pass all required checks to merge. When set to HEADGREEN, only\nthe commit at the head of the merge group, i.e. the commit containing changes\nfrom all of the PRs in the group, must pass its required checks to merge.',
    )
    maxEntriesToBuild: Int = Field(
        ...,
        description='Limit the number of queued pull requests requesting checks and workflow runs at the same time.',
    )
    maxEntriesToMerge: Int = Field(
        ...,
        description='The maximum number of PRs that will be merged together in a group.',
    )
    mergeMethod: MergeQueueMergeMethod = Field(
        ..., description='Method to use when merging changes from queued pull requests.'
    )
    minEntriesToMerge: Int = Field(
        ...,
        description='The minimum number of PRs that will be merged together in a group.',
    )
    minEntriesToMergeWaitMinutes: Int = Field(
        ...,
        description='The time merge queue should wait after the first PR is added to the queue for\nthe minimum group size to be met. After this time has elapsed, the minimum\ngroup size will be ignored and a smaller group will be merged.',
    )
    typename__: Optional[Literal['MergeQueueParameters']] = Field(
        'MergeQueueParameters', alias='__typename'
    )


class MergedEvent(Node, UniformResourceLocatable):
    """
    Represents a 'merged' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    commit: Optional[Commit_aliased] = Field(
        None, description='Identifies the commit associated with the `merge` event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the MergedEvent object')
    mergeRef: Optional[Ref] = Field(
        None, description='Identifies the Ref associated with the `merge` event.'
    )
    mergeRefName: String = Field(
        ...,
        description='Identifies the name of the Ref associated with the `merge` event.',
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this merged event.')
    url: URI = Field(..., description='The HTTP URL for this merged event.')
    typename__: Optional[Literal['MergedEvent']] = Field(
        'MergedEvent', alias='__typename'
    )


class MigrationSource(Node):
    """
    A GitHub Enterprise Importer (GEI) migration source.
    """

    id: ID_aliased = Field(..., description='The Node ID of the MigrationSource object')
    name: String = Field(..., description='The migration source name.')
    type: MigrationSourceType = Field(..., description='The migration source type.')
    url: URI = Field(
        ...,
        description='The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.',
    )
    typename__: Optional[Literal['MigrationSource']] = Field(
        'MigrationSource', alias='__typename'
    )


class Milestone(Closable, Node, UniformResourceLocatable):
    """
    Represents a Milestone object on a given repository.
    """

    closed: Boolean = Field(
        ...,
        description='Indicates if the object is closed (definition of closed may depend on type)',
    )
    closedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was closed.'
    )
    closedIssueCount: Int = Field(
        ...,
        description='Identifies the number of closed issues associated with the milestone.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='Identifies the actor who created the milestone.'
    )
    description: Optional[String] = Field(
        None, description='Identifies the description of the milestone.'
    )
    descriptionHTML: Optional[String] = Field(
        None,
        description='The HTML rendered description of the milestone using GitHub Flavored Markdown.',
    )
    dueOn: Optional[DateTime] = Field(
        None, description='Identifies the due date of the milestone.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Milestone object')
    issues: IssueConnection = Field(
        ..., description='A list of issues associated with the milestone.'
    )
    number: Int = Field(..., description='Identifies the number of the milestone.')
    openIssueCount: Int = Field(
        ...,
        description='Identifies the number of open issues associated with the milestone.',
    )
    progressPercentage: Float = Field(
        ..., description='Identifies the percentage complete for the milestone'
    )
    pullRequests: PullRequestConnection = Field(
        ..., description='A list of pull requests associated with the milestone.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this milestone.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this milestone')
    state: MilestoneState = Field(
        ..., description='Identifies the state of the milestone.'
    )
    title: String = Field(..., description='Identifies the title of the milestone.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this milestone')
    viewerCanClose: Boolean = Field(
        ..., description='Indicates if the object can be closed by the viewer.'
    )
    viewerCanReopen: Boolean = Field(
        ..., description='Indicates if the object can be reopened by the viewer.'
    )
    typename__: Optional[Literal['Milestone']] = Field('Milestone', alias='__typename')


class MilestoneConnection(BaseModel):
    """
    The connection type for Milestone.
    """

    edges: Optional[List[Optional[MilestoneEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Milestone]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['MilestoneConnection']] = Field(
        'MilestoneConnection', alias='__typename'
    )


class MilestoneEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Milestone] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['MilestoneEdge']] = Field(
        'MilestoneEdge', alias='__typename'
    )


class MilestonedEvent(Node):
    """
    Represents a 'milestoned' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the MilestonedEvent object')
    milestoneTitle: String = Field(
        ...,
        description="Identifies the milestone title associated with the 'milestoned' event.",
    )
    subject: MilestoneItem = Field(..., description='Object referenced by event.')
    typename__: Optional[Literal['MilestonedEvent']] = Field(
        'MilestonedEvent', alias='__typename'
    )


class MinimizeCommentPayload(BaseModel):
    """
    Autogenerated return type of MinimizeComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    minimizedComment: Optional[Minimizable] = Field(
        None, description='The comment that was minimized.'
    )
    typename__: Optional[Literal['MinimizeCommentPayload']] = Field(
        'MinimizeCommentPayload', alias='__typename'
    )


class MoveProjectCardPayload(BaseModel):
    """
    Autogenerated return type of MoveProjectCard.
    """

    cardEdge: Optional[ProjectCardEdge] = Field(
        None, description='The new edge of the moved card.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['MoveProjectCardPayload']] = Field(
        'MoveProjectCardPayload', alias='__typename'
    )


class MoveProjectColumnPayload(BaseModel):
    """
    Autogenerated return type of MoveProjectColumn.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    columnEdge: Optional[ProjectColumnEdge] = Field(
        None, description='The new edge of the moved column.'
    )
    typename__: Optional[Literal['MoveProjectColumnPayload']] = Field(
        'MoveProjectColumnPayload', alias='__typename'
    )


class MovedColumnsInProjectEvent(Node):
    """
    Represents a 'moved_columns_in_project' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the MovedColumnsInProjectEvent object'
    )
    previousProjectColumnName: String = Field(
        ..., description='Column name the issue or pull request was moved from.'
    )
    project: Optional[Project] = Field(None, description='Project referenced by event.')
    projectCard: Optional[ProjectCard] = Field(
        None, description='Project card referenced by this project event.'
    )
    projectColumnName: String = Field(
        ..., description='Column name the issue or pull request was moved to.'
    )
    typename__: Optional[Literal['MovedColumnsInProjectEvent']] = Field(
        'MovedColumnsInProjectEvent', alias='__typename'
    )


class OIDCProvider(Node):
    """
    An OIDC identity provider configured to provision identities for an enterprise.
    Visible to enterprise owners or enterprise owners' personal access tokens
    (classic) with read:enterprise or admin:enterprise scope.
    """

    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The enterprise this identity provider belongs to.'
    )
    externalIdentities: ExternalIdentityConnection = Field(
        ..., description='ExternalIdentities provisioned by this identity provider.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the OIDCProvider object')
    providerType: OIDCProviderType = Field(
        ..., description='The OIDC identity provider type'
    )
    tenantId: String = Field(
        ..., description='The id of the tenant this provider is attached to'
    )
    typename__: Optional[Literal['OIDCProvider']] = Field(
        'OIDCProvider', alias='__typename'
    )


class OauthApplicationCreateAuditEntry(
    AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData
):
    """
    Audit log entry for a oauth_application.create event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    applicationUrl: Optional[URI] = Field(
        None, description='The application URL of the OAuth application.'
    )
    callbackUrl: Optional[URI] = Field(
        None, description='The callback URL of the OAuth application.'
    )
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OauthApplicationCreateAuditEntry object'
    )
    oauthApplicationName: Optional[String] = Field(
        None, description='The name of the OAuth application.'
    )
    oauthApplicationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the OAuth application'
    )
    oauthApplicationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the OAuth application'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    rateLimit: Optional[Int] = Field(
        None, description='The rate limit of the OAuth application.'
    )
    state: Optional[OauthApplicationCreateAuditEntryState] = Field(
        None, description='The state of the OAuth application.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OauthApplicationCreateAuditEntry']] = Field(
        'OauthApplicationCreateAuditEntry', alias='__typename'
    )


class OrgAddBillingManagerAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.add_billing_manager
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgAddBillingManagerAuditEntry object'
    )
    invitationEmail: Optional[String] = Field(
        None,
        description='The email address used to invite a billing manager for the organization.',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgAddBillingManagerAuditEntry']] = Field(
        'OrgAddBillingManagerAuditEntry', alias='__typename'
    )


class OrgAddMemberAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.add_member
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgAddMemberAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    permission: Optional[OrgAddMemberAuditEntryPermission] = Field(
        None,
        description='The permission level of the member added to the organization.',
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgAddMemberAuditEntry']] = Field(
        'OrgAddMemberAuditEntry', alias='__typename'
    )


class OrgBlockUserAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.block_user
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    blockedUser: Optional[User_aliased] = Field(None, description='The blocked user.')
    blockedUserName: Optional[String] = Field(
        None, description='The username of the blocked user.'
    )
    blockedUserResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the blocked user.'
    )
    blockedUserUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the blocked user.'
    )
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgBlockUserAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgBlockUserAuditEntry']] = Field(
        'OrgBlockUserAuditEntry', alias='__typename'
    )


class OrgConfigDisableCollaboratorsOnlyAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.config.disable_collaborators_only event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgConfigDisableCollaboratorsOnlyAuditEntry']] = (
        Field('OrgConfigDisableCollaboratorsOnlyAuditEntry', alias='__typename')
    )


class OrgConfigEnableCollaboratorsOnlyAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.config.enable_collaborators_only event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgConfigEnableCollaboratorsOnlyAuditEntry']] = Field(
        'OrgConfigEnableCollaboratorsOnlyAuditEntry', alias='__typename'
    )


class OrgCreateAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.create event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    billingPlan: Optional[OrgCreateAuditEntryBillingPlan] = Field(
        None, description='The billing plan for the Organization.'
    )
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgCreateAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgCreateAuditEntry']] = Field(
        'OrgCreateAuditEntry', alias='__typename'
    )


class OrgDisableOauthAppRestrictionsAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.disable_oauth_app_restrictions event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgDisableOauthAppRestrictionsAuditEntry']] = Field(
        'OrgDisableOauthAppRestrictionsAuditEntry', alias='__typename'
    )


class OrgDisableSamlAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.disable_saml event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    digestMethodUrl: Optional[URI] = Field(
        None, description="The SAML provider's digest algorithm URL."
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgDisableSamlAuditEntry object'
    )
    issuerUrl: Optional[URI] = Field(
        None, description="The SAML provider's issuer URL."
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    signatureMethodUrl: Optional[URI] = Field(
        None, description="The SAML provider's signature algorithm URL."
    )
    singleSignOnUrl: Optional[URI] = Field(
        None, description="The SAML provider's single sign-on URL."
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgDisableSamlAuditEntry']] = Field(
        'OrgDisableSamlAuditEntry', alias='__typename'
    )


class OrgDisableTwoFactorRequirementAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.disable_two_factor_requirement event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgDisableTwoFactorRequirementAuditEntry']] = Field(
        'OrgDisableTwoFactorRequirementAuditEntry', alias='__typename'
    )


class OrgEnableOauthAppRestrictionsAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.enable_oauth_app_restrictions event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgEnableOauthAppRestrictionsAuditEntry']] = Field(
        'OrgEnableOauthAppRestrictionsAuditEntry', alias='__typename'
    )


class OrgEnableSamlAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.enable_saml event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    digestMethodUrl: Optional[URI] = Field(
        None, description="The SAML provider's digest algorithm URL."
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgEnableSamlAuditEntry object'
    )
    issuerUrl: Optional[URI] = Field(
        None, description="The SAML provider's issuer URL."
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    signatureMethodUrl: Optional[URI] = Field(
        None, description="The SAML provider's signature algorithm URL."
    )
    singleSignOnUrl: Optional[URI] = Field(
        None, description="The SAML provider's single sign-on URL."
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgEnableSamlAuditEntry']] = Field(
        'OrgEnableSamlAuditEntry', alias='__typename'
    )


class OrgEnableTwoFactorRequirementAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.enable_two_factor_requirement event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgEnableTwoFactorRequirementAuditEntry']] = Field(
        'OrgEnableTwoFactorRequirementAuditEntry', alias='__typename'
    )


class OrgInviteMemberAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.invite_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    email: Optional[String] = Field(
        None, description='The email address of the organization invitation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgInviteMemberAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationInvitation: Optional[OrganizationInvitation] = Field(
        None, description='The organization invitation.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgInviteMemberAuditEntry']] = Field(
        'OrgInviteMemberAuditEntry', alias='__typename'
    )


class OrgInviteToBusinessAuditEntry(
    AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.invite_to_business event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgInviteToBusinessAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgInviteToBusinessAuditEntry']] = Field(
        'OrgInviteToBusinessAuditEntry', alias='__typename'
    )


class OrgOauthAppAccessApprovedAuditEntry(
    AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.oauth_app_access_approved event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgOauthAppAccessApprovedAuditEntry object'
    )
    oauthApplicationName: Optional[String] = Field(
        None, description='The name of the OAuth application.'
    )
    oauthApplicationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the OAuth application'
    )
    oauthApplicationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the OAuth application'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgOauthAppAccessApprovedAuditEntry']] = Field(
        'OrgOauthAppAccessApprovedAuditEntry', alias='__typename'
    )


class OrgOauthAppAccessBlockedAuditEntry(
    AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.oauth_app_access_blocked event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgOauthAppAccessBlockedAuditEntry object'
    )
    oauthApplicationName: Optional[String] = Field(
        None, description='The name of the OAuth application.'
    )
    oauthApplicationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the OAuth application'
    )
    oauthApplicationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the OAuth application'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgOauthAppAccessBlockedAuditEntry']] = Field(
        'OrgOauthAppAccessBlockedAuditEntry', alias='__typename'
    )


class OrgOauthAppAccessDeniedAuditEntry(
    AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.oauth_app_access_denied event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgOauthAppAccessDeniedAuditEntry object'
    )
    oauthApplicationName: Optional[String] = Field(
        None, description='The name of the OAuth application.'
    )
    oauthApplicationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the OAuth application'
    )
    oauthApplicationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the OAuth application'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgOauthAppAccessDeniedAuditEntry']] = Field(
        'OrgOauthAppAccessDeniedAuditEntry', alias='__typename'
    )


class OrgOauthAppAccessRequestedAuditEntry(
    AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.oauth_app_access_requested event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgOauthAppAccessRequestedAuditEntry object',
    )
    oauthApplicationName: Optional[String] = Field(
        None, description='The name of the OAuth application.'
    )
    oauthApplicationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the OAuth application'
    )
    oauthApplicationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the OAuth application'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgOauthAppAccessRequestedAuditEntry']] = Field(
        'OrgOauthAppAccessRequestedAuditEntry', alias='__typename'
    )


class OrgOauthAppAccessUnblockedAuditEntry(
    AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.oauth_app_access_unblocked event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object',
    )
    oauthApplicationName: Optional[String] = Field(
        None, description='The name of the OAuth application.'
    )
    oauthApplicationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the OAuth application'
    )
    oauthApplicationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the OAuth application'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgOauthAppAccessUnblockedAuditEntry']] = Field(
        'OrgOauthAppAccessUnblockedAuditEntry', alias='__typename'
    )


class OrgRemoveBillingManagerAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.remove_billing_manager event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgRemoveBillingManagerAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    reason: Optional[OrgRemoveBillingManagerAuditEntryReason] = Field(
        None, description='The reason for the billing manager being removed.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgRemoveBillingManagerAuditEntry']] = Field(
        'OrgRemoveBillingManagerAuditEntry', alias='__typename'
    )


class OrgRemoveMemberAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.remove_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgRemoveMemberAuditEntry object'
    )
    membershipTypes: Optional[List[OrgRemoveMemberAuditEntryMembershipType]] = Field(
        None,
        description='The types of membership the member has with the organization.',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    reason: Optional[OrgRemoveMemberAuditEntryReason] = Field(
        None, description='The reason for the member being removed.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgRemoveMemberAuditEntry']] = Field(
        'OrgRemoveMemberAuditEntry', alias='__typename'
    )


class OrgRemoveOutsideCollaboratorAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.remove_outside_collaborator event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object',
    )
    membershipTypes: Optional[
        List[OrgRemoveOutsideCollaboratorAuditEntryMembershipType]
    ] = Field(
        None,
        description='The types of membership the outside collaborator has with the organization.',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    reason: Optional[OrgRemoveOutsideCollaboratorAuditEntryReason] = Field(
        None,
        description='The reason for the outside collaborator being removed from the Organization.',
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgRemoveOutsideCollaboratorAuditEntry']] = Field(
        'OrgRemoveOutsideCollaboratorAuditEntry', alias='__typename'
    )


class OrgRestoreMemberAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.restore_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgRestoreMemberAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    restoredCustomEmailRoutingsCount: Optional[Int] = Field(
        None, description='The number of custom email routings for the restored member.'
    )
    restoredIssueAssignmentsCount: Optional[Int] = Field(
        None, description='The number of issue assignments for the restored member.'
    )
    restoredMemberships: Optional[List[OrgRestoreMemberAuditEntryMembership]] = Field(
        None, description='Restored organization membership objects.'
    )
    restoredMembershipsCount: Optional[Int] = Field(
        None, description='The number of restored memberships.'
    )
    restoredRepositoriesCount: Optional[Int] = Field(
        None, description='The number of repositories of the restored member.'
    )
    restoredRepositoryStarsCount: Optional[Int] = Field(
        None, description='The number of starred repositories for the restored member.'
    )
    restoredRepositoryWatchesCount: Optional[Int] = Field(
        None, description='The number of watched repositories for the restored member.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgRestoreMemberAuditEntry']] = Field(
        'OrgRestoreMemberAuditEntry', alias='__typename'
    )


class OrgRestoreMemberMembershipOrganizationAuditEntryData(OrganizationAuditEntryData):
    """
    Metadata for an organization membership for org.restore_member actions
    """

    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    typename__: Optional[
        Literal['OrgRestoreMemberMembershipOrganizationAuditEntryData']
    ] = Field(
        'OrgRestoreMemberMembershipOrganizationAuditEntryData', alias='__typename'
    )


class OrgRestoreMemberMembershipRepositoryAuditEntryData(RepositoryAuditEntryData):
    """
    Metadata for a repository membership for org.restore_member actions
    """

    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    typename__: Optional[
        Literal['OrgRestoreMemberMembershipRepositoryAuditEntryData']
    ] = Field('OrgRestoreMemberMembershipRepositoryAuditEntryData', alias='__typename')


class OrgRestoreMemberMembershipTeamAuditEntryData(TeamAuditEntryData):
    """
    Metadata for a team membership for org.restore_member actions
    """

    team: Optional[Team_aliased] = Field(
        None, description='The team associated with the action'
    )
    teamName: Optional[String] = Field(None, description='The name of the team')
    teamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this team'
    )
    teamUrl: Optional[URI] = Field(None, description='The HTTP URL for this team')
    typename__: Optional[Literal['OrgRestoreMemberMembershipTeamAuditEntryData']] = (
        Field('OrgRestoreMemberMembershipTeamAuditEntryData', alias='__typename')
    )


class OrgUnblockUserAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.unblock_user
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    blockedUser: Optional[User_aliased] = Field(
        None, description='The user being unblocked by the organization.'
    )
    blockedUserName: Optional[String] = Field(
        None, description='The username of the blocked user.'
    )
    blockedUserResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the blocked user.'
    )
    blockedUserUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the blocked user.'
    )
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgUnblockUserAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgUnblockUserAuditEntry']] = Field(
        'OrgUnblockUserAuditEntry', alias='__typename'
    )


class OrgUpdateDefaultRepositoryPermissionAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.update_default_repository_permission
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    permission: Optional[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission] = (
        Field(
            None,
            description='The new base repository permission level for the organization.',
        )
    )
    permissionWas: Optional[
        OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
    ] = Field(
        None,
        description='The former base repository permission level for the organization.',
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgUpdateDefaultRepositoryPermissionAuditEntry']] = (
        Field('OrgUpdateDefaultRepositoryPermissionAuditEntry', alias='__typename')
    )


class OrgUpdateMemberAuditEntry(AuditEntry, Node, OrganizationAuditEntryData):
    """
    Audit log entry for a org.update_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrgUpdateMemberAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    permission: Optional[OrgUpdateMemberAuditEntryPermission] = Field(
        None, description='The new member permission level for the organization.'
    )
    permissionWas: Optional[OrgUpdateMemberAuditEntryPermission] = Field(
        None, description='The former member permission level for the organization.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['OrgUpdateMemberAuditEntry']] = Field(
        'OrgUpdateMemberAuditEntry', alias='__typename'
    )


class OrgUpdateMemberRepositoryCreationPermissionAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.update_member_repository_creation_permission event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    canCreateRepositories: Optional[Boolean] = Field(
        None, description='Can members create repositories in the organization.'
    )
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    visibility: Optional[
        OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
    ] = Field(
        None,
        description='The permission for visibility level of repositories for this organization.',
    )
    typename__: Optional[
        Literal['OrgUpdateMemberRepositoryCreationPermissionAuditEntry']
    ] = Field(
        'OrgUpdateMemberRepositoryCreationPermissionAuditEntry', alias='__typename'
    )


class OrgUpdateMemberRepositoryInvitationPermissionAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a org.update_member_repository_invitation_permission event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    canInviteOutsideCollaboratorsToRepositories: Optional[Boolean] = Field(
        None,
        description='Can outside collaborators be invited to repositories in the organization.',
    )
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[
        Literal['OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']
    ] = Field(
        'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry', alias='__typename'
    )


class Organization(
    Actor,
    MemberStatusable,
    Node,
    PackageOwner,
    ProfileOwner,
    ProjectOwner,
    ProjectV2Owner,
    ProjectV2Recent,
    RepositoryDiscussionAuthor,
    RepositoryDiscussionCommentAuthor,
    RepositoryOwner,
    Sponsorable,
    UniformResourceLocatable,
):
    """
    An account on GitHub, with one or more owners, that has repositories, members and teams.
    """

    announcementBanner: Optional[AnnouncementBanner] = Field(
        None,
        description="The announcement banner set on this organization, if any. Only visible to members of the organization's enterprise.",
    )
    anyPinnableItems: Boolean = Field(
        ...,
        description='Determine if this repository owner has any items that can be pinned to their profile.',
    )
    archivedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the organization was archived.',
    )
    auditLog: OrganizationAuditEntryConnection = Field(
        ..., description='Audit log entries of the organization'
    )
    avatarUrl: URI = Field(
        ..., description="A URL pointing to the organization's public avatar."
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: Optional[String] = Field(
        None, description="The organization's public profile description."
    )
    descriptionHTML: Optional[String] = Field(
        None,
        description="The organization's public profile description rendered to HTML.",
    )
    domains: Optional[VerifiableDomainConnection] = Field(
        None, description='A list of domains owned by the organization.'
    )
    email: Optional[String] = Field(
        None, description="The organization's public email."
    )
    enterpriseOwners: OrganizationEnterpriseOwnerConnection = Field(
        ..., description="A list of owners of the organization's enterprise account."
    )
    estimatedNextSponsorsPayoutInCents: Int = Field(
        ...,
        description='The estimated next GitHub Sponsors payout for this user/organization in cents (USD).',
    )
    hasSponsorsListing: Boolean = Field(
        ..., description='True if this user/organization has a GitHub Sponsors listing.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Organization object')
    interactionAbility: Optional[RepositoryInteractionAbility] = Field(
        None, description='The interaction ability settings for this organization.'
    )
    ipAllowListEnabledSetting: IpAllowListEnabledSettingValue = Field(
        ...,
        description='The setting value for whether the organization has an IP allow list enabled.',
    )
    ipAllowListEntries: IpAllowListEntryConnection = Field(
        ...,
        description='The IP addresses that are allowed to access resources owned by the organization.',
    )
    ipAllowListForInstalledAppsEnabledSetting: (
        IpAllowListForInstalledAppsEnabledSettingValue
    ) = Field(
        ...,
        description='The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.',
    )
    isSponsoredBy: Boolean = Field(
        ...,
        description='Whether the given account is sponsoring this user/organization.',
    )
    isSponsoringViewer: Boolean = Field(
        ..., description='True if the viewer is sponsored by this user/organization.'
    )
    isVerified: Boolean = Field(
        ...,
        description='Whether the organization has verified its profile email and website.',
    )
    issueTypes: Optional[IssueTypeConnection] = Field(
        None, description="A list of the organization's issue types"
    )
    itemShowcase: ProfileItemShowcase = Field(
        ...,
        description='Showcases a selection of repositories and gists that the profile owner has\neither curated or that have been selected automatically based on popularity.',
    )
    lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection = Field(
        ...,
        description='Calculate how much each sponsor has ever paid total to this maintainer via\nGitHub Sponsors. Does not include sponsorships paid via Patreon.',
    )
    location: Optional[String] = Field(
        None, description="The organization's public profile location."
    )
    login: String = Field(..., description="The organization's login name.")
    mannequins: MannequinConnection = Field(
        ..., description='A list of all mannequins for this organization.'
    )
    memberStatuses: UserStatusConnection = Field(
        ...,
        description='Get the status messages members of this entity have set that are either public or visible only to the organization.',
    )
    membersCanForkPrivateRepositories: Boolean = Field(
        ..., description='Members can fork private repositories in this organization'
    )
    membersWithRole: OrganizationMemberConnection = Field(
        ..., description='A list of users who are members of this organization.'
    )
    monthlyEstimatedSponsorsIncomeInCents: Int = Field(
        ...,
        description='The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).',
    )
    name: Optional[String] = Field(
        None, description="The organization's public profile name."
    )
    newTeamResourcePath: URI = Field(
        ..., description='The HTTP path creating a new team'
    )
    newTeamUrl: URI = Field(..., description='The HTTP URL creating a new team')
    notificationDeliveryRestrictionEnabledSetting: (
        NotificationRestrictionSettingValue
    ) = Field(
        ...,
        description='Indicates if email notification delivery for this organization is restricted to verified or approved domains.',
    )
    organizationBillingEmail: Optional[String] = Field(
        None, description='The billing email for the organization.'
    )
    packages: PackageConnection = Field(
        ..., description='A list of packages under the owner.'
    )
    pendingMembers: UserConnection = Field(
        ...,
        description='A list of users who have been invited to join this organization.',
    )
    pinnableItems: PinnableItemConnection = Field(
        ...,
        description='A list of repositories and gists this profile owner can pin to their profile.',
    )
    pinnedItems: PinnableItemConnection = Field(
        ...,
        description='A list of repositories and gists this profile owner has pinned to their profile',
    )
    pinnedItemsRemaining: Int = Field(
        ...,
        description='Returns how many more items this profile owner can pin to their profile.',
    )
    project: Optional[Project] = Field(None, description='Find project by number.')
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='Find a project by number.'
    )
    projects: ProjectConnection = Field(
        ..., description='A list of projects under the owner.'
    )
    projectsResourcePath: URI = Field(
        ..., description="The HTTP path listing organization's projects"
    )
    projectsUrl: URI = Field(
        ..., description="The HTTP URL listing organization's projects"
    )
    projectsV2: ProjectV2Connection = Field(
        ..., description='A list of projects under the owner.'
    )
    recentProjects: ProjectV2Connection = Field(
        ...,
        description='Recent projects that this user has modified in the context of the owner.',
    )
    repositories: RepositoryConnection = Field(
        ..., description='A list of repositories that the user owns.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='Find Repository.'
    )
    repositoryDiscussionComments: DiscussionCommentConnection = Field(
        ..., description='Discussion comments this user has authored.'
    )
    repositoryDiscussions: DiscussionConnection = Field(
        ..., description='Discussions this user has started.'
    )
    repositoryMigrations: RepositoryMigrationConnection = Field(
        ..., description='A list of all repository migrations for this organization.'
    )
    requiresTwoFactorAuthentication: Optional[Boolean] = Field(
        None,
        description='When true the organization requires all members, billing managers, and outside\ncollaborators to enable two-factor authentication.',
    )
    resourcePath: URI = Field(..., description='The HTTP path for this organization.')
    ruleset: Optional[RepositoryRuleset] = Field(
        None,
        description='Returns a single ruleset from the current organization by ID.',
    )
    rulesets: Optional[RepositoryRulesetConnection] = Field(
        None, description='A list of rulesets for this organization.'
    )
    samlIdentityProvider: Optional[OrganizationIdentityProvider] = Field(
        None,
        description="The Organization's SAML identity provider. Visible to (1) organization owners,\n(2) organization owners' personal access tokens (classic) with read:org or\nadmin:org scope, (3) GitHub App with an installation token with read or write\naccess to members.",
    )
    sponsoring: SponsorConnection = Field(
        ..., description='List of users and organizations this entity is sponsoring.'
    )
    sponsors: SponsorConnection = Field(
        ..., description='List of sponsors for this user or organization.'
    )
    sponsorsActivities: SponsorsActivityConnection = Field(
        ..., description='Events involving this sponsorable, such as new sponsorships.'
    )
    sponsorsListing: Optional[SponsorsListing] = Field(
        None, description='The GitHub Sponsors listing for this user or organization.'
    )
    sponsorshipForViewerAsSponsor: Optional[Sponsorship] = Field(
        None,
        description="The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.",
    )
    sponsorshipForViewerAsSponsorable: Optional[Sponsorship] = Field(
        None,
        description="The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.",
    )
    sponsorshipNewsletters: SponsorshipNewsletterConnection = Field(
        ...,
        description='List of sponsorship updates sent from this sponsorable to sponsors.',
    )
    sponsorshipsAsMaintainer: SponsorshipConnection = Field(
        ...,
        description='The sponsorships where this user or organization is the maintainer receiving the funds.',
    )
    sponsorshipsAsSponsor: SponsorshipConnection = Field(
        ...,
        description='The sponsorships where this user or organization is the funder.',
    )
    team: Optional[Team_aliased] = Field(
        None, description="Find an organization's team by its slug."
    )
    teams: TeamConnection = Field(
        ..., description='A list of teams in this organization.'
    )
    teamsResourcePath: URI = Field(
        ..., description="The HTTP path listing organization's teams"
    )
    teamsUrl: URI = Field(..., description="The HTTP URL listing organization's teams")
    totalSponsorshipAmountAsSponsorInCents: Optional[Int] = Field(
        None,
        description='The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has\nspent on GitHub to fund sponsorships. Only returns a value when viewed by the\nuser themselves or by a user who can manage sponsorships for the requested organization.',
    )
    twitterUsername: Optional[String] = Field(
        None, description="The organization's Twitter username."
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this organization.')
    viewerCanAdminister: Boolean = Field(
        ..., description='Organization is adminable by the viewer.'
    )
    viewerCanChangePinnedItems: Boolean = Field(
        ..., description='Can the viewer pin repositories and gists to the profile?'
    )
    viewerCanCreateProjects: Boolean = Field(
        ..., description='Can the current viewer create new projects on this owner.'
    )
    viewerCanCreateRepositories: Boolean = Field(
        ..., description='Viewer can create repositories on this organization'
    )
    viewerCanCreateTeams: Boolean = Field(
        ..., description='Viewer can create teams on this organization.'
    )
    viewerCanSponsor: Boolean = Field(
        ...,
        description='Whether or not the viewer is able to sponsor this user/organization.',
    )
    viewerIsAMember: Boolean = Field(
        ..., description='Viewer is an active member of this organization.'
    )
    viewerIsFollowing: Boolean = Field(
        ..., description='Whether or not this Organization is followed by the viewer.'
    )
    viewerIsSponsoring: Boolean = Field(
        ..., description='True if the viewer is sponsoring this user/organization.'
    )
    webCommitSignoffRequired: Boolean = Field(
        ...,
        description='Whether contributors are required to sign off on web-based commits for repositories in this organization.',
    )
    websiteUrl: Optional[URI] = Field(
        None, description="The organization's public profile URL."
    )
    typename__: Optional[Literal['Organization']] = Field(
        'Organization', alias='__typename'
    )


class OrganizationAuditEntryConnection(BaseModel):
    """
    The connection type for OrganizationAuditEntry.
    """

    edges: Optional[List[Optional[OrganizationAuditEntryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[OrganizationAuditEntry]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['OrganizationAuditEntryConnection']] = Field(
        'OrganizationAuditEntryConnection', alias='__typename'
    )


class OrganizationAuditEntryEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[OrganizationAuditEntry] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['OrganizationAuditEntryEdge']] = Field(
        'OrganizationAuditEntryEdge', alias='__typename'
    )


class OrganizationConnection(BaseModel):
    """
    A list of organizations managed by an enterprise.
    """

    edges: Optional[List[Optional[OrganizationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Organization]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['OrganizationConnection']] = Field(
        'OrganizationConnection', alias='__typename'
    )


class OrganizationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Organization_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['OrganizationEdge']] = Field(
        'OrganizationEdge', alias='__typename'
    )


class OrganizationEnterpriseOwnerConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[OrganizationEnterpriseOwnerEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['OrganizationEnterpriseOwnerConnection']] = Field(
        'OrganizationEnterpriseOwnerConnection', alias='__typename'
    )


class OrganizationEnterpriseOwnerEdge(BaseModel):
    """
    An enterprise owner in the context of an organization that is part of the enterprise.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[User_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    organizationRole: RoleInOrganization = Field(
        ..., description='The role of the owner with respect to the organization.'
    )
    typename__: Optional[Literal['OrganizationEnterpriseOwnerEdge']] = Field(
        'OrganizationEnterpriseOwnerEdge', alias='__typename'
    )


class OrganizationIdentityProvider(Node):
    """
    An Identity Provider configured to provision SAML and SCIM identities for
    Organizations. Visible to (1) organization owners, (2) organization owners'
    personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
    App with an installation token with read or write access to members.
    """

    digestMethod: Optional[URI] = Field(
        None,
        description='The digest algorithm used to sign SAML requests for the Identity Provider.',
    )
    externalIdentities: ExternalIdentityConnection = Field(
        ..., description='External Identities provisioned by this Identity Provider'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrganizationIdentityProvider object'
    )
    idpCertificate: Optional[X509Certificate] = Field(
        None,
        description='The x509 certificate used by the Identity Provider to sign assertions and responses.',
    )
    issuer: Optional[String] = Field(
        None, description='The Issuer Entity ID for the SAML Identity Provider'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='Organization this Identity Provider belongs to'
    )
    signatureMethod: Optional[URI] = Field(
        None,
        description='The signature algorithm used to sign SAML requests for the Identity Provider.',
    )
    ssoUrl: Optional[URI] = Field(
        None, description="The URL endpoint for the Identity Provider's SAML SSO."
    )
    typename__: Optional[Literal['OrganizationIdentityProvider']] = Field(
        'OrganizationIdentityProvider', alias='__typename'
    )


class OrganizationInvitation(Node):
    """
    An Invitation for a user to an organization.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    email: Optional[String] = Field(
        None, description='The email address of the user invited to the organization.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrganizationInvitation object'
    )
    invitationSource: OrganizationInvitationSource = Field(
        ..., description='The source of the invitation.'
    )
    invitationType: OrganizationInvitationType = Field(
        ..., description='The type of invitation that was sent (e.g. email, user).'
    )
    invitee: Optional[User_aliased] = Field(
        None, description='The user who was invited to the organization.'
    )
    inviter: User_aliased = Field(
        ..., description='The user who created the invitation.'
    )
    inviterActor: Optional[User_aliased] = Field(
        None, description='The user who created the invitation.'
    )
    organization: Organization_aliased = Field(
        ..., description='The organization the invite is for'
    )
    role: OrganizationInvitationRole = Field(
        ...,
        description="The user's pending role in the organization (e.g. member, owner).",
    )
    typename__: Optional[Literal['OrganizationInvitation']] = Field(
        'OrganizationInvitation', alias='__typename'
    )


class OrganizationInvitationConnection(BaseModel):
    """
    The connection type for OrganizationInvitation.
    """

    edges: Optional[List[Optional[OrganizationInvitationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[OrganizationInvitation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['OrganizationInvitationConnection']] = Field(
        'OrganizationInvitationConnection', alias='__typename'
    )


class OrganizationInvitationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[OrganizationInvitation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['OrganizationInvitationEdge']] = Field(
        'OrganizationInvitationEdge', alias='__typename'
    )


class OrganizationMemberConnection(BaseModel):
    """
    A list of users who belong to the organization.
    """

    edges: Optional[List[Optional[OrganizationMemberEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['OrganizationMemberConnection']] = Field(
        'OrganizationMemberConnection', alias='__typename'
    )


class OrganizationMemberEdge(BaseModel):
    """
    Represents a user within an organization.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    hasTwoFactorEnabled: Optional[Boolean] = Field(
        None,
        description='Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.',
    )
    node: Optional[User_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    role: Optional[OrganizationMemberRole] = Field(
        None, description='The role this user has in the organization.'
    )
    typename__: Optional[Literal['OrganizationMemberEdge']] = Field(
        'OrganizationMemberEdge', alias='__typename'
    )


class OrganizationMigration(Node):
    """
    A GitHub Enterprise Importer (GEI) organization migration.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[String] = Field(
        None, description='Identifies the primary key from the database.'
    )
    failureReason: Optional[String] = Field(
        None, description='The reason the organization migration failed.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the OrganizationMigration object'
    )
    remainingRepositoriesCount: Optional[Int] = Field(
        None, description='The remaining amount of repos to be migrated.'
    )
    sourceOrgName: String = Field(
        ..., description='The name of the source organization to be migrated.'
    )
    sourceOrgUrl: URI = Field(
        ..., description='The URL of the source organization to migrate.'
    )
    state: OrganizationMigrationState = Field(..., description='The migration state.')
    targetOrgName: String = Field(
        ..., description='The name of the target organization.'
    )
    totalRepositoriesCount: Optional[Int] = Field(
        None, description='The total amount of repositories to be migrated.'
    )
    typename__: Optional[Literal['OrganizationMigration']] = Field(
        'OrganizationMigration', alias='__typename'
    )


class OrganizationTeamsHovercardContext(HovercardContext):
    """
    An organization teams hovercard context
    """

    message: String = Field(..., description='A string describing this context')
    octicon: String = Field(..., description='An octicon to accompany this context')
    relevantTeams: TeamConnection = Field(
        ...,
        description='Teams in this organization the user is a member of that are relevant',
    )
    teamsResourcePath: URI = Field(
        ..., description='The path for the full team list for this user'
    )
    teamsUrl: URI = Field(
        ..., description='The URL for the full team list for this user'
    )
    totalTeamCount: Int = Field(
        ..., description='The total number of teams the user is on in the organization'
    )
    typename__: Optional[Literal['OrganizationTeamsHovercardContext']] = Field(
        'OrganizationTeamsHovercardContext', alias='__typename'
    )


class OrganizationsHovercardContext(HovercardContext):
    """
    An organization list hovercard context
    """

    message: String = Field(..., description='A string describing this context')
    octicon: String = Field(..., description='An octicon to accompany this context')
    relevantOrganizations: OrganizationConnection = Field(
        ..., description='Organizations this user is a member of that are relevant'
    )
    totalOrganizationCount: Int = Field(
        ..., description='The total number of organizations this user is in'
    )
    typename__: Optional[Literal['OrganizationsHovercardContext']] = Field(
        'OrganizationsHovercardContext', alias='__typename'
    )


class Package(Node):
    """
    Information for an uploaded package.
    """

    id: ID_aliased = Field(..., description='The Node ID of the Package object')
    latestVersion: Optional[PackageVersion] = Field(
        None, description='Find the latest version for the package.'
    )
    name: String = Field(..., description='Identifies the name of the package.')
    packageType: PackageType = Field(
        ..., description='Identifies the type of the package.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository this package belongs to.'
    )
    statistics: Optional[PackageStatistics] = Field(
        None, description='Statistics about package activity.'
    )
    version: Optional[PackageVersion] = Field(
        None, description='Find package version by version string.'
    )
    versions: PackageVersionConnection = Field(
        ..., description='list of versions for this package'
    )
    typename__: Optional[Literal['Package']] = Field('Package', alias='__typename')


class PackageConnection(BaseModel):
    """
    The connection type for Package.
    """

    edges: Optional[List[Optional[PackageEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Package]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PackageConnection']] = Field(
        'PackageConnection', alias='__typename'
    )


class PackageEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Package] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PackageEdge']] = Field(
        'PackageEdge', alias='__typename'
    )


class PackageFile(Node):
    """
    A file in a package version.
    """

    id: ID_aliased = Field(..., description='The Node ID of the PackageFile object')
    md5: Optional[String] = Field(None, description='MD5 hash of the file.')
    name: String = Field(..., description='Name of the file.')
    packageVersion: Optional[PackageVersion] = Field(
        None, description='The package version this file belongs to.'
    )
    sha1: Optional[String] = Field(None, description='SHA1 hash of the file.')
    sha256: Optional[String] = Field(None, description='SHA256 hash of the file.')
    size: Optional[Int] = Field(None, description='Size of the file in bytes.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: Optional[URI] = Field(None, description='URL to download the asset.')
    typename__: Optional[Literal['PackageFile']] = Field(
        'PackageFile', alias='__typename'
    )


class PackageFileConnection(BaseModel):
    """
    The connection type for PackageFile.
    """

    edges: Optional[List[Optional[PackageFileEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PackageFile]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PackageFileConnection']] = Field(
        'PackageFileConnection', alias='__typename'
    )


class PackageFileEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PackageFile] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PackageFileEdge']] = Field(
        'PackageFileEdge', alias='__typename'
    )


class PackageStatistics(BaseModel):
    """
    Represents a object that contains package activity statistics such as downloads.
    """

    downloadsTotalCount: Int = Field(
        ...,
        description='Number of times the package was downloaded since it was created.',
    )
    typename__: Optional[Literal['PackageStatistics']] = Field(
        'PackageStatistics', alias='__typename'
    )


class PackageTag(Node):
    """
    A version tag contains the mapping between a tag name and a version.
    """

    id: ID_aliased = Field(..., description='The Node ID of the PackageTag object')
    name: String = Field(..., description='Identifies the tag name of the version.')
    version: Optional[PackageVersion] = Field(
        None, description='Version that the tag is associated with.'
    )
    typename__: Optional[Literal['PackageTag']] = Field(
        'PackageTag', alias='__typename'
    )


class PackageVersion(Node):
    """
    Information about a specific package version.
    """

    files: PackageFileConnection = Field(
        ..., description='List of files associated with this package version'
    )
    id: ID_aliased = Field(..., description='The Node ID of the PackageVersion object')
    package: Optional[Package] = Field(
        None, description='The package associated with this version.'
    )
    platform: Optional[String] = Field(
        None, description='The platform this version was built for.'
    )
    preRelease: Boolean = Field(
        ..., description='Whether or not this version is a pre-release.'
    )
    readme: Optional[String] = Field(
        None, description='The README of this package version.'
    )
    release: Optional[Release] = Field(
        None, description='The release associated with this package version.'
    )
    statistics: Optional[PackageVersionStatistics] = Field(
        None, description='Statistics about package activity.'
    )
    summary: Optional[String] = Field(None, description='The package version summary.')
    version: String = Field(..., description='The version string.')
    typename__: Optional[Literal['PackageVersion']] = Field(
        'PackageVersion', alias='__typename'
    )


class PackageVersionConnection(BaseModel):
    """
    The connection type for PackageVersion.
    """

    edges: Optional[List[Optional[PackageVersionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PackageVersion]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PackageVersionConnection']] = Field(
        'PackageVersionConnection', alias='__typename'
    )


class PackageVersionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PackageVersion] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PackageVersionEdge']] = Field(
        'PackageVersionEdge', alias='__typename'
    )


class PackageVersionStatistics(BaseModel):
    """
    Represents a object that contains package version activity statistics such as downloads.
    """

    downloadsTotalCount: Int = Field(
        ...,
        description='Number of times the package was downloaded since it was created.',
    )
    typename__: Optional[Literal['PackageVersionStatistics']] = Field(
        'PackageVersionStatistics', alias='__typename'
    )


class PageInfo(BaseModel):
    """
    Information about pagination in a connection.
    """

    endCursor: Optional[String] = Field(
        None, description='When paginating forwards, the cursor to continue.'
    )
    hasNextPage: Boolean = Field(
        ..., description='When paginating forwards, are there more items?'
    )
    hasPreviousPage: Boolean = Field(
        ..., description='When paginating backwards, are there more items?'
    )
    startCursor: Optional[String] = Field(
        None, description='When paginating backwards, the cursor to continue.'
    )
    typename__: Optional[Literal['PageInfo']] = Field('PageInfo', alias='__typename')


class ParentIssueAddedEvent(Node):
    """
    Represents a 'parent_issue_added' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ParentIssueAddedEvent object'
    )
    parent: Optional[Issue_aliased] = Field(None, description='The parent issue added.')
    typename__: Optional[Literal['ParentIssueAddedEvent']] = Field(
        'ParentIssueAddedEvent', alias='__typename'
    )


class ParentIssueRemovedEvent(Node):
    """
    Represents a 'parent_issue_removed' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ParentIssueRemovedEvent object'
    )
    parent: Optional[Issue_aliased] = Field(
        None, description='The parent issue removed.'
    )
    typename__: Optional[Literal['ParentIssueRemovedEvent']] = Field(
        'ParentIssueRemovedEvent', alias='__typename'
    )


class PermissionSource(BaseModel):
    """
    A level of permission and source for a user's access to a repository.
    """

    organization: Organization_aliased = Field(
        ..., description='The organization the repository belongs to.'
    )
    permission: DefaultRepositoryPermissionField = Field(
        ..., description='The level of access this source has granted to the user.'
    )
    roleName: Optional[String] = Field(
        None, description='The name of the role this source has granted to the user.'
    )
    source: PermissionGranter = Field(..., description='The source of this permission.')
    typename__: Optional[Literal['PermissionSource']] = Field(
        'PermissionSource', alias='__typename'
    )


class PinEnvironmentPayload(BaseModel):
    """
    Autogenerated return type of PinEnvironment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    environment: Optional[Environment] = Field(
        None, description='The environment that was pinned'
    )
    pinnedEnvironment: Optional[PinnedEnvironment] = Field(
        None, description='The pinned environment if we pinned'
    )
    typename__: Optional[Literal['PinEnvironmentPayload']] = Field(
        'PinEnvironmentPayload', alias='__typename'
    )


class PinIssuePayload(BaseModel):
    """
    Autogenerated return type of PinIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The issue that was pinned'
    )
    typename__: Optional[Literal['PinIssuePayload']] = Field(
        'PinIssuePayload', alias='__typename'
    )


class PinnableItemConnection(BaseModel):
    """
    The connection type for PinnableItem.
    """

    edges: Optional[List[Optional[PinnableItemEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PinnableItem]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PinnableItemConnection']] = Field(
        'PinnableItemConnection', alias='__typename'
    )


class PinnableItemEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PinnableItem] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PinnableItemEdge']] = Field(
        'PinnableItemEdge', alias='__typename'
    )


class PinnedDiscussion(Node, RepositoryNode):
    """
    A Pinned Discussion is a discussion pinned to a repository's index page.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    discussion: Discussion_aliased = Field(
        ..., description='The discussion that was pinned.'
    )
    gradientStopColors: List[String] = Field(
        ..., description='Color stops of the chosen gradient'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the PinnedDiscussion object'
    )
    pattern: PinnedDiscussionPattern = Field(
        ..., description='Background texture pattern'
    )
    pinnedBy: Actor = Field(..., description='The actor that pinned this discussion.')
    preconfiguredGradient: Optional[PinnedDiscussionGradient] = Field(
        None, description='Preconfigured background gradient option'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['PinnedDiscussion']] = Field(
        'PinnedDiscussion', alias='__typename'
    )


class PinnedDiscussionConnection(BaseModel):
    """
    The connection type for PinnedDiscussion.
    """

    edges: Optional[List[Optional[PinnedDiscussionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PinnedDiscussion]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PinnedDiscussionConnection']] = Field(
        'PinnedDiscussionConnection', alias='__typename'
    )


class PinnedDiscussionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PinnedDiscussion] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PinnedDiscussionEdge']] = Field(
        'PinnedDiscussionEdge', alias='__typename'
    )


class PinnedEnvironment(Node):
    """
    Represents a pinned environment on a given repository
    """

    createdAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the pinned environment was created',
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    environment: Environment = Field(
        ..., description='Identifies the environment associated.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the PinnedEnvironment object'
    )
    position: Int = Field(
        ..., description='Identifies the position of the pinned environment.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository that this environment was pinned to.'
    )
    typename__: Optional[Literal['PinnedEnvironment']] = Field(
        'PinnedEnvironment', alias='__typename'
    )


class PinnedEnvironmentConnection(BaseModel):
    """
    The connection type for PinnedEnvironment.
    """

    edges: Optional[List[Optional[PinnedEnvironmentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PinnedEnvironment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PinnedEnvironmentConnection']] = Field(
        'PinnedEnvironmentConnection', alias='__typename'
    )


class PinnedEnvironmentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PinnedEnvironment] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PinnedEnvironmentEdge']] = Field(
        'PinnedEnvironmentEdge', alias='__typename'
    )


class PinnedEvent(Node):
    """
    Represents a 'pinned' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the PinnedEvent object')
    issue: Issue_aliased = Field(
        ..., description='Identifies the issue associated with the event.'
    )
    typename__: Optional[Literal['PinnedEvent']] = Field(
        'PinnedEvent', alias='__typename'
    )


class PinnedIssue(Node):
    """
    A Pinned Issue is a issue pinned to a repository's index page.
    """

    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the PinnedIssue object')
    issue: Issue_aliased = Field(..., description='The issue that was pinned.')
    pinnedBy: Actor = Field(..., description='The actor that pinned this issue.')
    repository: Repository_aliased = Field(
        ..., description='The repository that this issue was pinned to.'
    )
    typename__: Optional[Literal['PinnedIssue']] = Field(
        'PinnedIssue', alias='__typename'
    )


class PinnedIssueConnection(BaseModel):
    """
    The connection type for PinnedIssue.
    """

    edges: Optional[List[Optional[PinnedIssueEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PinnedIssue]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PinnedIssueConnection']] = Field(
        'PinnedIssueConnection', alias='__typename'
    )


class PinnedIssueEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PinnedIssue] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PinnedIssueEdge']] = Field(
        'PinnedIssueEdge', alias='__typename'
    )


class PrivateRepositoryForkingDisableAuditEntry(
    AuditEntry,
    EnterpriseAuditEntryData,
    Node,
    OrganizationAuditEntryData,
    RepositoryAuditEntryData,
):
    """
    Audit log entry for a private_repository_forking.disable event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the PrivateRepositoryForkingDisableAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['PrivateRepositoryForkingDisableAuditEntry']] = Field(
        'PrivateRepositoryForkingDisableAuditEntry', alias='__typename'
    )


class PrivateRepositoryForkingEnableAuditEntry(
    AuditEntry,
    EnterpriseAuditEntryData,
    Node,
    OrganizationAuditEntryData,
    RepositoryAuditEntryData,
):
    """
    Audit log entry for a private_repository_forking.enable event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the PrivateRepositoryForkingEnableAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['PrivateRepositoryForkingEnableAuditEntry']] = Field(
        'PrivateRepositoryForkingEnableAuditEntry', alias='__typename'
    )


class ProfileItemShowcase(BaseModel):
    """
    A curatable list of repositories relating to a repository owner, which defaults
    to showing the most popular repositories they own.
    """

    hasPinnedItems: Boolean = Field(
        ...,
        description='Whether or not the owner has pinned any repositories or gists.',
    )
    items: PinnableItemConnection = Field(
        ...,
        description="The repositories and gists in the showcase. If the profile owner has any\npinned items, those will be returned. Otherwise, the profile owner's popular\nrepositories will be returned.",
    )
    typename__: Optional[Literal['ProfileItemShowcase']] = Field(
        'ProfileItemShowcase', alias='__typename'
    )


class Project(Closable, Node, Updatable):
    """
    Projects manage issues, pull requests and notes within a project owner.
    """

    body: Optional[String] = Field(None, description="The project's description body.")
    bodyHTML: HTML = Field(
        ..., description='The projects description body rendered to HTML.'
    )
    closed: Boolean = Field(
        ...,
        description='Indicates if the object is closed (definition of closed may depend on type)',
    )
    closedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was closed.'
    )
    columns: ProjectColumnConnection = Field(
        ..., description='List of columns in the project'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who originally created the project.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Project object')
    name: String = Field(..., description="The project's name.")
    number: Int = Field(..., description="The project's number.")
    owner: ProjectOwner = Field(
        ...,
        description="The project's owner. Currently limited to repositories, organizations, and users.",
    )
    pendingCards: ProjectCardConnection = Field(
        ..., description='List of pending cards in this project'
    )
    progress: ProjectProgress = Field(..., description='Project progress details.')
    resourcePath: URI = Field(..., description='The HTTP path for this project')
    state: ProjectState = Field(
        ..., description='Whether the project is open or closed.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this project')
    viewerCanClose: Boolean = Field(
        ..., description='Indicates if the object can be closed by the viewer.'
    )
    viewerCanReopen: Boolean = Field(
        ..., description='Indicates if the object can be reopened by the viewer.'
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    typename__: Optional[Literal['Project']] = Field('Project', alias='__typename')


class ProjectCard(Node):
    """
    A card in a project.
    """

    column: Optional[ProjectColumn] = Field(
        None,
        description='The project column this card is associated under. A card may only belong to one\nproject column at a time. The column field will be null if the card is created\nin a pending state and has yet to be associated with a column. Once cards are\nassociated with a column, they will not become pending in the future.',
    )
    content: Optional[ProjectCardItem] = Field(
        None, description='The card content item'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created this card'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ProjectCard object')
    isArchived: Boolean = Field(..., description='Whether the card is archived')
    note: Optional[String] = Field(None, description='The card note')
    project: Project = Field(..., description='The project that contains this card.')
    resourcePath: URI = Field(..., description='The HTTP path for this card')
    state: Optional[ProjectCardState] = Field(
        None, description='The state of ProjectCard'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this card')
    typename__: Optional[Literal['ProjectCard']] = Field(
        'ProjectCard', alias='__typename'
    )


class ProjectCardConnection(BaseModel):
    """
    The connection type for ProjectCard.
    """

    edges: Optional[List[Optional[ProjectCardEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectCard]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectCardConnection']] = Field(
        'ProjectCardConnection', alias='__typename'
    )


class ProjectCardEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectCard] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectCardEdge']] = Field(
        'ProjectCardEdge', alias='__typename'
    )


class ProjectColumn(Node):
    """
    A column inside a project.
    """

    cards: ProjectCardConnection = Field(..., description='List of cards in the column')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ProjectColumn object')
    name: String = Field(..., description="The project column's name.")
    project: Project = Field(..., description='The project that contains this column.')
    purpose: Optional[ProjectColumnPurpose] = Field(
        None, description='The semantic purpose of the column'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this project column')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this project column')
    typename__: Optional[Literal['ProjectColumn']] = Field(
        'ProjectColumn', alias='__typename'
    )


class ProjectColumnConnection(BaseModel):
    """
    The connection type for ProjectColumn.
    """

    edges: Optional[List[Optional[ProjectColumnEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectColumn]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectColumnConnection']] = Field(
        'ProjectColumnConnection', alias='__typename'
    )


class ProjectColumnEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectColumn] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectColumnEdge']] = Field(
        'ProjectColumnEdge', alias='__typename'
    )


class ProjectConnection(BaseModel):
    """
    A list of projects associated with the owner.
    """

    edges: Optional[List[Optional[ProjectEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Project]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectConnection']] = Field(
        'ProjectConnection', alias='__typename'
    )


class ProjectEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Project] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectEdge']] = Field(
        'ProjectEdge', alias='__typename'
    )


class ProjectProgress(BaseModel):
    """
    Project progress stats.
    """

    doneCount: Int = Field(..., description='The number of done cards.')
    donePercentage: Float = Field(..., description='The percentage of done cards.')
    enabled: Boolean = Field(
        ...,
        description='Whether progress tracking is enabled and cards with purpose exist for this project',
    )
    inProgressCount: Int = Field(..., description='The number of in-progress cards.')
    inProgressPercentage: Float = Field(
        ..., description='The percentage of in-progress cards.'
    )
    todoCount: Int = Field(..., description='The number of to do cards.')
    todoPercentage: Float = Field(..., description='The percentage of to do cards.')
    typename__: Optional[Literal['ProjectProgress']] = Field(
        'ProjectProgress', alias='__typename'
    )


class ProjectV2(Closable, Node, Updatable):
    """
    New projects that manage issues, pull requests and drafts using tables and boards.
    """

    closed: Boolean = Field(..., description='Returns true if the project is closed.')
    closedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was closed.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who originally created the project.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    field: Optional[ProjectV2FieldConfiguration] = Field(
        None, description='A field of the project'
    )
    fields: ProjectV2FieldConfigurationConnection = Field(
        ..., description='List of fields and their constraints in the project'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ProjectV2 object')
    items: ProjectV2ItemConnection = Field(
        ..., description='List of items in the project'
    )
    number: Int = Field(..., description="The project's number.")
    owner: ProjectV2Owner = Field(
        ...,
        description="The project's owner. Currently limited to organizations and users.",
    )
    public: Boolean = Field(..., description='Returns true if the project is public.')
    readme: Optional[String] = Field(None, description="The project's readme.")
    repositories: RepositoryConnection = Field(
        ..., description='The repositories the project is linked to.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this project')
    shortDescription: Optional[String] = Field(
        None, description="The project's short description."
    )
    statusUpdates: ProjectV2StatusUpdateConnection = Field(
        ..., description='List of the status updates in the project.'
    )
    teams: TeamConnection = Field(
        ..., description='The teams the project is linked to.'
    )
    template: Boolean = Field(
        ..., description='Returns true if this project is a template.'
    )
    title: String = Field(..., description="The project's name.")
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this project')
    view: Optional[ProjectV2View] = Field(None, description='A view of the project')
    viewerCanClose: Boolean = Field(
        ..., description='Indicates if the object can be closed by the viewer.'
    )
    viewerCanReopen: Boolean = Field(
        ..., description='Indicates if the object can be reopened by the viewer.'
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    views: ProjectV2ViewConnection = Field(
        ..., description='List of views in the project'
    )
    workflow: Optional[ProjectV2Workflow] = Field(
        None, description='A workflow of the project'
    )
    workflows: ProjectV2WorkflowConnection = Field(
        ..., description='List of the workflows in the project'
    )
    typename__: Optional[Literal['ProjectV2']] = Field('ProjectV2', alias='__typename')


class ProjectV2ActorConnection(BaseModel):
    """
    The connection type for ProjectV2Actor.
    """

    edges: Optional[List[Optional[ProjectV2ActorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2Actor]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2ActorConnection']] = Field(
        'ProjectV2ActorConnection', alias='__typename'
    )


class ProjectV2ActorEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2Actor] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2ActorEdge']] = Field(
        'ProjectV2ActorEdge', alias='__typename'
    )


class ProjectV2Connection(BaseModel):
    """
    The connection type for ProjectV2.
    """

    edges: Optional[List[Optional[ProjectV2Edge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2Connection']] = Field(
        'ProjectV2Connection', alias='__typename'
    )


class ProjectV2Edge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2Edge']] = Field(
        'ProjectV2Edge', alias='__typename'
    )


class ProjectV2Field(Node, ProjectV2FieldCommon):
    """
    A field inside a project.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    dataType: ProjectV2FieldType = Field(..., description="The field's type.")
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ProjectV2Field object')
    name: String = Field(..., description="The project field's name.")
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this field.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2Field']] = Field(
        'ProjectV2Field', alias='__typename'
    )


class ProjectV2FieldConfigurationConnection(BaseModel):
    """
    The connection type for ProjectV2FieldConfiguration.
    """

    edges: Optional[List[Optional[ProjectV2FieldConfigurationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2FieldConfiguration]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2FieldConfigurationConnection']] = Field(
        'ProjectV2FieldConfigurationConnection', alias='__typename'
    )


class ProjectV2FieldConfigurationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2FieldConfiguration] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2FieldConfigurationEdge']] = Field(
        'ProjectV2FieldConfigurationEdge', alias='__typename'
    )


class ProjectV2FieldConnection(BaseModel):
    """
    The connection type for ProjectV2Field.
    """

    edges: Optional[List[Optional[ProjectV2FieldEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2Field]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2FieldConnection']] = Field(
        'ProjectV2FieldConnection', alias='__typename'
    )


class ProjectV2FieldEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2Field_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2FieldEdge']] = Field(
        'ProjectV2FieldEdge', alias='__typename'
    )


class ProjectV2Item(Node):
    """
    An item within a Project.
    """

    content: Optional[ProjectV2ItemContent] = Field(
        None,
        description='The content of the referenced draft issue, issue, or pull request',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the item.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    fieldValueByName: Optional[ProjectV2ItemFieldValue] = Field(
        None,
        description="The field value of the first project field which matches the 'name' argument that is set on the item.",
    )
    fieldValues: ProjectV2ItemFieldValueConnection = Field(
        ..., description='The field values that are set on the item.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ProjectV2Item object')
    isArchived: Boolean = Field(..., description='Whether the item is archived.')
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this item.'
    )
    type: ProjectV2ItemType = Field(..., description='The type of the item.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2Item']] = Field(
        'ProjectV2Item', alias='__typename'
    )


class ProjectV2ItemConnection(BaseModel):
    """
    The connection type for ProjectV2Item.
    """

    edges: Optional[List[Optional[ProjectV2ItemEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2Item]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2ItemConnection']] = Field(
        'ProjectV2ItemConnection', alias='__typename'
    )


class ProjectV2ItemEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2Item] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2ItemEdge']] = Field(
        'ProjectV2ItemEdge', alias='__typename'
    )


class ProjectV2ItemFieldDateValue(Node, ProjectV2ItemFieldValueCommon):
    """
    The value of a date field in a Project item.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the item.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    date: Optional[Date] = Field(None, description='Date value for the field')
    field: ProjectV2FieldConfiguration = Field(
        ..., description='The project field that contains this value.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2ItemFieldDateValue object'
    )
    item: ProjectV2Item = Field(
        ..., description='The project item that contains this value.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2ItemFieldDateValue']] = Field(
        'ProjectV2ItemFieldDateValue', alias='__typename'
    )


class ProjectV2ItemFieldIterationValue(Node, ProjectV2ItemFieldValueCommon):
    """
    The value of an iteration field in a Project item.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the item.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    duration: Int = Field(..., description='The duration of the iteration in days.')
    field: ProjectV2FieldConfiguration = Field(
        ..., description='The project field that contains this value.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2ItemFieldIterationValue object'
    )
    item: ProjectV2Item = Field(
        ..., description='The project item that contains this value.'
    )
    iterationId: String = Field(..., description='The ID of the iteration.')
    startDate: Date = Field(..., description='The start date of the iteration.')
    title: String = Field(..., description='The title of the iteration.')
    titleHTML: String = Field(..., description='The title of the iteration, with HTML.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2ItemFieldIterationValue']] = Field(
        'ProjectV2ItemFieldIterationValue', alias='__typename'
    )


class ProjectV2ItemFieldLabelValue(BaseModel):
    """
    The value of the labels field in a Project item.
    """

    field: ProjectV2FieldConfiguration = Field(
        ..., description='The field that contains this value.'
    )
    labels: Optional[LabelConnection] = Field(
        None, description='Labels value of a field'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldLabelValue']] = Field(
        'ProjectV2ItemFieldLabelValue', alias='__typename'
    )


class ProjectV2ItemFieldMilestoneValue(BaseModel):
    """
    The value of a milestone field in a Project item.
    """

    field: ProjectV2FieldConfiguration = Field(
        ..., description='The field that contains this value.'
    )
    milestone: Optional[Milestone] = Field(
        None, description='Milestone value of a field'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldMilestoneValue']] = Field(
        'ProjectV2ItemFieldMilestoneValue', alias='__typename'
    )


class ProjectV2ItemFieldNumberValue(Node, ProjectV2ItemFieldValueCommon):
    """
    The value of a number field in a Project item.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the item.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    field: ProjectV2FieldConfiguration = Field(
        ..., description='The project field that contains this value.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2ItemFieldNumberValue object'
    )
    item: ProjectV2Item = Field(
        ..., description='The project item that contains this value.'
    )
    number: Optional[Float] = Field(None, description='Number as a float(8)')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2ItemFieldNumberValue']] = Field(
        'ProjectV2ItemFieldNumberValue', alias='__typename'
    )


class ProjectV2ItemFieldPullRequestValue(BaseModel):
    """
    The value of a pull request field in a Project item.
    """

    field: ProjectV2FieldConfiguration = Field(
        ..., description='The field that contains this value.'
    )
    pullRequests: Optional[PullRequestConnection] = Field(
        None, description='The pull requests for this field'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldPullRequestValue']] = Field(
        'ProjectV2ItemFieldPullRequestValue', alias='__typename'
    )


class ProjectV2ItemFieldRepositoryValue(BaseModel):
    """
    The value of a repository field in a Project item.
    """

    field: ProjectV2FieldConfiguration = Field(
        ..., description='The field that contains this value.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository for this field.'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldRepositoryValue']] = Field(
        'ProjectV2ItemFieldRepositoryValue', alias='__typename'
    )


class ProjectV2ItemFieldReviewerValue(BaseModel):
    """
    The value of a reviewers field in a Project item.
    """

    field: ProjectV2FieldConfiguration = Field(
        ..., description='The field that contains this value.'
    )
    reviewers: Optional[RequestedReviewerConnection] = Field(
        None, description='The reviewers for this field.'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldReviewerValue']] = Field(
        'ProjectV2ItemFieldReviewerValue', alias='__typename'
    )


class ProjectV2ItemFieldSingleSelectValue(Node, ProjectV2ItemFieldValueCommon):
    """
    The value of a single select field in a Project item.
    """

    color: ProjectV2SingleSelectFieldOptionColor = Field(
        ..., description='The color applied to the selected single-select option.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the item.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: Optional[String] = Field(
        None,
        description='A plain-text description of the selected single-select option, such as what the option means.',
    )
    descriptionHTML: Optional[String] = Field(
        None,
        description='The description of the selected single-select option, including HTML tags.',
    )
    field: ProjectV2FieldConfiguration = Field(
        ..., description='The project field that contains this value.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2ItemFieldSingleSelectValue object'
    )
    item: ProjectV2Item = Field(
        ..., description='The project item that contains this value.'
    )
    name: Optional[String] = Field(
        None, description='The name of the selected single select option.'
    )
    nameHTML: Optional[String] = Field(
        None, description='The html name of the selected single select option.'
    )
    optionId: Optional[String] = Field(
        None, description='The id of the selected single select option.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2ItemFieldSingleSelectValue']] = Field(
        'ProjectV2ItemFieldSingleSelectValue', alias='__typename'
    )


class ProjectV2ItemFieldTextValue(Node, ProjectV2ItemFieldValueCommon):
    """
    The value of a text field in a Project item.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the item.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    field: ProjectV2FieldConfiguration = Field(
        ..., description='The project field that contains this value.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2ItemFieldTextValue object'
    )
    item: ProjectV2Item = Field(
        ..., description='The project item that contains this value.'
    )
    text: Optional[String] = Field(None, description='Text value of a field')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2ItemFieldTextValue']] = Field(
        'ProjectV2ItemFieldTextValue', alias='__typename'
    )


class ProjectV2ItemFieldUserValue(BaseModel):
    """
    The value of a user field in a Project item.
    """

    field: ProjectV2FieldConfiguration = Field(
        ..., description='The field that contains this value.'
    )
    users: Optional[UserConnection] = Field(
        None, description='The users for this field'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldUserValue']] = Field(
        'ProjectV2ItemFieldUserValue', alias='__typename'
    )


class ProjectV2ItemFieldValueConnection(BaseModel):
    """
    The connection type for ProjectV2ItemFieldValue.
    """

    edges: Optional[List[Optional[ProjectV2ItemFieldValueEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2ItemFieldValue]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldValueConnection']] = Field(
        'ProjectV2ItemFieldValueConnection', alias='__typename'
    )


class ProjectV2ItemFieldValueEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2ItemFieldValue] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldValueEdge']] = Field(
        'ProjectV2ItemFieldValueEdge', alias='__typename'
    )


class ProjectV2IterationField(Node, ProjectV2FieldCommon):
    """
    An iteration field inside a project.
    """

    configuration: ProjectV2IterationFieldConfiguration = Field(
        ..., description='Iteration configuration settings'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    dataType: ProjectV2FieldType = Field(..., description="The field's type.")
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2IterationField object'
    )
    name: String = Field(..., description="The project field's name.")
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this field.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2IterationField']] = Field(
        'ProjectV2IterationField', alias='__typename'
    )


class ProjectV2IterationFieldConfiguration(BaseModel):
    """
    Iteration field configuration for a project.
    """

    completedIterations: List[ProjectV2IterationFieldIteration] = Field(
        ..., description="The iteration's completed iterations"
    )
    duration: Int = Field(..., description="The iteration's duration in days")
    iterations: List[ProjectV2IterationFieldIteration] = Field(
        ..., description="The iteration's iterations"
    )
    startDay: Int = Field(..., description="The iteration's start day of the week")
    typename__: Optional[Literal['ProjectV2IterationFieldConfiguration']] = Field(
        'ProjectV2IterationFieldConfiguration', alias='__typename'
    )


class ProjectV2IterationFieldIteration(BaseModel):
    """
    Iteration field iteration settings for a project.
    """

    duration: Int = Field(..., description="The iteration's duration in days")
    id: String = Field(..., description="The iteration's ID.")
    startDate: Date = Field(..., description="The iteration's start date")
    title: String = Field(..., description="The iteration's title.")
    titleHTML: String = Field(..., description="The iteration's html title.")
    typename__: Optional[Literal['ProjectV2IterationFieldIteration']] = Field(
        'ProjectV2IterationFieldIteration', alias='__typename'
    )


class ProjectV2SingleSelectField(Node, ProjectV2FieldCommon):
    """
    A single select field inside a project.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    dataType: ProjectV2FieldType = Field(..., description="The field's type.")
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2SingleSelectField object'
    )
    name: String = Field(..., description="The project field's name.")
    options: List[ProjectV2SingleSelectFieldOption] = Field(
        ..., description='Options for the single select field'
    )
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this field.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2SingleSelectField']] = Field(
        'ProjectV2SingleSelectField', alias='__typename'
    )


class ProjectV2SingleSelectFieldOption(BaseModel):
    """
    Single select field option for a configuration for a project.
    """

    color: ProjectV2SingleSelectFieldOptionColor = Field(
        ..., description="The option's display color."
    )
    description: String = Field(..., description="The option's plain-text description.")
    descriptionHTML: String = Field(
        ..., description="The option's description, possibly containing HTML."
    )
    id: String = Field(..., description="The option's ID.")
    name: String = Field(..., description="The option's name.")
    nameHTML: String = Field(..., description="The option's html name.")
    typename__: Optional[Literal['ProjectV2SingleSelectFieldOption']] = Field(
        'ProjectV2SingleSelectFieldOption', alias='__typename'
    )


class ProjectV2SortBy(BaseModel):
    """
    Represents a sort by field and direction.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction of the sorting. Possible values are ASC and DESC.',
    )
    field: ProjectV2Field_aliased = Field(
        ..., description='The field by which items are sorted.'
    )
    typename__: Optional[Literal['ProjectV2SortBy']] = Field(
        'ProjectV2SortBy', alias='__typename'
    )


class ProjectV2SortByConnection(BaseModel):
    """
    The connection type for ProjectV2SortBy.
    """

    edges: Optional[List[Optional[ProjectV2SortByEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2SortBy]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2SortByConnection']] = Field(
        'ProjectV2SortByConnection', alias='__typename'
    )


class ProjectV2SortByEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2SortBy] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2SortByEdge']] = Field(
        'ProjectV2SortByEdge', alias='__typename'
    )


class ProjectV2SortByField(BaseModel):
    """
    Represents a sort by field and direction.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction of the sorting. Possible values are ASC and DESC.',
    )
    field: ProjectV2FieldConfiguration = Field(
        ..., description='The field by which items are sorted.'
    )
    typename__: Optional[Literal['ProjectV2SortByField']] = Field(
        'ProjectV2SortByField', alias='__typename'
    )


class ProjectV2SortByFieldConnection(BaseModel):
    """
    The connection type for ProjectV2SortByField.
    """

    edges: Optional[List[Optional[ProjectV2SortByFieldEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2SortByField]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2SortByFieldConnection']] = Field(
        'ProjectV2SortByFieldConnection', alias='__typename'
    )


class ProjectV2SortByFieldEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2SortByField] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2SortByFieldEdge']] = Field(
        'ProjectV2SortByFieldEdge', alias='__typename'
    )


class ProjectV2StatusUpdate(Node):
    """
    A status update within a project.
    """

    body: Optional[String] = Field(None, description='The body of the status update.')
    bodyHTML: Optional[HTML] = Field(
        None, description='The body of the status update rendered to HTML.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created the status update.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2StatusUpdate object'
    )
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this status update.'
    )
    startDate: Optional[Date] = Field(
        None, description='The start date of the status update.'
    )
    status: Optional[ProjectV2StatusUpdateStatus] = Field(
        None, description='The status of the status update.'
    )
    targetDate: Optional[Date] = Field(
        None, description='The target date of the status update.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2StatusUpdate']] = Field(
        'ProjectV2StatusUpdate', alias='__typename'
    )


class ProjectV2StatusUpdateConnection(BaseModel):
    """
    The connection type for ProjectV2StatusUpdate.
    """

    edges: Optional[List[Optional[ProjectV2StatusUpdateEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2StatusUpdate]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2StatusUpdateConnection']] = Field(
        'ProjectV2StatusUpdateConnection', alias='__typename'
    )


class ProjectV2StatusUpdateEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2StatusUpdate] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2StatusUpdateEdge']] = Field(
        'ProjectV2StatusUpdateEdge', alias='__typename'
    )


class ProjectV2View(Node):
    """
    A view within a ProjectV2.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    fields: Optional[ProjectV2FieldConfigurationConnection] = Field(
        None, description="The view's visible fields."
    )
    filter: Optional[String] = Field(None, description="The project view's filter.")
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    groupBy: Optional[ProjectV2FieldConnection] = Field(
        None, description="The view's group-by field."
    )
    groupByFields: Optional[ProjectV2FieldConfigurationConnection] = Field(
        None, description="The view's group-by field."
    )
    id: ID_aliased = Field(..., description='The Node ID of the ProjectV2View object')
    layout: ProjectV2ViewLayout = Field(..., description="The project view's layout.")
    name: String = Field(..., description="The project view's name.")
    number: Int = Field(..., description="The project view's number.")
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this view.'
    )
    sortBy: Optional[ProjectV2SortByConnection] = Field(
        None, description="The view's sort-by config."
    )
    sortByFields: Optional[ProjectV2SortByFieldConnection] = Field(
        None, description="The view's sort-by config."
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    verticalGroupBy: Optional[ProjectV2FieldConnection] = Field(
        None, description="The view's vertical-group-by field."
    )
    verticalGroupByFields: Optional[ProjectV2FieldConfigurationConnection] = Field(
        None, description="The view's vertical-group-by field."
    )
    visibleFields: Optional[ProjectV2FieldConnection] = Field(
        None, description="The view's visible fields."
    )
    typename__: Optional[Literal['ProjectV2View']] = Field(
        'ProjectV2View', alias='__typename'
    )


class ProjectV2ViewConnection(BaseModel):
    """
    The connection type for ProjectV2View.
    """

    edges: Optional[List[Optional[ProjectV2ViewEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2View]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2ViewConnection']] = Field(
        'ProjectV2ViewConnection', alias='__typename'
    )


class ProjectV2ViewEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2View] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2ViewEdge']] = Field(
        'ProjectV2ViewEdge', alias='__typename'
    )


class ProjectV2Workflow(Node):
    """
    A workflow inside a project.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    enabled: Boolean = Field(..., description='Whether the workflow is enabled.')
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ProjectV2Workflow object'
    )
    name: String = Field(..., description='The name of the workflow.')
    number: Int = Field(..., description='The number of the workflow.')
    project: ProjectV2_aliased = Field(
        ..., description='The project that contains this workflow.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['ProjectV2Workflow']] = Field(
        'ProjectV2Workflow', alias='__typename'
    )


class ProjectV2WorkflowConnection(BaseModel):
    """
    The connection type for ProjectV2Workflow.
    """

    edges: Optional[List[Optional[ProjectV2WorkflowEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ProjectV2Workflow]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ProjectV2WorkflowConnection']] = Field(
        'ProjectV2WorkflowConnection', alias='__typename'
    )


class ProjectV2WorkflowEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ProjectV2Workflow] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ProjectV2WorkflowEdge']] = Field(
        'ProjectV2WorkflowEdge', alias='__typename'
    )


class PropertyTargetDefinition(BaseModel):
    """
    A property that must match
    """

    name: String = Field(..., description='The name of the property')
    propertyValues: List[String] = Field(..., description='The values to match for')
    source: Optional[String] = Field(
        None,
        description="The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified",
    )
    typename__: Optional[Literal['PropertyTargetDefinition']] = Field(
        'PropertyTargetDefinition', alias='__typename'
    )


class PublicKey(Node):
    """
    A user's public key.
    """

    accessedAt: Optional[DateTime] = Field(
        None,
        description='The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.',
    )
    createdAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the key was created. Keys created before\nMarch 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.',
    )
    fingerprint: String = Field(..., description='The fingerprint for this PublicKey.')
    id: ID_aliased = Field(..., description='The Node ID of the PublicKey object')
    isReadOnly: Optional[Boolean] = Field(
        None,
        description='Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.',
    )
    key: String = Field(..., description='The public key string.')
    updatedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the key was updated. Keys created before\nMarch 5th, 2014 may have inaccurate values. Values will be null for keys not\nowned by the user.',
    )
    typename__: Optional[Literal['PublicKey']] = Field('PublicKey', alias='__typename')


class PublicKeyConnection(BaseModel):
    """
    The connection type for PublicKey.
    """

    edges: Optional[List[Optional[PublicKeyEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PublicKey]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PublicKeyConnection']] = Field(
        'PublicKeyConnection', alias='__typename'
    )


class PublicKeyEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PublicKey] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PublicKeyEdge']] = Field(
        'PublicKeyEdge', alias='__typename'
    )


class PublishSponsorsTierPayload(BaseModel):
    """
    Autogenerated return type of PublishSponsorsTier.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorsTier: Optional[SponsorsTier] = Field(
        None, description='The tier that was published.'
    )
    typename__: Optional[Literal['PublishSponsorsTierPayload']] = Field(
        'PublishSponsorsTierPayload', alias='__typename'
    )


class PullRequest(
    Assignable,
    Closable,
    Comment,
    Labelable,
    Lockable,
    Node,
    ProjectV2Owner,
    Reactable,
    RepositoryNode,
    Subscribable,
    UniformResourceLocatable,
    Updatable,
    UpdatableComment,
):
    """
    A repository pull request.
    """

    activeLockReason: Optional[LockReason] = Field(
        None, description='Reason that the conversation was locked.'
    )
    additions: Int = Field(
        ..., description='The number of additions in this pull request.'
    )
    assignedActors: AssigneeConnection = Field(
        ..., description='A list of actors assigned to this object.'
    )
    assignees: UserConnection = Field(
        ..., description='A list of Users assigned to this object.'
    )
    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    autoMergeRequest: Optional[AutoMergeRequest] = Field(
        None,
        description='Returns the auto-merge request object if one exists for this pull request.',
    )
    baseRef: Optional[Ref] = Field(
        None, description='Identifies the base Ref associated with the pull request.'
    )
    baseRefName: String = Field(
        ...,
        description='Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.',
    )
    baseRefOid: GitObjectID = Field(
        ...,
        description='Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.',
    )
    baseRepository: Optional[Repository_aliased] = Field(
        None, description="The repository associated with this pull request's base Ref."
    )
    body: String = Field(..., description='The body as Markdown.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    canBeRebased: Boolean = Field(
        ..., description='Whether or not the pull request is rebaseable.'
    )
    changedFiles: Int = Field(
        ..., description='The number of changed files in this pull request.'
    )
    checksResourcePath: URI = Field(
        ..., description='The HTTP path for the checks of this pull request.'
    )
    checksUrl: URI = Field(
        ..., description='The HTTP URL for the checks of this pull request.'
    )
    closed: Boolean = Field(..., description='`true` if the pull request is closed')
    closedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was closed.'
    )
    closingIssuesReferences: Optional[IssueConnection] = Field(
        None, description='List of issues that may be closed by this pull request'
    )
    comments: IssueCommentConnection = Field(
        ..., description='A list of comments associated with the pull request.'
    )
    commits: PullRequestCommitConnection = Field(
        ...,
        description="A list of commits present in this pull request's head branch not present in the base branch.",
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    deletions: Int = Field(
        ..., description='The number of deletions in this pull request.'
    )
    editor: Optional[Actor] = Field(
        None, description="The actor who edited this pull request's body."
    )
    files: Optional[PullRequestChangedFileConnection] = Field(
        None, description='Lists the files changed within this pull request.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    headRef: Optional[Ref] = Field(
        None, description='Identifies the head Ref associated with the pull request.'
    )
    headRefName: String = Field(
        ...,
        description='Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.',
    )
    headRefOid: GitObjectID = Field(
        ...,
        description='Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.',
    )
    headRepository: Optional[Repository_aliased] = Field(
        None, description="The repository associated with this pull request's head Ref."
    )
    headRepositoryOwner: Optional[RepositoryOwner] = Field(
        None,
        description="The owner of the repository associated with this pull request's head Ref.",
    )
    hovercard: Hovercard = Field(
        ..., description='The hovercard information for this issue'
    )
    id: ID_aliased = Field(..., description='The Node ID of the PullRequest object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isCrossRepository: Boolean = Field(
        ..., description='The head and base repositories are different.'
    )
    isDraft: Boolean = Field(
        ..., description='Identifies if the pull request is a draft.'
    )
    isInMergeQueue: Boolean = Field(
        ..., description='Indicates whether the pull request is in a merge queue'
    )
    isMergeQueueEnabled: Boolean = Field(
        ...,
        description="Indicates whether the pull request's base ref has a merge queue enabled.",
    )
    isReadByViewer: Optional[Boolean] = Field(
        None, description='Is this pull request read by the viewer'
    )
    labels: Optional[LabelConnection] = Field(
        None, description='A list of labels associated with the object.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    latestOpinionatedReviews: Optional[PullRequestReviewConnection] = Field(
        None,
        description='A list of latest reviews per user associated with the pull request.',
    )
    latestReviews: Optional[PullRequestReviewConnection] = Field(
        None,
        description='A list of latest reviews per user associated with the pull request that are not also pending review.',
    )
    locked: Boolean = Field(..., description='`true` if the pull request is locked')
    maintainerCanModify: Boolean = Field(
        ..., description='Indicates whether maintainers can modify the pull request.'
    )
    mergeCommit: Optional[Commit_aliased] = Field(
        None,
        description='The commit that was created when this pull request was merged.',
    )
    mergeQueue: Optional[MergeQueue] = Field(
        None, description="The merge queue for the pull request's base branch"
    )
    mergeQueueEntry: Optional[MergeQueueEntry] = Field(
        None,
        description="The merge queue entry of the pull request in the base branch's merge queue",
    )
    mergeStateStatus: MergeStateStatus = Field(
        ...,
        description='Detailed information about the current pull request merge state status.',
    )
    mergeable: MergeableState = Field(
        ...,
        description='Whether or not the pull request can be merged based on the existence of merge conflicts.',
    )
    merged: Boolean = Field(
        ..., description='Whether or not the pull request was merged.'
    )
    mergedAt: Optional[DateTime] = Field(
        None, description='The date and time that the pull request was merged.'
    )
    mergedBy: Optional[Actor] = Field(
        None, description='The actor who merged the pull request.'
    )
    milestone: Optional[Milestone] = Field(
        None, description='Identifies the milestone associated with the pull request.'
    )
    number: Int = Field(..., description='Identifies the pull request number.')
    participants: UserConnection = Field(
        ...,
        description='A list of Users that are participating in the Pull Request conversation.',
    )
    permalink: URI = Field(..., description='The permalink to the pull request.')
    potentialMergeCommit: Optional[Commit_aliased] = Field(
        None,
        description='The commit that GitHub automatically generated to test if this pull request\ncould be merged. This field will not return a value if the pull request is\nmerged, or if the test merge commit is still being generated. See the\n`mergeable` field for more details on the mergeability of the pull request.',
    )
    projectCards: ProjectCardConnection = Field(
        ..., description='List of project cards associated with this pull request.'
    )
    projectItems: ProjectV2ItemConnection = Field(
        ..., description='List of project items associated with this pull request.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='Find a project by number.'
    )
    projectsV2: ProjectV2Connection = Field(
        ..., description='A list of projects under the owner.'
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this pull request.')
    revertResourcePath: URI = Field(
        ..., description='The HTTP path for reverting this pull request.'
    )
    revertUrl: URI = Field(
        ..., description='The HTTP URL for reverting this pull request.'
    )
    reviewDecision: Optional[PullRequestReviewDecision] = Field(
        None,
        description='The current status of this pull request with respect to code review.',
    )
    reviewRequests: Optional[ReviewRequestConnection] = Field(
        None, description='A list of review requests associated with the pull request.'
    )
    reviewThreads: PullRequestReviewThreadConnection = Field(
        ..., description='The list of all review threads for this pull request.'
    )
    reviews: Optional[PullRequestReviewConnection] = Field(
        None, description='A list of reviews associated with the pull request.'
    )
    state: PullRequestState = Field(
        ..., description='Identifies the state of the pull request.'
    )
    statusCheckRollup: Optional[StatusCheckRollup] = Field(
        None, description="Check and Status rollup information for the PR's head ref."
    )
    suggestedActors: AssigneeConnection = Field(
        ..., description='A list of suggested actors to assign to this object'
    )
    suggestedReviewers: List[Optional[SuggestedReviewer]] = Field(
        ...,
        description='A list of reviewer suggestions based on commit history and past review comments.',
    )
    timeline: PullRequestTimelineConnection = Field(
        ...,
        description='A list of events, comments, commits, etc. associated with the pull request.',
    )
    timelineItems: PullRequestTimelineItemsConnection = Field(
        ...,
        description='A list of events, comments, commits, etc. associated with the pull request.',
    )
    title: String = Field(..., description='Identifies the pull request title.')
    titleHTML: HTML = Field(
        ..., description='Identifies the pull request title rendered to HTML.'
    )
    totalCommentsCount: Optional[Int] = Field(
        None,
        description='Returns a count of how many comments this pull request has received.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this pull request.')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanApplySuggestion: Boolean = Field(
        ..., description='Whether or not the viewer can apply suggestion.'
    )
    viewerCanClose: Boolean = Field(
        ..., description='Indicates if the object can be closed by the viewer.'
    )
    viewerCanDeleteHeadRef: Boolean = Field(
        ..., description='Check if the viewer can restore the deleted head ref.'
    )
    viewerCanDisableAutoMerge: Boolean = Field(
        ..., description='Whether or not the viewer can disable auto-merge'
    )
    viewerCanEditFiles: Boolean = Field(
        ..., description='Can the viewer edit files within this pull request.'
    )
    viewerCanEnableAutoMerge: Boolean = Field(
        ..., description='Whether or not the viewer can enable auto-merge'
    )
    viewerCanLabel: Boolean = Field(
        ..., description='Indicates if the viewer can edit labels for this object.'
    )
    viewerCanMergeAsAdmin: Boolean = Field(
        ...,
        description='Indicates whether the viewer can bypass branch protections and merge the pull request immediately',
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanReopen: Boolean = Field(
        ..., description='Indicates if the object can be reopened by the viewer.'
    )
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCanUpdateBranch: Boolean = Field(
        ...,
        description='Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.\nIf the head ref is up to date or unable to be updated by this user, this will return false.',
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    viewerLatestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The latest review given from the viewer.'
    )
    viewerLatestReviewRequest: Optional[ReviewRequest] = Field(
        None,
        description='The person who has requested the viewer for review on this pull request.',
    )
    viewerMergeBodyText: String = Field(
        ..., description='The merge body text for the viewer and method.'
    )
    viewerMergeHeadlineText: String = Field(
        ..., description='The merge headline text for the viewer and method.'
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    typename__: Optional[Literal['PullRequest']] = Field(
        'PullRequest', alias='__typename'
    )


class PullRequestChangedFile(BaseModel):
    """
    A file changed in a pull request.
    """

    additions: Int = Field(..., description='The number of additions to the file.')
    changeType: PatchStatus = Field(
        ..., description='How the file was changed in this PullRequest'
    )
    deletions: Int = Field(..., description='The number of deletions to the file.')
    path: String = Field(..., description='The path of the file.')
    viewerViewedState: FileViewedState = Field(
        ..., description='The state of the file for the viewer.'
    )
    typename__: Optional[Literal['PullRequestChangedFile']] = Field(
        'PullRequestChangedFile', alias='__typename'
    )


class PullRequestChangedFileConnection(BaseModel):
    """
    The connection type for PullRequestChangedFile.
    """

    edges: Optional[List[Optional[PullRequestChangedFileEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PullRequestChangedFile]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PullRequestChangedFileConnection']] = Field(
        'PullRequestChangedFileConnection', alias='__typename'
    )


class PullRequestChangedFileEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequestChangedFile] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestChangedFileEdge']] = Field(
        'PullRequestChangedFileEdge', alias='__typename'
    )


class PullRequestCommit(Node, UniformResourceLocatable):
    """
    Represents a Git commit part of a pull request.
    """

    commit: Commit_aliased = Field(..., description='The Git commit object')
    id: ID_aliased = Field(
        ..., description='The Node ID of the PullRequestCommit object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='The pull request this commit belongs to'
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for this pull request commit'
    )
    url: URI = Field(..., description='The HTTP URL for this pull request commit')
    typename__: Optional[Literal['PullRequestCommit']] = Field(
        'PullRequestCommit', alias='__typename'
    )


class PullRequestCommitCommentThread(Node, RepositoryNode):
    """
    Represents a commit comment thread part of a pull request.
    """

    comments: CommitCommentConnection = Field(
        ..., description='The comments that exist in this thread.'
    )
    commit: Commit_aliased = Field(
        ..., description='The commit the comments were made on.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the PullRequestCommitCommentThread object'
    )
    path: Optional[String] = Field(
        None, description='The file the comments were made on.'
    )
    position: Optional[Int] = Field(
        None,
        description='The position in the diff for the commit that the comment was made on.',
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='The pull request this commit comment thread belongs to'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    typename__: Optional[Literal['PullRequestCommitCommentThread']] = Field(
        'PullRequestCommitCommentThread', alias='__typename'
    )


class PullRequestCommitConnection(BaseModel):
    """
    The connection type for PullRequestCommit.
    """

    edges: Optional[List[Optional[PullRequestCommitEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PullRequestCommit]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PullRequestCommitConnection']] = Field(
        'PullRequestCommitConnection', alias='__typename'
    )


class PullRequestCommitEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequestCommit_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestCommitEdge']] = Field(
        'PullRequestCommitEdge', alias='__typename'
    )


class PullRequestConnection(BaseModel):
    """
    The connection type for PullRequest.
    """

    edges: Optional[List[Optional[PullRequestEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PullRequest]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PullRequestConnection']] = Field(
        'PullRequestConnection', alias='__typename'
    )


class PullRequestContributionsByRepository(BaseModel):
    """
    This aggregates pull requests opened by a user within one repository.
    """

    contributions: CreatedPullRequestContributionConnection = Field(
        ..., description='The pull request contributions.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository in which the pull requests were opened.'
    )
    typename__: Optional[Literal['PullRequestContributionsByRepository']] = Field(
        'PullRequestContributionsByRepository', alias='__typename'
    )


class PullRequestEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequest_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestEdge']] = Field(
        'PullRequestEdge', alias='__typename'
    )


class PullRequestParameters(BaseModel):
    """
    Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
    """

    allowedMergeMethods: Optional[List[PullRequestAllowedMergeMethods]] = Field(
        None,
        description='Array of allowed merge methods. Allowed values include `merge`, `squash`, and\n`rebase`. At least one option must be enabled.',
    )
    automaticCopilotCodeReviewEnabled: Boolean = Field(
        ...,
        description='Automatically request review from Copilot for new pull requests, if the author has access to Copilot code review.',
    )
    dismissStaleReviewsOnPush: Boolean = Field(
        ...,
        description='New, reviewable commits pushed will dismiss previous pull request review approvals.',
    )
    requireCodeOwnerReview: Boolean = Field(
        ...,
        description='Require an approving review in pull requests that modify files that have a designated code owner.',
    )
    requireLastPushApproval: Boolean = Field(
        ...,
        description='Whether the most recent reviewable push must be approved by someone other than the person who pushed it.',
    )
    requiredApprovingReviewCount: Int = Field(
        ...,
        description='The number of approving reviews that are required before a pull request can be merged.',
    )
    requiredReviewThreadResolution: Boolean = Field(
        ...,
        description='All conversations on code must be resolved before a pull request can be merged.',
    )
    typename__: Optional[Literal['PullRequestParameters']] = Field(
        'PullRequestParameters', alias='__typename'
    )


class PullRequestReview(
    Comment,
    Deletable,
    Minimizable,
    Node,
    Reactable,
    RepositoryNode,
    Updatable,
    UpdatableComment,
):
    """
    A review object for a given pull request.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    authorCanPushToRepository: Boolean = Field(
        ...,
        description='Indicates whether the author of this review has push access to the repository.',
    )
    body: String = Field(..., description='Identifies the pull request review body.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(
        ..., description='The body of this review rendered as plain text.'
    )
    comments: PullRequestReviewCommentConnection = Field(
        ...,
        description='A list of review comments for the current pull request review.',
    )
    commit: Optional[Commit_aliased] = Field(
        None,
        description='Identifies the commit associated with this pull request review.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the PullRequestReview object'
    )
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isMinimized: Boolean = Field(
        ..., description='Returns whether or not a comment has been minimized.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    minimizedReason: Optional[String] = Field(
        None,
        description='Returns why the comment was minimized. One of `abuse`, `off-topic`,\n`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\nformatting of these values differs from the inputs to the `MinimizeComment` mutation.',
    )
    onBehalfOf: TeamConnection = Field(
        ..., description='A list of teams that this review was made on behalf of.'
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    pullRequest: PullRequest_aliased = Field(
        ...,
        description='Identifies the pull request associated with this pull request review.',
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path permalink for this PullRequestReview.'
    )
    state: PullRequestReviewState = Field(
        ..., description='Identifies the current state of the pull request review.'
    )
    submittedAt: Optional[DateTime] = Field(
        None, description='Identifies when the Pull Request Review was submitted'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(
        ..., description='The HTTP URL permalink for this PullRequestReview.'
    )
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanMinimize: Boolean = Field(
        ..., description='Check if the current viewer can minimize this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    typename__: Optional[Literal['PullRequestReview']] = Field(
        'PullRequestReview', alias='__typename'
    )


class PullRequestReviewComment(
    Comment,
    Deletable,
    Minimizable,
    Node,
    Reactable,
    RepositoryNode,
    Updatable,
    UpdatableComment,
):
    """
    A review comment associated with a given repository pull request.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the subject of the comment."
    )
    body: String = Field(..., description='The comment body of this review comment.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(
        ...,
        description='The comment body of this review comment rendered as plain text.',
    )
    commit: Optional[Commit_aliased] = Field(
        None, description='Identifies the commit associated with the comment.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies when the comment was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    diffHunk: String = Field(
        ..., description='The diff hunk to which the comment applies.'
    )
    draftedAt: DateTime = Field(
        ..., description='Identifies when the comment was created in a draft state.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    fullDatabaseId: Optional[BigInt] = Field(
        None, description='Identifies the primary key from the database as a BigInt.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the PullRequestReviewComment object'
    )
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isMinimized: Boolean = Field(
        ..., description='Returns whether or not a comment has been minimized.'
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    line: Optional[Int] = Field(
        None, description='The end line number on the file to which the comment applies'
    )
    minimizedReason: Optional[String] = Field(
        None,
        description='Returns why the comment was minimized. One of `abuse`, `off-topic`,\n`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\nformatting of these values differs from the inputs to the `MinimizeComment` mutation.',
    )
    originalCommit: Optional[Commit_aliased] = Field(
        None, description='Identifies the original commit associated with the comment.'
    )
    originalLine: Optional[Int] = Field(
        None,
        description='The end line number on the file to which the comment applied when it was first created',
    )
    originalPosition: Int = Field(
        ...,
        description='The original line index in the diff to which the comment applies.',
    )
    originalStartLine: Optional[Int] = Field(
        None,
        description='The start line number on the file to which the comment applied when it was first created',
    )
    outdated: Boolean = Field(
        ..., description='Identifies when the comment body is outdated'
    )
    path: String = Field(..., description='The path to which the comment applies.')
    position: Optional[Int] = Field(
        None, description='The line index in the diff to which the comment applies.'
    )
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='The pull request associated with this review comment.'
    )
    pullRequestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The pull request review associated with this review comment.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    replyTo: Optional[PullRequestReviewComment_aliased] = Field(
        None, description='The comment this is a reply to.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository associated with this node.'
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path permalink for this review comment.'
    )
    startLine: Optional[Int] = Field(
        None,
        description='The start line number on the file to which the comment applies',
    )
    state: PullRequestReviewCommentState = Field(
        ..., description='Identifies the state of the comment.'
    )
    subjectType: PullRequestReviewThreadSubjectType = Field(
        ...,
        description='The level at which the comments in the corresponding thread are targeted, can be a diff line or a file',
    )
    updatedAt: DateTime = Field(
        ..., description='Identifies when the comment was last updated.'
    )
    url: URI = Field(..., description='The HTTP URL permalink for this review comment.')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanMinimize: Boolean = Field(
        ..., description='Check if the current viewer can minimize this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    typename__: Optional[Literal['PullRequestReviewComment']] = Field(
        'PullRequestReviewComment', alias='__typename'
    )


class PullRequestReviewCommentConnection(BaseModel):
    """
    The connection type for PullRequestReviewComment.
    """

    edges: Optional[List[Optional[PullRequestReviewCommentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PullRequestReviewComment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PullRequestReviewCommentConnection']] = Field(
        'PullRequestReviewCommentConnection', alias='__typename'
    )


class PullRequestReviewCommentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequestReviewComment_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestReviewCommentEdge']] = Field(
        'PullRequestReviewCommentEdge', alias='__typename'
    )


class PullRequestReviewConnection(BaseModel):
    """
    The connection type for PullRequestReview.
    """

    edges: Optional[List[Optional[PullRequestReviewEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PullRequestReview]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PullRequestReviewConnection']] = Field(
        'PullRequestReviewConnection', alias='__typename'
    )


class PullRequestReviewContributionsByRepository(BaseModel):
    """
    This aggregates pull request reviews made by a user within one repository.
    """

    contributions: CreatedPullRequestReviewContributionConnection = Field(
        ..., description='The pull request review contributions.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository in which the pull request reviews were made.'
    )
    typename__: Optional[Literal['PullRequestReviewContributionsByRepository']] = Field(
        'PullRequestReviewContributionsByRepository', alias='__typename'
    )


class PullRequestReviewEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequestReview_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestReviewEdge']] = Field(
        'PullRequestReviewEdge', alias='__typename'
    )


class PullRequestReviewThread(Node):
    """
    A threaded list of comments for a given pull request.
    """

    comments: PullRequestReviewCommentConnection = Field(
        ..., description='A list of pull request comments associated with the thread.'
    )
    diffSide: DiffSide = Field(
        ..., description='The side of the diff on which this thread was placed.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the PullRequestReviewThread object'
    )
    isCollapsed: Boolean = Field(
        ..., description='Whether or not the thread has been collapsed (resolved)'
    )
    isOutdated: Boolean = Field(
        ..., description='Indicates whether this thread was outdated by newer changes.'
    )
    isResolved: Boolean = Field(
        ..., description='Whether this thread has been resolved'
    )
    line: Optional[Int] = Field(
        None, description='The line in the file to which this thread refers'
    )
    originalLine: Optional[Int] = Field(
        None, description='The original line in the file to which this thread refers.'
    )
    originalStartLine: Optional[Int] = Field(
        None,
        description='The original start line in the file to which this thread refers (multi-line only).',
    )
    path: String = Field(..., description='Identifies the file path of this thread.')
    pullRequest: PullRequest_aliased = Field(
        ..., description='Identifies the pull request associated with this thread.'
    )
    repository: Repository_aliased = Field(
        ..., description='Identifies the repository associated with this thread.'
    )
    resolvedBy: Optional[User_aliased] = Field(
        None, description='The user who resolved this thread'
    )
    startDiffSide: Optional[DiffSide] = Field(
        None,
        description='The side of the diff that the first line of the thread starts on (multi-line only)',
    )
    startLine: Optional[Int] = Field(
        None,
        description='The start line in the file to which this thread refers (multi-line only)',
    )
    subjectType: PullRequestReviewThreadSubjectType = Field(
        ...,
        description='The level at which the comments in the corresponding thread are targeted, can be a diff line or a file',
    )
    viewerCanReply: Boolean = Field(
        ...,
        description='Indicates whether the current viewer can reply to this thread.',
    )
    viewerCanResolve: Boolean = Field(
        ..., description='Whether or not the viewer can resolve this thread'
    )
    viewerCanUnresolve: Boolean = Field(
        ..., description='Whether or not the viewer can unresolve this thread'
    )
    typename__: Optional[Literal['PullRequestReviewThread']] = Field(
        'PullRequestReviewThread', alias='__typename'
    )


class PullRequestReviewThreadConnection(BaseModel):
    """
    Review comment threads for a pull request review.
    """

    edges: Optional[List[Optional[PullRequestReviewThreadEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PullRequestReviewThread]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PullRequestReviewThreadConnection']] = Field(
        'PullRequestReviewThreadConnection', alias='__typename'
    )


class PullRequestReviewThreadEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequestReviewThread_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestReviewThreadEdge']] = Field(
        'PullRequestReviewThreadEdge', alias='__typename'
    )


class PullRequestRevisionMarker(BaseModel):
    """
    Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    lastSeenCommit: Commit_aliased = Field(
        ..., description='The last commit the viewer has seen.'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='The pull request to which the marker belongs.'
    )
    typename__: Optional[Literal['PullRequestRevisionMarker']] = Field(
        'PullRequestRevisionMarker', alias='__typename'
    )


class PullRequestTemplate(BaseModel):
    """
    A repository pull request template.
    """

    body: Optional[String] = Field(None, description='The body of the template')
    filename: Optional[String] = Field(None, description='The filename of the template')
    repository: Repository_aliased = Field(
        ..., description='The repository the template belongs to'
    )
    typename__: Optional[Literal['PullRequestTemplate']] = Field(
        'PullRequestTemplate', alias='__typename'
    )


class PullRequestThread(Node):
    """
    A threaded list of comments for a given pull request.
    """

    comments: PullRequestReviewCommentConnection = Field(
        ..., description='A list of pull request comments associated with the thread.'
    )
    diffSide: DiffSide = Field(
        ..., description='The side of the diff on which this thread was placed.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the PullRequestThread object'
    )
    isCollapsed: Boolean = Field(
        ..., description='Whether or not the thread has been collapsed (resolved)'
    )
    isOutdated: Boolean = Field(
        ..., description='Indicates whether this thread was outdated by newer changes.'
    )
    isResolved: Boolean = Field(
        ..., description='Whether this thread has been resolved'
    )
    line: Optional[Int] = Field(
        None, description='The line in the file to which this thread refers'
    )
    path: String = Field(..., description='Identifies the file path of this thread.')
    pullRequest: PullRequest_aliased = Field(
        ..., description='Identifies the pull request associated with this thread.'
    )
    repository: Repository_aliased = Field(
        ..., description='Identifies the repository associated with this thread.'
    )
    resolvedBy: Optional[User_aliased] = Field(
        None, description='The user who resolved this thread'
    )
    startDiffSide: Optional[DiffSide] = Field(
        None,
        description='The side of the diff that the first line of the thread starts on (multi-line only)',
    )
    startLine: Optional[Int] = Field(
        None, description='The line of the first file diff in the thread.'
    )
    subjectType: PullRequestReviewThreadSubjectType = Field(
        ...,
        description='The level at which the comments in the corresponding thread are targeted, can be a diff line or a file',
    )
    viewerCanReply: Boolean = Field(
        ...,
        description='Indicates whether the current viewer can reply to this thread.',
    )
    viewerCanResolve: Boolean = Field(
        ..., description='Whether or not the viewer can resolve this thread'
    )
    viewerCanUnresolve: Boolean = Field(
        ..., description='Whether or not the viewer can unresolve this thread'
    )
    typename__: Optional[Literal['PullRequestThread']] = Field(
        'PullRequestThread', alias='__typename'
    )


class PullRequestTimelineConnection(BaseModel):
    """
    The connection type for PullRequestTimelineItem.
    """

    edges: Optional[List[Optional[PullRequestTimelineItemEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PullRequestTimelineItem]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PullRequestTimelineConnection']] = Field(
        'PullRequestTimelineConnection', alias='__typename'
    )


class PullRequestTimelineItemEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequestTimelineItem] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestTimelineItemEdge']] = Field(
        'PullRequestTimelineItemEdge', alias='__typename'
    )


class PullRequestTimelineItemsConnection(BaseModel):
    """
    The connection type for PullRequestTimelineItems.
    """

    edges: Optional[List[Optional[PullRequestTimelineItemsEdge]]] = Field(
        None, description='A list of edges.'
    )
    filteredCount: Int = Field(
        ...,
        description='Identifies the count of items after applying `before` and `after` filters.',
    )
    nodes: Optional[List[Optional[PullRequestTimelineItems]]] = Field(
        None, description='A list of nodes.'
    )
    pageCount: Int = Field(
        ...,
        description='Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.',
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the timeline was last updated.',
    )
    typename__: Optional[Literal['PullRequestTimelineItemsConnection']] = Field(
        'PullRequestTimelineItemsConnection', alias='__typename'
    )


class PullRequestTimelineItemsEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PullRequestTimelineItems] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PullRequestTimelineItemsEdge']] = Field(
        'PullRequestTimelineItemsEdge', alias='__typename'
    )


class Push(Node):
    """
    A Git push.
    """

    id: ID_aliased = Field(..., description='The Node ID of the Push object')
    nextSha: Optional[GitObjectID] = Field(None, description='The SHA after the push')
    permalink: URI = Field(..., description='The permalink for this push.')
    previousSha: Optional[GitObjectID] = Field(
        None, description='The SHA before the push'
    )
    pusher: Actor = Field(..., description='The actor who pushed')
    repository: Repository_aliased = Field(
        ..., description='The repository that was pushed to'
    )
    typename__: Optional[Literal['Push']] = Field('Push', alias='__typename')


class PushAllowance(Node):
    """
    A team, user, or app who has the ability to push to a protected branch.
    """

    actor: Optional[PushAllowanceActor] = Field(
        None, description='The actor that can push.'
    )
    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None,
        description='Identifies the branch protection rule associated with the allowed user, team, or app.',
    )
    id: ID_aliased = Field(..., description='The Node ID of the PushAllowance object')
    typename__: Optional[Literal['PushAllowance']] = Field(
        'PushAllowance', alias='__typename'
    )


class PushAllowanceConnection(BaseModel):
    """
    The connection type for PushAllowance.
    """

    edges: Optional[List[Optional[PushAllowanceEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[PushAllowance]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['PushAllowanceConnection']] = Field(
        'PushAllowanceConnection', alias='__typename'
    )


class PushAllowanceEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[PushAllowance] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['PushAllowanceEdge']] = Field(
        'PushAllowanceEdge', alias='__typename'
    )


class RateLimit(BaseModel):
    """
    Represents the client's rate limit.
    """

    cost: Int = Field(
        ...,
        description='The point cost for the current query counting against the rate limit.',
    )
    limit: Int = Field(
        ...,
        description='The maximum number of points the client is permitted to consume in a 60 minute window.',
    )
    nodeCount: Int = Field(
        ..., description='The maximum number of nodes this query may return'
    )
    remaining: Int = Field(
        ...,
        description='The number of points remaining in the current rate limit window.',
    )
    resetAt: DateTime = Field(
        ...,
        description='The time at which the current rate limit window resets in UTC epoch seconds.',
    )
    used: Int = Field(
        ..., description='The number of points used in the current rate limit window.'
    )
    typename__: Optional[Literal['RateLimit']] = Field('RateLimit', alias='__typename')


class ReactingUserConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[ReactingUserEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ReactingUserConnection']] = Field(
        'ReactingUserConnection', alias='__typename'
    )


class ReactingUserEdge(BaseModel):
    """
    Represents a user that's made a reaction.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: User_aliased
    reactedAt: DateTime = Field(
        ..., description='The moment when the user made the reaction.'
    )
    typename__: Optional[Literal['ReactingUserEdge']] = Field(
        'ReactingUserEdge', alias='__typename'
    )


class Reaction(Node):
    """
    An emoji reaction to a particular piece of content.
    """

    content: ReactionContent = Field(..., description='Identifies the emoji reaction.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Reaction object')
    reactable: Reactable = Field(..., description='The reactable piece of content')
    user: Optional[User_aliased] = Field(
        None, description='Identifies the user who created this reaction.'
    )
    typename__: Optional[Literal['Reaction']] = Field('Reaction', alias='__typename')


class ReactionConnection(BaseModel):
    """
    A list of reactions that have been left on the subject.
    """

    edges: Optional[List[Optional[ReactionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Reaction]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    viewerHasReacted: Boolean = Field(
        ...,
        description='Whether or not the authenticated user has left a reaction on the subject.',
    )
    typename__: Optional[Literal['ReactionConnection']] = Field(
        'ReactionConnection', alias='__typename'
    )


class ReactionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Reaction] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ReactionEdge']] = Field(
        'ReactionEdge', alias='__typename'
    )


class ReactionGroup(BaseModel):
    """
    A group of emoji reactions to a particular piece of content.
    """

    content: ReactionContent = Field(..., description='Identifies the emoji reaction.')
    createdAt: Optional[DateTime] = Field(
        None, description='Identifies when the reaction was created.'
    )
    reactors: ReactorConnection = Field(
        ...,
        description='Reactors to the reaction subject with the emotion represented by this reaction group.',
    )
    subject: Reactable = Field(..., description='The subject that was reacted to.')
    users: ReactingUserConnection = Field(
        ...,
        description='Users who have reacted to the reaction subject with the emotion represented by this reaction group',
    )
    viewerHasReacted: Boolean = Field(
        ...,
        description='Whether or not the authenticated user has left a reaction on the subject.',
    )
    typename__: Optional[Literal['ReactionGroup']] = Field(
        'ReactionGroup', alias='__typename'
    )


class ReactorConnection(BaseModel):
    """
    The connection type for Reactor.
    """

    edges: Optional[List[Optional[ReactorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Reactor]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ReactorConnection']] = Field(
        'ReactorConnection', alias='__typename'
    )


class ReactorEdge(BaseModel):
    """
    Represents an author of a reaction.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Reactor = Field(..., description='The author of the reaction.')
    reactedAt: DateTime = Field(
        ..., description='The moment when the user made the reaction.'
    )
    typename__: Optional[Literal['ReactorEdge']] = Field(
        'ReactorEdge', alias='__typename'
    )


class ReadyForReviewEvent(Node, UniformResourceLocatable):
    """
    Represents a 'ready_for_review' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ReadyForReviewEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for this ready for review event.'
    )
    url: URI = Field(..., description='The HTTP URL for this ready for review event.')
    typename__: Optional[Literal['ReadyForReviewEvent']] = Field(
        'ReadyForReviewEvent', alias='__typename'
    )


class Ref(Node):
    """
    Represents a Git reference.
    """

    associatedPullRequests: PullRequestConnection = Field(
        ..., description='A list of pull requests with this ref as the head ref.'
    )
    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None, description='Branch protection rules for this ref'
    )
    compare: Optional[Comparison] = Field(
        None,
        description='Compares the current ref as a base ref to another head ref, if the comparison can be made.',
    )
    id: ID_aliased = Field(..., description='The Node ID of the Ref object')
    name: String = Field(..., description='The ref name.')
    prefix: String = Field(
        ..., description="The ref's prefix, such as `refs/heads/` or `refs/tags/`."
    )
    refUpdateRule: Optional[RefUpdateRule] = Field(
        None, description='Branch protection rules that are viewable by non-admins'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository the ref belongs to.'
    )
    rules: Optional[RepositoryRuleConnection] = Field(
        None,
        description='A list of rules from active Repository and Organization rulesets that apply to this ref.',
    )
    target: Optional[GitObject] = Field(
        None,
        description='The object the ref points to. Returns null when object does not exist.',
    )
    typename__: Optional[Literal['Ref']] = Field('Ref', alias='__typename')


class RefConnection(BaseModel):
    """
    The connection type for Ref.
    """

    edges: Optional[List[Optional[RefEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Ref]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RefConnection']] = Field(
        'RefConnection', alias='__typename'
    )


class RefEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Ref] = Field(None, description='The item at the end of the edge.')
    typename__: Optional[Literal['RefEdge']] = Field('RefEdge', alias='__typename')


class RefNameConditionTarget(BaseModel):
    """
    Parameters to be used for the ref_name condition
    """

    exclude: List[String] = Field(
        ...,
        description='Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.',
    )
    include: List[String] = Field(
        ...,
        description='Array of ref names or patterns to include. One of these patterns must match\nfor the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the\ndefault branch or `~ALL` to include all branches.',
    )
    typename__: Optional[Literal['RefNameConditionTarget']] = Field(
        'RefNameConditionTarget', alias='__typename'
    )


class RefUpdateRule(BaseModel):
    """
    Branch protection rules that are enforced on the viewer.
    """

    allowsDeletions: Boolean = Field(..., description='Can this branch be deleted.')
    allowsForcePushes: Boolean = Field(
        ..., description='Are force pushes allowed on this branch.'
    )
    blocksCreations: Boolean = Field(
        ..., description='Can matching branches be created.'
    )
    pattern: String = Field(..., description='Identifies the protection rule pattern.')
    requiredApprovingReviewCount: Optional[Int] = Field(
        None,
        description='Number of approving reviews required to update matching branches.',
    )
    requiredStatusCheckContexts: Optional[List[Optional[String]]] = Field(
        None,
        description='List of required status check contexts that must pass for commits to be accepted to matching branches.',
    )
    requiresCodeOwnerReviews: Boolean = Field(
        ...,
        description='Are reviews from code owners required to update matching branches.',
    )
    requiresConversationResolution: Boolean = Field(
        ..., description='Are conversations required to be resolved before merging.'
    )
    requiresLinearHistory: Boolean = Field(
        ...,
        description='Are merge commits prohibited from being pushed to this branch.',
    )
    requiresSignatures: Boolean = Field(
        ..., description='Are commits required to be signed.'
    )
    viewerAllowedToDismissReviews: Boolean = Field(
        ..., description='Is the viewer allowed to dismiss reviews.'
    )
    viewerCanPush: Boolean = Field(..., description='Can the viewer push to the branch')
    typename__: Optional[Literal['RefUpdateRule']] = Field(
        'RefUpdateRule', alias='__typename'
    )


class ReferencedEvent(Node):
    """
    Represents a 'referenced' event on a given `ReferencedSubject`.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    commit: Optional[Commit_aliased] = Field(
        None,
        description="Identifies the commit associated with the 'referenced' event.",
    )
    commitRepository: Repository_aliased = Field(
        ...,
        description="Identifies the repository associated with the 'referenced' event.",
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ReferencedEvent object')
    isCrossRepository: Boolean = Field(
        ..., description='Reference originated in a different repository.'
    )
    isDirectReference: Boolean = Field(
        ...,
        description='Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.',
    )
    subject: ReferencedSubject = Field(..., description='Object referenced by event.')
    typename__: Optional[Literal['ReferencedEvent']] = Field(
        'ReferencedEvent', alias='__typename'
    )


class RegenerateEnterpriseIdentityProviderRecoveryCodesPayload(BaseModel):
    """
    Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    identityProvider: Optional[EnterpriseIdentityProvider] = Field(
        None, description='The identity provider for the enterprise.'
    )
    typename__: Optional[
        Literal['RegenerateEnterpriseIdentityProviderRecoveryCodesPayload']
    ] = Field(
        'RegenerateEnterpriseIdentityProviderRecoveryCodesPayload', alias='__typename'
    )


class RegenerateVerifiableDomainTokenPayload(BaseModel):
    """
    Autogenerated return type of RegenerateVerifiableDomainToken.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    verificationToken: Optional[String] = Field(
        None, description='The verification token that was generated.'
    )
    typename__: Optional[Literal['RegenerateVerifiableDomainTokenPayload']] = Field(
        'RegenerateVerifiableDomainTokenPayload', alias='__typename'
    )


class RejectDeploymentsPayload(BaseModel):
    """
    Autogenerated return type of RejectDeployments.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deployments: Optional[List[Deployment]] = Field(
        None, description='The affected deployments.'
    )
    typename__: Optional[Literal['RejectDeploymentsPayload']] = Field(
        'RejectDeploymentsPayload', alias='__typename'
    )


class Release(Node, Reactable, UniformResourceLocatable):
    """
    A release contains the content for a release.
    """

    author: Optional[User_aliased] = Field(
        None, description='The author of the release'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: Optional[String] = Field(
        None, description='The description of the release.'
    )
    descriptionHTML: Optional[HTML] = Field(
        None, description='The description of this release rendered to HTML.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Release object')
    isDraft: Boolean = Field(..., description='Whether or not the release is a draft')
    isLatest: Boolean = Field(
        ..., description='Whether or not the release is the latest releast'
    )
    isPrerelease: Boolean = Field(
        ..., description='Whether or not the release is a prerelease'
    )
    mentions: Optional[UserConnection] = Field(
        None, description='A list of users mentioned in the release description'
    )
    name: Optional[String] = Field(None, description='The title of the release.')
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the release was created.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    releaseAssets: ReleaseAssetConnection = Field(
        ..., description='List of releases assets which are dependent on this release.'
    )
    repository: Repository_aliased = Field(
        ..., description='The repository that the release belongs to.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this issue')
    shortDescriptionHTML: Optional[HTML] = Field(
        None,
        description='A description of the release, rendered to HTML without any links in it.',
    )
    tag: Optional[Ref] = Field(None, description='The Git tag the release points to')
    tagCommit: Optional[Commit_aliased] = Field(
        None, description='The tag commit for this release.'
    )
    tagName: String = Field(..., description="The name of the release's Git tag")
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this issue')
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    typename__: Optional[Literal['Release']] = Field('Release', alias='__typename')


class ReleaseAsset(Node):
    """
    A release asset contains the content for a release asset.
    """

    contentType: String = Field(..., description="The asset's content-type")
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    downloadCount: Int = Field(
        ..., description='The number of times this asset was downloaded'
    )
    downloadUrl: URI = Field(
        ...,
        description='Identifies the URL where you can download the release asset via the browser.',
    )
    id: ID_aliased = Field(..., description='The Node ID of the ReleaseAsset object')
    name: String = Field(..., description='Identifies the title of the release asset.')
    release: Optional[Release] = Field(
        None, description='Release that the asset is associated with'
    )
    size: Int = Field(..., description='The size (in bytes) of the asset')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    uploadedBy: User_aliased = Field(
        ..., description='The user that performed the upload'
    )
    url: URI = Field(..., description='Identifies the URL of the release asset.')
    typename__: Optional[Literal['ReleaseAsset']] = Field(
        'ReleaseAsset', alias='__typename'
    )


class ReleaseAssetConnection(BaseModel):
    """
    The connection type for ReleaseAsset.
    """

    edges: Optional[List[Optional[ReleaseAssetEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ReleaseAsset]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ReleaseAssetConnection']] = Field(
        'ReleaseAssetConnection', alias='__typename'
    )


class ReleaseAssetEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ReleaseAsset] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ReleaseAssetEdge']] = Field(
        'ReleaseAssetEdge', alias='__typename'
    )


class ReleaseConnection(BaseModel):
    """
    The connection type for Release.
    """

    edges: Optional[List[Optional[ReleaseEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Release]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ReleaseConnection']] = Field(
        'ReleaseConnection', alias='__typename'
    )


class ReleaseEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Release] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ReleaseEdge']] = Field(
        'ReleaseEdge', alias='__typename'
    )


class RemoveAssigneesFromAssignablePayload(BaseModel):
    """
    Autogenerated return type of RemoveAssigneesFromAssignable.
    """

    assignable: Optional[Assignable] = Field(
        None, description='The item that was unassigned.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['RemoveAssigneesFromAssignablePayload']] = Field(
        'RemoveAssigneesFromAssignablePayload', alias='__typename'
    )


class RemoveEnterpriseAdminPayload(BaseModel):
    """
    Autogenerated return type of RemoveEnterpriseAdmin.
    """

    admin: Optional[User_aliased] = Field(
        None, description='The user who was removed as an administrator.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The updated enterprise.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of removing an administrator.',
    )
    viewer: Optional[User_aliased] = Field(
        None, description='The viewer performing the mutation.'
    )
    typename__: Optional[Literal['RemoveEnterpriseAdminPayload']] = Field(
        'RemoveEnterpriseAdminPayload', alias='__typename'
    )


class RemoveEnterpriseIdentityProviderPayload(BaseModel):
    """
    Autogenerated return type of RemoveEnterpriseIdentityProvider.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    identityProvider: Optional[EnterpriseIdentityProvider] = Field(
        None, description='The identity provider that was removed from the enterprise.'
    )
    typename__: Optional[Literal['RemoveEnterpriseIdentityProviderPayload']] = Field(
        'RemoveEnterpriseIdentityProviderPayload', alias='__typename'
    )


class RemoveEnterpriseMemberPayload(BaseModel):
    """
    Autogenerated return type of RemoveEnterpriseMember.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The updated enterprise.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user that was removed from the enterprise.'
    )
    viewer: Optional[User_aliased] = Field(
        None, description='The viewer performing the mutation.'
    )
    typename__: Optional[Literal['RemoveEnterpriseMemberPayload']] = Field(
        'RemoveEnterpriseMemberPayload', alias='__typename'
    )


class RemoveEnterpriseOrganizationPayload(BaseModel):
    """
    Autogenerated return type of RemoveEnterpriseOrganization.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The updated enterprise.'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The organization that was removed from the enterprise.'
    )
    viewer: Optional[User_aliased] = Field(
        None, description='The viewer performing the mutation.'
    )
    typename__: Optional[Literal['RemoveEnterpriseOrganizationPayload']] = Field(
        'RemoveEnterpriseOrganizationPayload', alias='__typename'
    )


class RemoveEnterpriseSupportEntitlementPayload(BaseModel):
    """
    Autogenerated return type of RemoveEnterpriseSupportEntitlement.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of removing the support entitlement.',
    )
    typename__: Optional[Literal['RemoveEnterpriseSupportEntitlementPayload']] = Field(
        'RemoveEnterpriseSupportEntitlementPayload', alias='__typename'
    )


class RemoveLabelsFromLabelablePayload(BaseModel):
    """
    Autogenerated return type of RemoveLabelsFromLabelable.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    labelable: Optional[Labelable] = Field(
        None, description='The Labelable the labels were removed from.'
    )
    typename__: Optional[Literal['RemoveLabelsFromLabelablePayload']] = Field(
        'RemoveLabelsFromLabelablePayload', alias='__typename'
    )


class RemoveOutsideCollaboratorPayload(BaseModel):
    """
    Autogenerated return type of RemoveOutsideCollaborator.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    removedUser: Optional[User_aliased] = Field(
        None, description='The user that was removed as an outside collaborator.'
    )
    typename__: Optional[Literal['RemoveOutsideCollaboratorPayload']] = Field(
        'RemoveOutsideCollaboratorPayload', alias='__typename'
    )


class RemoveReactionPayload(BaseModel):
    """
    Autogenerated return type of RemoveReaction.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    reaction: Optional[Reaction] = Field(None, description='The reaction object.')
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='The reaction groups for the subject.'
    )
    subject: Optional[Reactable] = Field(None, description='The reactable subject.')
    typename__: Optional[Literal['RemoveReactionPayload']] = Field(
        'RemoveReactionPayload', alias='__typename'
    )


class RemoveStarPayload(BaseModel):
    """
    Autogenerated return type of RemoveStar.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    starrable: Optional[Starrable] = Field(None, description='The starrable.')
    typename__: Optional[Literal['RemoveStarPayload']] = Field(
        'RemoveStarPayload', alias='__typename'
    )


class RemoveSubIssuePayload(BaseModel):
    """
    Autogenerated return type of RemoveSubIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The parent of the sub-issue.'
    )
    subIssue: Optional[Issue_aliased] = Field(
        None, description='The sub-issue of the parent.'
    )
    typename__: Optional[Literal['RemoveSubIssuePayload']] = Field(
        'RemoveSubIssuePayload', alias='__typename'
    )


class RemoveUpvotePayload(BaseModel):
    """
    Autogenerated return type of RemoveUpvote.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subject: Optional[Votable] = Field(None, description='The votable subject.')
    typename__: Optional[Literal['RemoveUpvotePayload']] = Field(
        'RemoveUpvotePayload', alias='__typename'
    )


class RemovedFromMergeQueueEvent(Node):
    """
    Represents a 'removed_from_merge_queue' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    beforeCommit: Optional[Commit_aliased] = Field(
        None,
        description="Identifies the before commit SHA for the 'removed_from_merge_queue' event.",
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    enqueuer: Optional[User_aliased] = Field(
        None, description='The user who removed this Pull Request from the merge queue'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RemovedFromMergeQueueEvent object'
    )
    mergeQueue: Optional[MergeQueue] = Field(
        None, description='The merge queue where this pull request was removed from.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='PullRequest referenced by event.'
    )
    reason: Optional[String] = Field(
        None, description='The reason this pull request was removed from the queue.'
    )
    typename__: Optional[Literal['RemovedFromMergeQueueEvent']] = Field(
        'RemovedFromMergeQueueEvent', alias='__typename'
    )


class RemovedFromProjectEvent(Node):
    """
    Represents a 'removed_from_project' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RemovedFromProjectEvent object'
    )
    project: Optional[Project] = Field(None, description='Project referenced by event.')
    projectColumnName: String = Field(
        ..., description='Column name referenced by this project event.'
    )
    typename__: Optional[Literal['RemovedFromProjectEvent']] = Field(
        'RemovedFromProjectEvent', alias='__typename'
    )


class RenamedTitleEvent(Node):
    """
    Represents a 'renamed' event on a given issue or pull request
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    currentTitle: String = Field(
        ..., description='Identifies the current title of the issue or pull request.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RenamedTitleEvent object'
    )
    previousTitle: String = Field(
        ..., description='Identifies the previous title of the issue or pull request.'
    )
    subject: RenamedTitleSubject = Field(..., description='Subject that was renamed.')
    typename__: Optional[Literal['RenamedTitleEvent']] = Field(
        'RenamedTitleEvent', alias='__typename'
    )


class ReopenDiscussionPayload(BaseModel):
    """
    Autogenerated return type of ReopenDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that was reopened.'
    )
    typename__: Optional[Literal['ReopenDiscussionPayload']] = Field(
        'ReopenDiscussionPayload', alias='__typename'
    )


class ReopenIssuePayload(BaseModel):
    """
    Autogenerated return type of ReopenIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The issue that was opened.'
    )
    typename__: Optional[Literal['ReopenIssuePayload']] = Field(
        'ReopenIssuePayload', alias='__typename'
    )


class ReopenPullRequestPayload(BaseModel):
    """
    Autogenerated return type of ReopenPullRequest.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that was reopened.'
    )
    typename__: Optional[Literal['ReopenPullRequestPayload']] = Field(
        'ReopenPullRequestPayload', alias='__typename'
    )


class ReopenedEvent(Node):
    """
    Represents a 'reopened' event on any `Closable`.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    closable: Closable = Field(..., description='Object that was reopened.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ReopenedEvent object')
    stateReason: Optional[IssueStateReason] = Field(
        None, description='The reason the issue state was changed to open.'
    )
    typename__: Optional[Literal['ReopenedEvent']] = Field(
        'ReopenedEvent', alias='__typename'
    )


class ReorderEnvironmentPayload(BaseModel):
    """
    Autogenerated return type of ReorderEnvironment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    environment: Optional[Environment] = Field(
        None, description='The environment that was reordered'
    )
    typename__: Optional[Literal['ReorderEnvironmentPayload']] = Field(
        'ReorderEnvironmentPayload', alias='__typename'
    )


class ReplaceActorsForAssignablePayload(BaseModel):
    """
    Autogenerated return type of ReplaceActorsForAssignable.
    """

    assignable: Optional[Assignable] = Field(
        None, description='The item that was assigned.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['ReplaceActorsForAssignablePayload']] = Field(
        'ReplaceActorsForAssignablePayload', alias='__typename'
    )


class RepoAccessAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.access event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoAccessAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    visibility: Optional[RepoAccessAuditEntryVisibility] = Field(
        None, description='The visibility of the repository'
    )
    typename__: Optional[Literal['RepoAccessAuditEntry']] = Field(
        'RepoAccessAuditEntry', alias='__typename'
    )


class RepoAddMemberAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.add_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoAddMemberAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    visibility: Optional[RepoAddMemberAuditEntryVisibility] = Field(
        None, description='The visibility of the repository'
    )
    typename__: Optional[Literal['RepoAddMemberAuditEntry']] = Field(
        'RepoAddMemberAuditEntry', alias='__typename'
    )


class RepoAddTopicAuditEntry(
    AuditEntry,
    Node,
    OrganizationAuditEntryData,
    RepositoryAuditEntryData,
    TopicAuditEntryData,
):
    """
    Audit log entry for a repo.add_topic event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoAddTopicAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    topic: Optional[Topic] = Field(
        None, description='The name of the topic added to the repository'
    )
    topicName: Optional[String] = Field(
        None, description='The name of the topic added to the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoAddTopicAuditEntry']] = Field(
        'RepoAddTopicAuditEntry', alias='__typename'
    )


class RepoArchivedAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.archived event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoArchivedAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    visibility: Optional[RepoArchivedAuditEntryVisibility] = Field(
        None, description='The visibility of the repository'
    )
    typename__: Optional[Literal['RepoArchivedAuditEntry']] = Field(
        'RepoArchivedAuditEntry', alias='__typename'
    )


class RepoChangeMergeSettingAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.change_merge_setting event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoChangeMergeSettingAuditEntry object'
    )
    isEnabled: Optional[Boolean] = Field(
        None,
        description='Whether the change was to enable (true) or disable (false) the merge type',
    )
    mergeType: Optional[RepoChangeMergeSettingAuditEntryMergeType] = Field(
        None, description='The merge method affected by the change'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoChangeMergeSettingAuditEntry']] = Field(
        'RepoChangeMergeSettingAuditEntry', alias='__typename'
    )


class RepoConfigDisableAnonymousGitAccessAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.disable_anonymous_git_access event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigDisableAnonymousGitAccessAuditEntry']] = (
        Field('RepoConfigDisableAnonymousGitAccessAuditEntry', alias='__typename')
    )


class RepoConfigDisableCollaboratorsOnlyAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.disable_collaborators_only event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigDisableCollaboratorsOnlyAuditEntry']] = (
        Field('RepoConfigDisableCollaboratorsOnlyAuditEntry', alias='__typename')
    )


class RepoConfigDisableContributorsOnlyAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.disable_contributors_only event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigDisableContributorsOnlyAuditEntry']] = (
        Field('RepoConfigDisableContributorsOnlyAuditEntry', alias='__typename')
    )


class RepoConfigDisableSockpuppetDisallowedAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigDisableSockpuppetDisallowedAuditEntry']] = (
        Field('RepoConfigDisableSockpuppetDisallowedAuditEntry', alias='__typename')
    )


class RepoConfigEnableAnonymousGitAccessAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.enable_anonymous_git_access event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigEnableAnonymousGitAccessAuditEntry']] = (
        Field('RepoConfigEnableAnonymousGitAccessAuditEntry', alias='__typename')
    )


class RepoConfigEnableCollaboratorsOnlyAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.enable_collaborators_only event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigEnableCollaboratorsOnlyAuditEntry']] = (
        Field('RepoConfigEnableCollaboratorsOnlyAuditEntry', alias='__typename')
    )


class RepoConfigEnableContributorsOnlyAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.enable_contributors_only event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigEnableContributorsOnlyAuditEntry']] = Field(
        'RepoConfigEnableContributorsOnlyAuditEntry', alias='__typename'
    )


class RepoConfigEnableSockpuppetDisallowedAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigEnableSockpuppetDisallowedAuditEntry']] = (
        Field('RepoConfigEnableSockpuppetDisallowedAuditEntry', alias='__typename')
    )


class RepoConfigLockAnonymousGitAccessAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.lock_anonymous_git_access event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigLockAnonymousGitAccessAuditEntry']] = Field(
        'RepoConfigLockAnonymousGitAccessAuditEntry', alias='__typename'
    )


class RepoConfigUnlockAnonymousGitAccessAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.config.unlock_anonymous_git_access event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoConfigUnlockAnonymousGitAccessAuditEntry']] = (
        Field('RepoConfigUnlockAnonymousGitAccessAuditEntry', alias='__typename')
    )


class RepoCreateAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.create event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    forkParentName: Optional[String] = Field(
        None,
        description='The name of the parent repository for this forked repository.',
    )
    forkSourceName: Optional[String] = Field(
        None, description='The name of the root repository for this network.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoCreateAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    visibility: Optional[RepoCreateAuditEntryVisibility] = Field(
        None, description='The visibility of the repository'
    )
    typename__: Optional[Literal['RepoCreateAuditEntry']] = Field(
        'RepoCreateAuditEntry', alias='__typename'
    )


class RepoDestroyAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.destroy event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoDestroyAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    visibility: Optional[RepoDestroyAuditEntryVisibility] = Field(
        None, description='The visibility of the repository'
    )
    typename__: Optional[Literal['RepoDestroyAuditEntry']] = Field(
        'RepoDestroyAuditEntry', alias='__typename'
    )


class RepoRemoveMemberAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData
):
    """
    Audit log entry for a repo.remove_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoRemoveMemberAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    visibility: Optional[RepoRemoveMemberAuditEntryVisibility] = Field(
        None, description='The visibility of the repository'
    )
    typename__: Optional[Literal['RepoRemoveMemberAuditEntry']] = Field(
        'RepoRemoveMemberAuditEntry', alias='__typename'
    )


class RepoRemoveTopicAuditEntry(
    AuditEntry,
    Node,
    OrganizationAuditEntryData,
    RepositoryAuditEntryData,
    TopicAuditEntryData,
):
    """
    Audit log entry for a repo.remove_topic event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepoRemoveTopicAuditEntry object'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    topic: Optional[Topic] = Field(
        None, description='The name of the topic added to the repository'
    )
    topicName: Optional[String] = Field(
        None, description='The name of the topic added to the repository'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepoRemoveTopicAuditEntry']] = Field(
        'RepoRemoveTopicAuditEntry', alias='__typename'
    )


class Repository(
    Node,
    PackageOwner,
    ProjectOwner,
    ProjectV2Recent,
    RepositoryInfo,
    Starrable,
    Subscribable,
    UniformResourceLocatable,
):
    """
    A repository contains the content for a project.
    """

    allowUpdateBranch: Boolean = Field(
        ...,
        description='Whether or not a pull request head branch that is behind its base branch can\nalways be updated even if it is not required to be up to date before merging.',
    )
    archivedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the repository was archived.',
    )
    assignableUsers: UserConnection = Field(
        ...,
        description='A list of users that can be assigned to issues in this repository.',
    )
    autoMergeAllowed: Boolean = Field(
        ...,
        description='Whether or not Auto-merge can be enabled on pull requests in this repository.',
    )
    branchProtectionRules: BranchProtectionRuleConnection = Field(
        ..., description='A list of branch protection rules for this repository.'
    )
    codeOfConduct: Optional[CodeOfConduct] = Field(
        None, description='Returns the code of conduct for this repository'
    )
    codeowners: Optional[RepositoryCodeowners] = Field(
        None,
        description="Information extracted from the repository's `CODEOWNERS` file.",
    )
    collaborators: Optional[RepositoryCollaboratorConnection] = Field(
        None, description='A list of collaborators associated with the repository.'
    )
    commitComments: CommitCommentConnection = Field(
        ..., description='A list of commit comments associated with the repository.'
    )
    contactLinks: Optional[List[RepositoryContactLink]] = Field(
        None, description='Returns a list of contact links associated to the repository'
    )
    contributingGuidelines: Optional[ContributingGuidelines] = Field(
        None, description='Returns the contributing guidelines for this repository.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    defaultBranchRef: Optional[Ref] = Field(
        None, description="The Ref associated with the repository's default branch."
    )
    deleteBranchOnMerge: Boolean = Field(
        ...,
        description='Whether or not branches are automatically deleted when merged in this repository.',
    )
    dependencyGraphManifests: Optional[DependencyGraphManifestConnection] = Field(
        None, description='A list of dependency manifests contained in the repository'
    )
    deployKeys: DeployKeyConnection = Field(
        ..., description='A list of deploy keys that are on this repository.'
    )
    deployments: DeploymentConnection = Field(
        ..., description='Deployments associated with the repository'
    )
    description: Optional[String] = Field(
        None, description='The description of the repository.'
    )
    descriptionHTML: HTML = Field(
        ..., description='The description of the repository rendered to HTML.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None,
        description='Returns a single discussion from the current repository by number.',
    )
    discussionCategories: DiscussionCategoryConnection = Field(
        ...,
        description='A list of discussion categories that are available in the repository.',
    )
    discussionCategory: Optional[DiscussionCategory] = Field(
        None, description='A discussion category by slug.'
    )
    discussions: DiscussionConnection = Field(
        ...,
        description='A list of discussions that have been opened in the repository.',
    )
    diskUsage: Optional[Int] = Field(
        None, description='The number of kilobytes this repository occupies on disk.'
    )
    environment: Optional[Environment] = Field(
        None,
        description='Returns a single active environment from the current repository by name.',
    )
    environments: EnvironmentConnection = Field(
        ..., description='A list of environments that are in this repository.'
    )
    forkCount: Int = Field(
        ...,
        description='Returns how many forks there are of this repository in the whole network.',
    )
    forkingAllowed: Boolean = Field(
        ..., description='Whether this repository allows forks.'
    )
    forks: RepositoryConnection = Field(
        ..., description='A list of direct forked repositories.'
    )
    fundingLinks: List[FundingLink] = Field(
        ..., description='The funding links for this repository'
    )
    hasDiscussionsEnabled: Boolean = Field(
        ...,
        description='Indicates if the repository has the Discussions feature enabled.',
    )
    hasIssuesEnabled: Boolean = Field(
        ..., description='Indicates if the repository has issues feature enabled.'
    )
    hasProjectsEnabled: Boolean = Field(
        ..., description='Indicates if the repository has the Projects feature enabled.'
    )
    hasSponsorshipsEnabled: Boolean = Field(
        ...,
        description='Indicates if the repository displays a Sponsor button for financial contributions.',
    )
    hasVulnerabilityAlertsEnabled: Boolean = Field(
        ..., description='Whether vulnerability alerts are enabled for the repository.'
    )
    hasWikiEnabled: Boolean = Field(
        ..., description='Indicates if the repository has wiki feature enabled.'
    )
    homepageUrl: Optional[URI] = Field(None, description="The repository's URL.")
    id: ID_aliased = Field(..., description='The Node ID of the Repository object')
    interactionAbility: Optional[RepositoryInteractionAbility] = Field(
        None, description='The interaction ability settings for this repository.'
    )
    isArchived: Boolean = Field(
        ..., description='Indicates if the repository is unmaintained.'
    )
    isBlankIssuesEnabled: Boolean = Field(
        ..., description='Returns true if blank issue creation is allowed'
    )
    isDisabled: Boolean = Field(
        ..., description='Returns whether or not this repository disabled.'
    )
    isEmpty: Boolean = Field(
        ..., description='Returns whether or not this repository is empty.'
    )
    isFork: Boolean = Field(..., description='Identifies if the repository is a fork.')
    isInOrganization: Boolean = Field(
        ...,
        description='Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.',
    )
    isLocked: Boolean = Field(
        ..., description='Indicates if the repository has been locked or not.'
    )
    isMirror: Boolean = Field(
        ..., description='Identifies if the repository is a mirror.'
    )
    isPrivate: Boolean = Field(
        ..., description='Identifies if the repository is private or internal.'
    )
    isSecurityPolicyEnabled: Optional[Boolean] = Field(
        None, description='Returns true if this repository has a security policy'
    )
    isTemplate: Boolean = Field(
        ...,
        description='Identifies if the repository is a template that can be used to generate new repositories.',
    )
    isUserConfigurationRepository: Boolean = Field(
        ..., description='Is this repository a user configuration repository?'
    )
    issue: Optional[Issue_aliased] = Field(
        None,
        description='Returns a single issue from the current repository by number.',
    )
    issueOrPullRequest: Optional[IssueOrPullRequest] = Field(
        None,
        description='Returns a single issue-like object from the current repository by number.',
    )
    issueTemplates: Optional[List[IssueTemplate]] = Field(
        None,
        description='Returns a list of issue templates associated to the repository',
    )
    issueType: Optional[IssueType] = Field(
        None, description='Returns a single issue type by name'
    )
    issueTypes: Optional[IssueTypeConnection] = Field(
        None, description="A list of the repository's issue types"
    )
    issues: IssueConnection = Field(
        ..., description='A list of issues that have been opened in the repository.'
    )
    label: Optional[Label] = Field(None, description='Returns a single label by name')
    labels: Optional[LabelConnection] = Field(
        None, description='A list of labels associated with the repository.'
    )
    languages: Optional[LanguageConnection] = Field(
        None,
        description='A list containing a breakdown of the language composition of the repository.',
    )
    latestRelease: Optional[Release] = Field(
        None, description='Get the latest release for the repository if one exists.'
    )
    licenseInfo: Optional[License] = Field(
        None, description='The license associated with the repository'
    )
    lockReason: Optional[RepositoryLockReason] = Field(
        None, description='The reason the repository has been locked.'
    )
    mentionableUsers: UserConnection = Field(
        ...,
        description='A list of Users that can be mentioned in the context of the repository.',
    )
    mergeCommitAllowed: Boolean = Field(
        ...,
        description='Whether or not PRs are merged with a merge commit on this repository.',
    )
    mergeCommitMessage: MergeCommitMessage = Field(
        ...,
        description='How the default commit message will be generated when merging a pull request.',
    )
    mergeCommitTitle: MergeCommitTitle = Field(
        ...,
        description='How the default commit title will be generated when merging a pull request.',
    )
    mergeQueue: Optional[MergeQueue] = Field(
        None,
        description='The merge queue for a specified branch, otherwise the default branch if not provided.',
    )
    milestone: Optional[Milestone] = Field(
        None,
        description='Returns a single milestone from the current repository by number.',
    )
    milestones: Optional[MilestoneConnection] = Field(
        None, description='A list of milestones associated with the repository.'
    )
    mirrorUrl: Optional[URI] = Field(
        None, description="The repository's original mirror URL."
    )
    name: String = Field(..., description='The name of the repository.')
    nameWithOwner: String = Field(..., description="The repository's name with owner.")
    object: Optional[GitObject] = Field(
        None, description='A Git object in the repository'
    )
    openGraphImageUrl: URI = Field(
        ...,
        description='The image used to represent this repository in Open Graph data.',
    )
    owner: RepositoryOwner = Field(..., description='The User owner of the repository.')
    packages: PackageConnection = Field(
        ..., description='A list of packages under the owner.'
    )
    parent: Optional[Repository_aliased] = Field(
        None, description='The repository parent, if this is a fork.'
    )
    pinnedDiscussions: PinnedDiscussionConnection = Field(
        ...,
        description='A list of discussions that have been pinned in this repository.',
    )
    pinnedEnvironments: Optional[PinnedEnvironmentConnection] = Field(
        None, description='A list of pinned environments for this repository.'
    )
    pinnedIssues: Optional[PinnedIssueConnection] = Field(
        None, description='A list of pinned issues for this repository.'
    )
    planFeatures: RepositoryPlanFeatures = Field(
        ...,
        description="Returns information about the availability of certain features and limits based on the repository's billing plan.",
    )
    primaryLanguage: Optional[Language] = Field(
        None, description="The primary language of the repository's code."
    )
    project: Optional[Project] = Field(None, description='Find project by number.')
    projectV2: Optional[ProjectV2_aliased] = Field(
        None,
        description='Finds and returns the Project according to the provided Project number.',
    )
    projects: ProjectConnection = Field(
        ..., description='A list of projects under the owner.'
    )
    projectsResourcePath: URI = Field(
        ..., description="The HTTP path listing the repository's projects"
    )
    projectsUrl: URI = Field(
        ..., description="The HTTP URL listing the repository's projects"
    )
    projectsV2: ProjectV2Connection = Field(
        ..., description='List of projects linked to this repository.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None,
        description='Returns a single pull request from the current repository by number.',
    )
    pullRequestTemplates: Optional[List[PullRequestTemplate]] = Field(
        None,
        description='Returns a list of pull request templates associated to the repository',
    )
    pullRequests: PullRequestConnection = Field(
        ...,
        description='A list of pull requests that have been opened in the repository.',
    )
    pushedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the repository was last pushed to.',
    )
    rebaseMergeAllowed: Boolean = Field(
        ..., description='Whether or not rebase-merging is enabled on this repository.'
    )
    recentProjects: ProjectV2Connection = Field(
        ...,
        description='Recent projects that this user has modified in the context of the owner.',
    )
    ref: Optional[Ref] = Field(
        None, description='Fetch a given ref from the repository'
    )
    refs: Optional[RefConnection] = Field(
        None, description='Fetch a list of refs from the repository'
    )
    release: Optional[Release] = Field(
        None, description='Lookup a single release given various criteria.'
    )
    releases: ReleaseConnection = Field(
        ..., description='List of releases which are dependent on this repository.'
    )
    repositoryTopics: RepositoryTopicConnection = Field(
        ...,
        description='A list of applied repository-topic associations for this repository.',
    )
    resourcePath: URI = Field(..., description='The HTTP path for this repository')
    ruleset: Optional[RepositoryRuleset] = Field(
        None, description='Returns a single ruleset from the current repository by ID.'
    )
    rulesets: Optional[RepositoryRulesetConnection] = Field(
        None, description='A list of rulesets for this repository.'
    )
    securityPolicyUrl: Optional[URI] = Field(
        None, description='The security policy URL.'
    )
    shortDescriptionHTML: HTML = Field(
        ...,
        description='A description of the repository, rendered to HTML without any links in it.',
    )
    squashMergeAllowed: Boolean = Field(
        ..., description='Whether or not squash-merging is enabled on this repository.'
    )
    squashMergeCommitMessage: SquashMergeCommitMessage = Field(
        ...,
        description='How the default commit message will be generated when squash merging a pull request.',
    )
    squashMergeCommitTitle: SquashMergeCommitTitle = Field(
        ...,
        description='How the default commit title will be generated when squash merging a pull request.',
    )
    squashPrTitleUsedAsDefault: Boolean = Field(
        ...,
        description='Whether a squash merge commit can use the pull request title as default.',
    )
    sshUrl: GitSSHRemote = Field(
        ..., description='The SSH URL to clone this repository'
    )
    stargazerCount: Int = Field(
        ...,
        description='Returns a count of how many stargazers there are on this object',
    )
    stargazers: StargazerConnection = Field(
        ..., description='A list of users who have starred this starrable.'
    )
    submodules: SubmoduleConnection = Field(
        ...,
        description="Returns a list of all submodules in this repository parsed from the\n.gitmodules file as of the default branch's HEAD commit.",
    )
    suggestedActors: ActorConnection = Field(
        ...,
        description='A list of suggested actors that can be attributed to content in this repository.',
    )
    tempCloneToken: Optional[String] = Field(
        None, description='Temporary authentication token for cloning this repository.'
    )
    templateRepository: Optional[Repository_aliased] = Field(
        None,
        description='The repository from which this repository was generated, if any.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this repository')
    usesCustomOpenGraphImage: Boolean = Field(
        ...,
        description="Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.",
    )
    viewerCanAdminister: Boolean = Field(
        ...,
        description='Indicates whether the viewer has admin permissions on this repository.',
    )
    viewerCanCreateProjects: Boolean = Field(
        ..., description='Can the current viewer create new projects on this owner.'
    )
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerCanUpdateTopics: Boolean = Field(
        ...,
        description='Indicates whether the viewer can update the topics of this repository.',
    )
    viewerDefaultCommitEmail: Optional[String] = Field(
        None, description='The last commit email for the viewer.'
    )
    viewerDefaultMergeMethod: PullRequestMergeMethod = Field(
        ...,
        description='The last used merge method by the viewer or the default for the repository.',
    )
    viewerHasStarred: Boolean = Field(
        ...,
        description='Returns a boolean indicating whether the viewing user has starred this starrable.',
    )
    viewerPermission: Optional[RepositoryPermission] = Field(
        None,
        description='The users permission level on the repository. Will return null if authenticated as an GitHub App.',
    )
    viewerPossibleCommitEmails: Optional[List[String]] = Field(
        None, description='A list of emails this viewer can commit with.'
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    visibility: RepositoryVisibility = Field(
        ..., description="Indicates the repository's visibility level."
    )
    vulnerabilityAlert: Optional[RepositoryVulnerabilityAlert] = Field(
        None,
        description='Returns a single vulnerability alert from the current repository by number.',
    )
    vulnerabilityAlerts: Optional[RepositoryVulnerabilityAlertConnection] = Field(
        None, description='A list of vulnerability alerts that are on this repository.'
    )
    watchers: UserConnection = Field(
        ..., description='A list of users watching the repository.'
    )
    webCommitSignoffRequired: Boolean = Field(
        ...,
        description='Whether contributors are required to sign off on web-based commits in this repository.',
    )
    typename__: Optional[Literal['Repository']] = Field(
        'Repository', alias='__typename'
    )


class RepositoryCodeowners(BaseModel):
    """
    Information extracted from a repository's `CODEOWNERS` file.
    """

    errors: List[RepositoryCodeownersError] = Field(
        ...,
        description='Any problems that were encountered while parsing the `CODEOWNERS` file.',
    )
    typename__: Optional[Literal['RepositoryCodeowners']] = Field(
        'RepositoryCodeowners', alias='__typename'
    )


class RepositoryCodeownersError(BaseModel):
    """
    An error in a `CODEOWNERS` file.
    """

    column: Int = Field(..., description='The column number where the error occurs.')
    kind: String = Field(
        ..., description='A short string describing the type of error.'
    )
    line: Int = Field(..., description='The line number where the error occurs.')
    message: String = Field(
        ...,
        description='A complete description of the error, combining information from other fields.',
    )
    path: String = Field(..., description='The path to the file when the error occurs.')
    source: String = Field(
        ..., description='The content of the line where the error occurs.'
    )
    suggestion: Optional[String] = Field(
        None, description='A suggestion of how to fix the error.'
    )
    typename__: Optional[Literal['RepositoryCodeownersError']] = Field(
        'RepositoryCodeownersError', alias='__typename'
    )


class RepositoryCollaboratorConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[RepositoryCollaboratorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryCollaboratorConnection']] = Field(
        'RepositoryCollaboratorConnection', alias='__typename'
    )


class RepositoryCollaboratorEdge(BaseModel):
    """
    Represents a user who is a collaborator of a repository.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: User_aliased
    permission: RepositoryPermission = Field(
        ..., description='The permission the user has on the repository.'
    )
    permissionSources: Optional[List[PermissionSource]] = Field(
        None, description="A list of sources for the user's access to the repository."
    )
    typename__: Optional[Literal['RepositoryCollaboratorEdge']] = Field(
        'RepositoryCollaboratorEdge', alias='__typename'
    )


class RepositoryConnection(BaseModel):
    """
    A list of repositories owned by the subject.
    """

    edges: Optional[List[Optional[RepositoryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Repository]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    totalDiskUsage: Int = Field(
        ...,
        description='The total size in kilobytes of all repositories in the connection. Value will\nnever be larger than max 32-bit signed integer.',
    )
    typename__: Optional[Literal['RepositoryConnection']] = Field(
        'RepositoryConnection', alias='__typename'
    )


class RepositoryContactLink(BaseModel):
    """
    A repository contact link.
    """

    about: String = Field(..., description='The contact link purpose.')
    name: String = Field(..., description='The contact link name.')
    url: URI = Field(..., description='The contact link URL.')
    typename__: Optional[Literal['RepositoryContactLink']] = Field(
        'RepositoryContactLink', alias='__typename'
    )


class RepositoryEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Repository_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryEdge']] = Field(
        'RepositoryEdge', alias='__typename'
    )


class RepositoryIdConditionTarget(BaseModel):
    """
    Parameters to be used for the repository_id condition
    """

    repositoryIds: List[ID] = Field(
        ..., description='One of these repo IDs must match the repo.'
    )
    typename__: Optional[Literal['RepositoryIdConditionTarget']] = Field(
        'RepositoryIdConditionTarget', alias='__typename'
    )


class RepositoryInteractionAbility(BaseModel):
    """
    Repository interaction limit that applies to this object.
    """

    expiresAt: Optional[DateTime] = Field(
        None, description='The time the currently active limit expires.'
    )
    limit: RepositoryInteractionLimit = Field(
        ..., description='The current limit that is enabled on this object.'
    )
    origin: RepositoryInteractionLimitOrigin = Field(
        ..., description='The origin of the currently active interaction limit.'
    )
    typename__: Optional[Literal['RepositoryInteractionAbility']] = Field(
        'RepositoryInteractionAbility', alias='__typename'
    )


class RepositoryInvitation(Node):
    """
    An invitation for a user to be added to a repository.
    """

    email: Optional[String] = Field(
        None, description='The email address that received the invitation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepositoryInvitation object'
    )
    invitee: Optional[User_aliased] = Field(
        None, description='The user who received the invitation.'
    )
    inviter: User_aliased = Field(
        ..., description='The user who created the invitation.'
    )
    permalink: URI = Field(
        ..., description='The permalink for this repository invitation.'
    )
    permission: RepositoryPermission = Field(
        ..., description='The permission granted on this repository by this invitation.'
    )
    repository: Optional[RepositoryInfo] = Field(
        None, description='The Repository the user is invited to.'
    )
    typename__: Optional[Literal['RepositoryInvitation']] = Field(
        'RepositoryInvitation', alias='__typename'
    )


class RepositoryInvitationConnection(BaseModel):
    """
    A list of repository invitations.
    """

    edges: Optional[List[Optional[RepositoryInvitationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RepositoryInvitation]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryInvitationConnection']] = Field(
        'RepositoryInvitationConnection', alias='__typename'
    )


class RepositoryInvitationEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RepositoryInvitation] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryInvitationEdge']] = Field(
        'RepositoryInvitationEdge', alias='__typename'
    )


class RepositoryMigration(Migration, Node):
    """
    A GitHub Enterprise Importer (GEI) repository migration.
    """

    continueOnError: Boolean = Field(
        ..., description='The migration flag to continue on error.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[String] = Field(
        None, description='Identifies the primary key from the database.'
    )
    failureReason: Optional[String] = Field(
        None, description='The reason the migration failed.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepositoryMigration object'
    )
    migrationLogUrl: Optional[URI] = Field(
        None,
        description='The URL for the migration log (expires 1 day after migration completes).',
    )
    migrationSource: MigrationSource = Field(..., description='The migration source.')
    repositoryName: String = Field(..., description='The target repository name.')
    sourceUrl: URI = Field(
        ...,
        description='The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.',
    )
    state: MigrationState = Field(..., description='The migration state.')
    warningsCount: Int = Field(
        ...,
        description='The number of warnings encountered for this migration. To review the warnings,\ncheck the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).',
    )
    typename__: Optional[Literal['RepositoryMigration']] = Field(
        'RepositoryMigration', alias='__typename'
    )


class RepositoryMigrationConnection(BaseModel):
    """
    A list of migrations.
    """

    edges: Optional[List[Optional[RepositoryMigrationEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RepositoryMigration]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryMigrationConnection']] = Field(
        'RepositoryMigrationConnection', alias='__typename'
    )


class RepositoryMigrationEdge(BaseModel):
    """
    Represents a repository migration.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RepositoryMigration] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryMigrationEdge']] = Field(
        'RepositoryMigrationEdge', alias='__typename'
    )


class RepositoryNameConditionTarget(BaseModel):
    """
    Parameters to be used for the repository_name condition
    """

    exclude: List[String] = Field(
        ...,
        description='Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.',
    )
    include: List[String] = Field(
        ...,
        description='Array of repository names or patterns to include. One of these patterns must\nmatch for the condition to pass. Also accepts `~ALL` to include all repositories.',
    )
    protected: Boolean = Field(
        ...,
        description='Target changes that match these patterns will be prevented except by those with bypass permissions.',
    )
    typename__: Optional[Literal['RepositoryNameConditionTarget']] = Field(
        'RepositoryNameConditionTarget', alias='__typename'
    )


class RepositoryPlanFeatures(BaseModel):
    """
    Information about the availability of features and limits for a repository based on its billing plan.
    """

    codeowners: Boolean = Field(
        ...,
        description='Whether reviews can be automatically requested and enforced with a CODEOWNERS file',
    )
    draftPullRequests: Boolean = Field(
        ..., description='Whether pull requests can be created as or converted to draft'
    )
    maximumAssignees: Int = Field(
        ...,
        description='Maximum number of users that can be assigned to an issue or pull request',
    )
    maximumManualReviewRequests: Int = Field(
        ...,
        description='Maximum number of manually-requested reviews on a pull request',
    )
    teamReviewRequests: Boolean = Field(
        ..., description='Whether teams can be requested to review pull requests'
    )
    typename__: Optional[Literal['RepositoryPlanFeatures']] = Field(
        'RepositoryPlanFeatures', alias='__typename'
    )


class RepositoryPropertyConditionTarget(BaseModel):
    """
    Parameters to be used for the repository_property condition
    """

    exclude: List[PropertyTargetDefinition] = Field(
        ..., description='Array of repository properties that must not match.'
    )
    include: List[PropertyTargetDefinition] = Field(
        ..., description='Array of repository properties that must match'
    )
    typename__: Optional[Literal['RepositoryPropertyConditionTarget']] = Field(
        'RepositoryPropertyConditionTarget', alias='__typename'
    )


class RepositoryRule(Node):
    """
    A repository rule.
    """

    id: ID_aliased = Field(..., description='The Node ID of the RepositoryRule object')
    parameters: Optional[RuleParameters] = Field(
        None, description='The parameters for this rule.'
    )
    repositoryRuleset: Optional[RepositoryRuleset] = Field(
        None,
        description='The repository ruleset associated with this rule configuration',
    )
    type: RepositoryRuleType = Field(..., description='The type of rule.')
    typename__: Optional[Literal['RepositoryRule']] = Field(
        'RepositoryRule', alias='__typename'
    )


class RepositoryRuleConditions(BaseModel):
    """
    Set of conditions that determine if a ruleset will evaluate
    """

    refName: Optional[RefNameConditionTarget] = Field(
        None, description='Configuration for the ref_name condition'
    )
    repositoryId: Optional[RepositoryIdConditionTarget] = Field(
        None, description='Configuration for the repository_id condition'
    )
    repositoryName: Optional[RepositoryNameConditionTarget] = Field(
        None, description='Configuration for the repository_name condition'
    )
    repositoryProperty: Optional[RepositoryPropertyConditionTarget] = Field(
        None, description='Configuration for the repository_property condition'
    )
    typename__: Optional[Literal['RepositoryRuleConditions']] = Field(
        'RepositoryRuleConditions', alias='__typename'
    )


class RepositoryRuleConnection(BaseModel):
    """
    The connection type for RepositoryRule.
    """

    edges: Optional[List[Optional[RepositoryRuleEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RepositoryRule]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryRuleConnection']] = Field(
        'RepositoryRuleConnection', alias='__typename'
    )


class RepositoryRuleEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RepositoryRule] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryRuleEdge']] = Field(
        'RepositoryRuleEdge', alias='__typename'
    )


class RepositoryRuleset(Node):
    """
    A repository ruleset.
    """

    bypassActors: Optional[RepositoryRulesetBypassActorConnection] = Field(
        None, description='The actors that can bypass this ruleset'
    )
    conditions: RepositoryRuleConditions = Field(
        ...,
        description='The set of conditions that must evaluate to true for this ruleset to apply',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    enforcement: RuleEnforcement = Field(
        ..., description='The enforcement level of this ruleset'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepositoryRuleset object'
    )
    name: String = Field(..., description='Name of the ruleset.')
    rules: Optional[RepositoryRuleConnection] = Field(
        None, description='List of rules.'
    )
    source: RuleSource = Field(..., description='Source of ruleset.')
    target: Optional[RepositoryRulesetTarget] = Field(
        None, description='Target of the ruleset.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['RepositoryRuleset']] = Field(
        'RepositoryRuleset', alias='__typename'
    )


class RepositoryRulesetBypassActor(Node):
    """
    A team or app that has the ability to bypass a rules defined on a ruleset
    """

    actor: Optional[BypassActor] = Field(
        None, description='The actor that can bypass rules.'
    )
    bypassMode: Optional[RepositoryRulesetBypassActorBypassMode] = Field(
        None, description='The mode for the bypass actor'
    )
    deployKey: Boolean = Field(
        ..., description='This actor represents the ability for a deploy key to bypass'
    )
    enterpriseOwner: Boolean = Field(
        ...,
        description='This actor represents the ability for an enterprise owner to bypass',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepositoryRulesetBypassActor object'
    )
    organizationAdmin: Boolean = Field(
        ...,
        description='This actor represents the ability for an organization owner to bypass',
    )
    repositoryRoleDatabaseId: Optional[Int] = Field(
        None,
        description="If the actor is a repository role, the repository role's ID that can bypass",
    )
    repositoryRoleName: Optional[String] = Field(
        None,
        description="If the actor is a repository role, the repository role's name that can bypass",
    )
    repositoryRuleset: Optional[RepositoryRuleset] = Field(
        None, description='Identifies the ruleset associated with the allowed actor'
    )
    typename__: Optional[Literal['RepositoryRulesetBypassActor']] = Field(
        'RepositoryRulesetBypassActor', alias='__typename'
    )


class RepositoryRulesetBypassActorConnection(BaseModel):
    """
    The connection type for RepositoryRulesetBypassActor.
    """

    edges: Optional[List[Optional[RepositoryRulesetBypassActorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RepositoryRulesetBypassActor]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryRulesetBypassActorConnection']] = Field(
        'RepositoryRulesetBypassActorConnection', alias='__typename'
    )


class RepositoryRulesetBypassActorEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RepositoryRulesetBypassActor] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryRulesetBypassActorEdge']] = Field(
        'RepositoryRulesetBypassActorEdge', alias='__typename'
    )


class RepositoryRulesetConnection(BaseModel):
    """
    The connection type for RepositoryRuleset.
    """

    edges: Optional[List[Optional[RepositoryRulesetEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RepositoryRuleset]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryRulesetConnection']] = Field(
        'RepositoryRulesetConnection', alias='__typename'
    )


class RepositoryRulesetEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RepositoryRuleset] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryRulesetEdge']] = Field(
        'RepositoryRulesetEdge', alias='__typename'
    )


class RepositoryTopic(Node, UniformResourceLocatable):
    """
    A repository-topic connects a repository to a topic.
    """

    id: ID_aliased = Field(..., description='The Node ID of the RepositoryTopic object')
    resourcePath: URI = Field(
        ..., description='The HTTP path for this repository-topic.'
    )
    topic: Topic = Field(..., description='The topic.')
    url: URI = Field(..., description='The HTTP URL for this repository-topic.')
    typename__: Optional[Literal['RepositoryTopic']] = Field(
        'RepositoryTopic', alias='__typename'
    )


class RepositoryTopicConnection(BaseModel):
    """
    The connection type for RepositoryTopic.
    """

    edges: Optional[List[Optional[RepositoryTopicEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RepositoryTopic]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryTopicConnection']] = Field(
        'RepositoryTopicConnection', alias='__typename'
    )


class RepositoryTopicEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RepositoryTopic] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryTopicEdge']] = Field(
        'RepositoryTopicEdge', alias='__typename'
    )


class RepositoryVisibilityChangeDisableAuditEntry(
    AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a repository_visibility_change.disable event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepositoryVisibilityChangeDisableAuditEntry']] = (
        Field('RepositoryVisibilityChangeDisableAuditEntry', alias='__typename')
    )


class RepositoryVisibilityChangeEnableAuditEntry(
    AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData
):
    """
    Audit log entry for a repository_visibility_change.enable event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    enterpriseResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this enterprise.'
    )
    enterpriseSlug: Optional[String] = Field(
        None, description='The slug of the enterprise.'
    )
    enterpriseUrl: Optional[URI] = Field(
        None, description='The HTTP URL for this enterprise.'
    )
    id: ID_aliased = Field(
        ...,
        description='The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object',
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['RepositoryVisibilityChangeEnableAuditEntry']] = Field(
        'RepositoryVisibilityChangeEnableAuditEntry', alias='__typename'
    )


class RepositoryVulnerabilityAlert(Node, RepositoryNode):
    """
    A Dependabot alert for a repository with a dependency affected by a security vulnerability.
    """

    autoDismissedAt: Optional[DateTime] = Field(
        None, description='When was the alert auto-dismissed?'
    )
    createdAt: DateTime = Field(..., description='When was the alert created?')
    dependabotUpdate: Optional[DependabotUpdate] = Field(
        None, description='The associated Dependabot update'
    )
    dependencyRelationship: Optional[
        RepositoryVulnerabilityAlertDependencyRelationship
    ] = Field(None, description="The relationship of an alert's dependency.")
    dependencyScope: Optional[RepositoryVulnerabilityAlertDependencyScope] = Field(
        None, description="The scope of an alert's dependency"
    )
    dismissComment: Optional[String] = Field(
        None, description='Comment explaining the reason the alert was dismissed'
    )
    dismissReason: Optional[String] = Field(
        None, description='The reason the alert was dismissed'
    )
    dismissedAt: Optional[DateTime] = Field(
        None, description='When was the alert dismissed?'
    )
    dismisser: Optional[User_aliased] = Field(
        None, description='The user who dismissed the alert'
    )
    fixedAt: Optional[DateTime] = Field(None, description='When was the alert fixed?')
    id: ID_aliased = Field(
        ..., description='The Node ID of the RepositoryVulnerabilityAlert object'
    )
    number: Int = Field(..., description='Identifies the alert number.')
    repository: Repository_aliased = Field(..., description='The associated repository')
    securityAdvisory: Optional[SecurityAdvisory] = Field(
        None, description='The associated security advisory'
    )
    securityVulnerability: Optional[SecurityVulnerability] = Field(
        None, description='The associated security vulnerability'
    )
    state: RepositoryVulnerabilityAlertState = Field(
        ..., description='Identifies the state of the alert.'
    )
    vulnerableManifestFilename: String = Field(
        ..., description='The vulnerable manifest filename'
    )
    vulnerableManifestPath: String = Field(
        ..., description='The vulnerable manifest path'
    )
    vulnerableRequirements: Optional[String] = Field(
        None, description='The vulnerable requirements'
    )
    typename__: Optional[Literal['RepositoryVulnerabilityAlert']] = Field(
        'RepositoryVulnerabilityAlert', alias='__typename'
    )


class RepositoryVulnerabilityAlertConnection(BaseModel):
    """
    The connection type for RepositoryVulnerabilityAlert.
    """

    edges: Optional[List[Optional[RepositoryVulnerabilityAlertEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RepositoryVulnerabilityAlert]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RepositoryVulnerabilityAlertConnection']] = Field(
        'RepositoryVulnerabilityAlertConnection', alias='__typename'
    )


class RepositoryVulnerabilityAlertEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RepositoryVulnerabilityAlert] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RepositoryVulnerabilityAlertEdge']] = Field(
        'RepositoryVulnerabilityAlertEdge', alias='__typename'
    )


class ReprioritizeSubIssuePayload(BaseModel):
    """
    Autogenerated return type of ReprioritizeSubIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The parent issue that the sub-issue was reprioritized in.'
    )
    typename__: Optional[Literal['ReprioritizeSubIssuePayload']] = Field(
        'ReprioritizeSubIssuePayload', alias='__typename'
    )


class RequestReviewsPayload(BaseModel):
    """
    Autogenerated return type of RequestReviews.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that is getting requests.'
    )
    requestedReviewersEdge: Optional[UserEdge] = Field(
        None, description='The edge from the pull request to the requested reviewers.'
    )
    typename__: Optional[Literal['RequestReviewsPayload']] = Field(
        'RequestReviewsPayload', alias='__typename'
    )


class RequestedReviewerConnection(BaseModel):
    """
    The connection type for RequestedReviewer.
    """

    edges: Optional[List[Optional[RequestedReviewerEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[RequestedReviewer]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['RequestedReviewerConnection']] = Field(
        'RequestedReviewerConnection', alias='__typename'
    )


class RequestedReviewerEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[RequestedReviewer] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['RequestedReviewerEdge']] = Field(
        'RequestedReviewerEdge', alias='__typename'
    )


class RequiredDeploymentsParameters(BaseModel):
    """
    Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
    """

    requiredDeploymentEnvironments: List[String] = Field(
        ...,
        description='The environments that must be successfully deployed to before branches can be merged.',
    )
    typename__: Optional[Literal['RequiredDeploymentsParameters']] = Field(
        'RequiredDeploymentsParameters', alias='__typename'
    )


class RequiredStatusCheckDescription(BaseModel):
    """
    Represents a required status check for a protected branch, but not any specific run of that check.
    """

    app: Optional[App_aliased] = Field(
        None,
        description='The App that must provide this status in order for it to be accepted.',
    )
    context: String = Field(..., description='The name of this status.')
    typename__: Optional[Literal['RequiredStatusCheckDescription']] = Field(
        'RequiredStatusCheckDescription', alias='__typename'
    )


class RequiredStatusChecksParameters(BaseModel):
    """
    Choose which status checks must pass before the ref is updated. When enabled,
    commits must first be pushed to another ref where the checks pass.
    """

    doNotEnforceOnCreate: Boolean = Field(
        ...,
        description='Allow repositories and branches to be created if a check would otherwise prohibit it.',
    )
    requiredStatusChecks: List[StatusCheckConfiguration] = Field(
        ..., description='Status checks that are required.'
    )
    strictRequiredStatusChecksPolicy: Boolean = Field(
        ...,
        description='Whether pull requests targeting a matching branch must be tested with the\nlatest code. This setting will not take effect unless at least one status\ncheck is enabled.',
    )
    typename__: Optional[Literal['RequiredStatusChecksParameters']] = Field(
        'RequiredStatusChecksParameters', alias='__typename'
    )


class RerequestCheckSuitePayload(BaseModel):
    """
    Autogenerated return type of RerequestCheckSuite.
    """

    checkSuite: Optional[CheckSuite] = Field(
        None, description='The requested check suite.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['RerequestCheckSuitePayload']] = Field(
        'RerequestCheckSuitePayload', alias='__typename'
    )


class ResolveReviewThreadPayload(BaseModel):
    """
    Autogenerated return type of ResolveReviewThread.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    thread: Optional[PullRequestReviewThread_aliased] = Field(
        None, description='The thread to resolve.'
    )
    typename__: Optional[Literal['ResolveReviewThreadPayload']] = Field(
        'ResolveReviewThreadPayload', alias='__typename'
    )


class RestrictedContribution(Contribution):
    """
    Represents a private contribution a user made on GitHub.
    """

    isRestricted: Boolean = Field(
        ...,
        description="Whether this contribution is associated with a record you do not have access to. For\nexample, your own 'first issue' contribution may have been made on a repository you can no\nlonger access.",
    )
    occurredAt: DateTime = Field(..., description='When this contribution was made.')
    resourcePath: URI = Field(..., description='The HTTP path for this contribution.')
    url: URI = Field(..., description='The HTTP URL for this contribution.')
    user: User_aliased = Field(..., description='The user who made this contribution.')
    typename__: Optional[Literal['RestrictedContribution']] = Field(
        'RestrictedContribution', alias='__typename'
    )


class RetireSponsorsTierPayload(BaseModel):
    """
    Autogenerated return type of RetireSponsorsTier.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorsTier: Optional[SponsorsTier] = Field(
        None, description='The tier that was retired.'
    )
    typename__: Optional[Literal['RetireSponsorsTierPayload']] = Field(
        'RetireSponsorsTierPayload', alias='__typename'
    )


class RevertPullRequestPayload(BaseModel):
    """
    Autogenerated return type of RevertPullRequest.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The pull request that was reverted.'
    )
    revertPullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The new pull request that reverts the input pull request.'
    )
    typename__: Optional[Literal['RevertPullRequestPayload']] = Field(
        'RevertPullRequestPayload', alias='__typename'
    )


class ReviewDismissalAllowance(Node):
    """
    A user, team, or app who has the ability to dismiss a review on a protected branch.
    """

    actor: Optional[ReviewDismissalAllowanceActor] = Field(
        None, description='The actor that can dismiss.'
    )
    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None,
        description='Identifies the branch protection rule associated with the allowed user, team, or app.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ReviewDismissalAllowance object'
    )
    typename__: Optional[Literal['ReviewDismissalAllowance']] = Field(
        'ReviewDismissalAllowance', alias='__typename'
    )


class ReviewDismissalAllowanceConnection(BaseModel):
    """
    The connection type for ReviewDismissalAllowance.
    """

    edges: Optional[List[Optional[ReviewDismissalAllowanceEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ReviewDismissalAllowance]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ReviewDismissalAllowanceConnection']] = Field(
        'ReviewDismissalAllowanceConnection', alias='__typename'
    )


class ReviewDismissalAllowanceEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ReviewDismissalAllowance] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ReviewDismissalAllowanceEdge']] = Field(
        'ReviewDismissalAllowanceEdge', alias='__typename'
    )


class ReviewDismissedEvent(Node, UniformResourceLocatable):
    """
    Represents a 'review_dismissed' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    dismissalMessage: Optional[String] = Field(
        None,
        description="Identifies the optional message associated with the 'review_dismissed' event.",
    )
    dismissalMessageHTML: Optional[String] = Field(
        None,
        description='Identifies the optional message associated with the event, rendered to HTML.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ReviewDismissedEvent object'
    )
    previousReviewState: PullRequestReviewState = Field(
        ...,
        description="Identifies the previous state of the review with the 'review_dismissed' event.",
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    pullRequestCommit: Optional[PullRequestCommit_aliased] = Field(
        None,
        description='Identifies the commit which caused the review to become stale.',
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for this review dismissed event.'
    )
    review: Optional[PullRequestReview_aliased] = Field(
        None,
        description="Identifies the review associated with the 'review_dismissed' event.",
    )
    url: URI = Field(..., description='The HTTP URL for this review dismissed event.')
    typename__: Optional[Literal['ReviewDismissedEvent']] = Field(
        'ReviewDismissedEvent', alias='__typename'
    )


class ReviewRequest(Node):
    """
    A request for a user to review a pull request.
    """

    asCodeOwner: Boolean = Field(
        ..., description='Whether this request was created for a code owner'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the ReviewRequest object')
    pullRequest: PullRequest_aliased = Field(
        ...,
        description='Identifies the pull request associated with this review request.',
    )
    requestedReviewer: Optional[RequestedReviewer] = Field(
        None, description='The reviewer that is requested.'
    )
    typename__: Optional[Literal['ReviewRequest']] = Field(
        'ReviewRequest', alias='__typename'
    )


class ReviewRequestConnection(BaseModel):
    """
    The connection type for ReviewRequest.
    """

    edges: Optional[List[Optional[ReviewRequestEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[ReviewRequest]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['ReviewRequestConnection']] = Field(
        'ReviewRequestConnection', alias='__typename'
    )


class ReviewRequestEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[ReviewRequest] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['ReviewRequestEdge']] = Field(
        'ReviewRequestEdge', alias='__typename'
    )


class ReviewRequestRemovedEvent(Node):
    """
    Represents an 'review_request_removed' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ReviewRequestRemovedEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    requestedReviewer: Optional[RequestedReviewer] = Field(
        None, description='Identifies the reviewer whose review request was removed.'
    )
    typename__: Optional[Literal['ReviewRequestRemovedEvent']] = Field(
        'ReviewRequestRemovedEvent', alias='__typename'
    )


class ReviewRequestedEvent(Node):
    """
    Represents an 'review_requested' event on a given pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the ReviewRequestedEvent object'
    )
    pullRequest: PullRequest_aliased = Field(
        ..., description='PullRequest referenced by event.'
    )
    requestedReviewer: Optional[RequestedReviewer] = Field(
        None, description='Identifies the reviewer whose review was requested.'
    )
    typename__: Optional[Literal['ReviewRequestedEvent']] = Field(
        'ReviewRequestedEvent', alias='__typename'
    )


class ReviewStatusHovercardContext(HovercardContext):
    """
    A hovercard context with a message describing the current code review state of the pull
    request.
    """

    message: String = Field(..., description='A string describing this context')
    octicon: String = Field(..., description='An octicon to accompany this context')
    reviewDecision: Optional[PullRequestReviewDecision] = Field(
        None,
        description='The current status of the pull request with respect to code review.',
    )
    typename__: Optional[Literal['ReviewStatusHovercardContext']] = Field(
        'ReviewStatusHovercardContext', alias='__typename'
    )


class RevokeEnterpriseOrganizationsMigratorRolePayload(BaseModel):
    """
    Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizations: Optional[OrganizationConnection] = Field(
        None,
        description='The organizations that had the migrator role revoked for the given user.',
    )
    typename__: Optional[
        Literal['RevokeEnterpriseOrganizationsMigratorRolePayload']
    ] = Field('RevokeEnterpriseOrganizationsMigratorRolePayload', alias='__typename')


class RevokeMigratorRolePayload(BaseModel):
    """
    Autogenerated return type of RevokeMigratorRole.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    success: Optional[Boolean] = Field(None, description='Did the operation succeed?')
    typename__: Optional[Literal['RevokeMigratorRolePayload']] = Field(
        'RevokeMigratorRolePayload', alias='__typename'
    )


class SavedReply(Node):
    """
    A Saved Reply is text a user can use to reply quickly.
    """

    body: String = Field(..., description='The body of the saved reply.')
    bodyHTML: HTML = Field(..., description='The saved reply body rendered to HTML.')
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the SavedReply object')
    title: String = Field(..., description='The title of the saved reply.')
    user: Optional[Actor] = Field(None, description='The user that saved this reply.')
    typename__: Optional[Literal['SavedReply']] = Field(
        'SavedReply', alias='__typename'
    )


class SavedReplyConnection(BaseModel):
    """
    The connection type for SavedReply.
    """

    edges: Optional[List[Optional[SavedReplyEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SavedReply]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SavedReplyConnection']] = Field(
        'SavedReplyConnection', alias='__typename'
    )


class SavedReplyEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SavedReply] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SavedReplyEdge']] = Field(
        'SavedReplyEdge', alias='__typename'
    )


class SearchResultItemConnection(BaseModel):
    """
    A list of results that matched against a search query. Regardless of the number
    of matches, a maximum of 1,000 results will be available across all types,
    potentially split across many pages.
    """

    codeCount: Int = Field(
        ...,
        description='The total number of pieces of code that matched the search query. Regardless\nof the total number of matches, a maximum of 1,000 results will be available\nacross all types.',
    )
    discussionCount: Int = Field(
        ...,
        description='The total number of discussions that matched the search query. Regardless of\nthe total number of matches, a maximum of 1,000 results will be available\nacross all types.',
    )
    edges: Optional[List[Optional[SearchResultItemEdge]]] = Field(
        None, description='A list of edges.'
    )
    issueCount: Int = Field(
        ...,
        description='The total number of issues that matched the search query. Regardless of the\ntotal number of matches, a maximum of 1,000 results will be available across all types.',
    )
    nodes: Optional[List[Optional[SearchResultItem]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    repositoryCount: Int = Field(
        ...,
        description='The total number of repositories that matched the search query. Regardless of\nthe total number of matches, a maximum of 1,000 results will be available\nacross all types.',
    )
    userCount: Int = Field(
        ...,
        description='The total number of users that matched the search query. Regardless of the\ntotal number of matches, a maximum of 1,000 results will be available across all types.',
    )
    wikiCount: Int = Field(
        ...,
        description='The total number of wiki pages that matched the search query. Regardless of\nthe total number of matches, a maximum of 1,000 results will be available\nacross all types.',
    )
    typename__: Optional[Literal['SearchResultItemConnection']] = Field(
        'SearchResultItemConnection', alias='__typename'
    )


class SearchResultItemEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SearchResultItem] = Field(
        None, description='The item at the end of the edge.'
    )
    textMatches: Optional[List[Optional[TextMatch]]] = Field(
        None, description='Text matches on the result found.'
    )
    typename__: Optional[Literal['SearchResultItemEdge']] = Field(
        'SearchResultItemEdge', alias='__typename'
    )


class SecurityAdvisory(Node):
    """
    A GitHub Security Advisory
    """

    classification: SecurityAdvisoryClassification = Field(
        ..., description='The classification of the advisory'
    )
    cvss: CVSS = Field(..., description='The CVSS associated with this advisory')
    cvssSeverities: CvssSeverities = Field(
        ..., description='The CVSS associated with this advisory'
    )
    cwes: CWEConnection = Field(..., description='CWEs associated with this Advisory')
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: String = Field(
        ..., description='This is a long plaintext description of the advisory'
    )
    epss: Optional[EPSS] = Field(
        None, description='The Exploit Prediction Scoring System'
    )
    ghsaId: String = Field(..., description='The GitHub Security Advisory ID')
    id: ID_aliased = Field(
        ..., description='The Node ID of the SecurityAdvisory object'
    )
    identifiers: List[SecurityAdvisoryIdentifier] = Field(
        ..., description='A list of identifiers for this advisory'
    )
    notificationsPermalink: Optional[URI] = Field(
        None, description="The permalink for the advisory's dependabot alerts page"
    )
    origin: String = Field(
        ..., description='The organization that originated the advisory'
    )
    permalink: Optional[URI] = Field(None, description='The permalink for the advisory')
    publishedAt: DateTime = Field(..., description='When the advisory was published')
    references: List[SecurityAdvisoryReference] = Field(
        ..., description='A list of references for this advisory'
    )
    severity: SecurityAdvisorySeverity = Field(
        ..., description='The severity of the advisory'
    )
    summary: String = Field(
        ..., description='A short plaintext summary of the advisory'
    )
    updatedAt: DateTime = Field(..., description='When the advisory was last updated')
    vulnerabilities: SecurityVulnerabilityConnection = Field(
        ..., description='Vulnerabilities associated with this Advisory'
    )
    withdrawnAt: Optional[DateTime] = Field(
        None, description='When the advisory was withdrawn, if it has been withdrawn'
    )
    typename__: Optional[Literal['SecurityAdvisory']] = Field(
        'SecurityAdvisory', alias='__typename'
    )


class SecurityAdvisoryConnection(BaseModel):
    """
    The connection type for SecurityAdvisory.
    """

    edges: Optional[List[Optional[SecurityAdvisoryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SecurityAdvisory]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SecurityAdvisoryConnection']] = Field(
        'SecurityAdvisoryConnection', alias='__typename'
    )


class SecurityAdvisoryEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SecurityAdvisory] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SecurityAdvisoryEdge']] = Field(
        'SecurityAdvisoryEdge', alias='__typename'
    )


class SecurityAdvisoryIdentifier(BaseModel):
    """
    A GitHub Security Advisory Identifier
    """

    type: String = Field(..., description='The identifier type, e.g. GHSA, CVE')
    value: String = Field(..., description='The identifier')
    typename__: Optional[Literal['SecurityAdvisoryIdentifier']] = Field(
        'SecurityAdvisoryIdentifier', alias='__typename'
    )


class SecurityAdvisoryPackage(BaseModel):
    """
    An individual package
    """

    ecosystem: SecurityAdvisoryEcosystem = Field(
        ..., description='The ecosystem the package belongs to, e.g. RUBYGEMS, NPM'
    )
    name: String = Field(..., description='The package name')
    typename__: Optional[Literal['SecurityAdvisoryPackage']] = Field(
        'SecurityAdvisoryPackage', alias='__typename'
    )


class SecurityAdvisoryPackageVersion(BaseModel):
    """
    An individual package version
    """

    identifier: String = Field(..., description='The package name or version')
    typename__: Optional[Literal['SecurityAdvisoryPackageVersion']] = Field(
        'SecurityAdvisoryPackageVersion', alias='__typename'
    )


class SecurityAdvisoryReference(BaseModel):
    """
    A GitHub Security Advisory Reference
    """

    url: URI = Field(..., description='A publicly accessible reference')
    typename__: Optional[Literal['SecurityAdvisoryReference']] = Field(
        'SecurityAdvisoryReference', alias='__typename'
    )


class SecurityVulnerability(BaseModel):
    """
    An individual vulnerability within an Advisory
    """

    advisory: SecurityAdvisory = Field(
        ..., description='The Advisory associated with this Vulnerability'
    )
    firstPatchedVersion: Optional[SecurityAdvisoryPackageVersion] = Field(
        None, description='The first version containing a fix for the vulnerability'
    )
    package: SecurityAdvisoryPackage = Field(
        ..., description='A description of the vulnerable package'
    )
    severity: SecurityAdvisorySeverity = Field(
        ..., description='The severity of the vulnerability within this package'
    )
    updatedAt: DateTime = Field(
        ..., description='When the vulnerability was last updated'
    )
    vulnerableVersionRange: String = Field(
        ...,
        description='A string that describes the vulnerable package versions.\nThis string follows a basic syntax with a few forms.\n+ `= 0.2.0` denotes a single vulnerable version.\n+ `<= 1.0.8` denotes a version range up to and including the specified version\n+ `< 0.1.11` denotes a version range up to, but excluding, the specified version\n+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.\n+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum',
    )
    typename__: Optional[Literal['SecurityVulnerability']] = Field(
        'SecurityVulnerability', alias='__typename'
    )


class SecurityVulnerabilityConnection(BaseModel):
    """
    The connection type for SecurityVulnerability.
    """

    edges: Optional[List[Optional[SecurityVulnerabilityEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SecurityVulnerability]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SecurityVulnerabilityConnection']] = Field(
        'SecurityVulnerabilityConnection', alias='__typename'
    )


class SecurityVulnerabilityEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SecurityVulnerability] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SecurityVulnerabilityEdge']] = Field(
        'SecurityVulnerabilityEdge', alias='__typename'
    )


class SetEnterpriseIdentityProviderPayload(BaseModel):
    """
    Autogenerated return type of SetEnterpriseIdentityProvider.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    identityProvider: Optional[EnterpriseIdentityProvider] = Field(
        None, description='The identity provider for the enterprise.'
    )
    typename__: Optional[Literal['SetEnterpriseIdentityProviderPayload']] = Field(
        'SetEnterpriseIdentityProviderPayload', alias='__typename'
    )


class SetOrganizationInteractionLimitPayload(BaseModel):
    """
    Autogenerated return type of SetOrganizationInteractionLimit.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The organization that the interaction limit was set for.'
    )
    typename__: Optional[Literal['SetOrganizationInteractionLimitPayload']] = Field(
        'SetOrganizationInteractionLimitPayload', alias='__typename'
    )


class SetRepositoryInteractionLimitPayload(BaseModel):
    """
    Autogenerated return type of SetRepositoryInteractionLimit.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository that the interaction limit was set for.'
    )
    typename__: Optional[Literal['SetRepositoryInteractionLimitPayload']] = Field(
        'SetRepositoryInteractionLimitPayload', alias='__typename'
    )


class SetUserInteractionLimitPayload(BaseModel):
    """
    Autogenerated return type of SetUserInteractionLimit.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user that the interaction limit was set for.'
    )
    typename__: Optional[Literal['SetUserInteractionLimitPayload']] = Field(
        'SetUserInteractionLimitPayload', alias='__typename'
    )


class SmimeSignature(GitSignature):
    """
    Represents an S/MIME signature on a Commit or Tag.
    """

    email: String = Field(..., description='Email used to sign this object.')
    isValid: Boolean = Field(
        ..., description='True if the signature is valid and verified by GitHub.'
    )
    payload: String = Field(
        ...,
        description='Payload for GPG signing object. Raw ODB object without the signature header.',
    )
    signature: String = Field(
        ..., description='ASCII-armored signature header from object.'
    )
    signer: Optional[User_aliased] = Field(
        None, description='GitHub user corresponding to the email signing this commit.'
    )
    state: GitSignatureState = Field(
        ...,
        description='The state of this signature. `VALID` if signature is valid and verified by\nGitHub, otherwise represents reason why signature is considered invalid.',
    )
    verifiedAt: Optional[DateTime] = Field(
        None, description='The date the signature was verified, if valid'
    )
    wasSignedByGitHub: Boolean = Field(
        ..., description="True if the signature was made with GitHub's signing key."
    )
    typename__: Optional[Literal['SmimeSignature']] = Field(
        'SmimeSignature', alias='__typename'
    )


class SocialAccount(BaseModel):
    """
    Social media profile associated with a user.
    """

    displayName: String = Field(
        ...,
        description='Name of the social media account as it appears on the profile.',
    )
    provider: SocialAccountProvider = Field(
        ..., description='Software or company that hosts the social media account.'
    )
    url: URI = Field(..., description='URL of the social media account.')
    typename__: Optional[Literal['SocialAccount']] = Field(
        'SocialAccount', alias='__typename'
    )


class SocialAccountConnection(BaseModel):
    """
    The connection type for SocialAccount.
    """

    edges: Optional[List[Optional[SocialAccountEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SocialAccount]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SocialAccountConnection']] = Field(
        'SocialAccountConnection', alias='__typename'
    )


class SocialAccountEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SocialAccount] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SocialAccountEdge']] = Field(
        'SocialAccountEdge', alias='__typename'
    )


class SponsorAndLifetimeValue(BaseModel):
    """
    A GitHub account and the total amount in USD they've paid for sponsorships to a
    particular maintainer. Does not include payments made via Patreon.
    """

    amountInCents: Int = Field(..., description='The amount in cents.')
    formattedAmount: String = Field(
        ..., description='The amount in USD, formatted as a string.'
    )
    sponsor: Sponsorable = Field(..., description="The sponsor's GitHub account.")
    sponsorable: Sponsorable = Field(
        ..., description="The maintainer's GitHub account."
    )
    typename__: Optional[Literal['SponsorAndLifetimeValue']] = Field(
        'SponsorAndLifetimeValue', alias='__typename'
    )


class SponsorAndLifetimeValueConnection(BaseModel):
    """
    The connection type for SponsorAndLifetimeValue.
    """

    edges: Optional[List[Optional[SponsorAndLifetimeValueEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SponsorAndLifetimeValue]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SponsorAndLifetimeValueConnection']] = Field(
        'SponsorAndLifetimeValueConnection', alias='__typename'
    )


class SponsorAndLifetimeValueEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SponsorAndLifetimeValue] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SponsorAndLifetimeValueEdge']] = Field(
        'SponsorAndLifetimeValueEdge', alias='__typename'
    )


class SponsorConnection(BaseModel):
    """
    A list of users and organizations sponsoring someone via GitHub Sponsors.
    """

    edges: Optional[List[Optional[SponsorEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Sponsor]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SponsorConnection']] = Field(
        'SponsorConnection', alias='__typename'
    )


class SponsorEdge(BaseModel):
    """
    Represents a user or organization who is sponsoring someone in GitHub Sponsors.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Sponsor] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SponsorEdge']] = Field(
        'SponsorEdge', alias='__typename'
    )


class SponsorableItemConnection(BaseModel):
    """
    The connection type for SponsorableItem.
    """

    edges: Optional[List[Optional[SponsorableItemEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SponsorableItem]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SponsorableItemConnection']] = Field(
        'SponsorableItemConnection', alias='__typename'
    )


class SponsorableItemEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SponsorableItem] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SponsorableItemEdge']] = Field(
        'SponsorableItemEdge', alias='__typename'
    )


class SponsorsActivity(Node):
    """
    An event related to sponsorship activity.
    """

    action: SponsorsActivityAction = Field(
        ..., description='What action this activity indicates took place.'
    )
    currentPrivacyLevel: Optional[SponsorshipPrivacy] = Field(
        None, description="The sponsor's current privacy level."
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the SponsorsActivity object'
    )
    paymentSource: Optional[SponsorshipPaymentSource] = Field(
        None, description='The platform that was used to pay for the sponsorship.'
    )
    previousSponsorsTier: Optional[SponsorsTier] = Field(
        None,
        description='The tier that the sponsorship used to use, for tier change events.',
    )
    sponsor: Optional[Sponsor] = Field(
        None,
        description='The user or organization who triggered this activity and was/is sponsoring the sponsorable.',
    )
    sponsorable: Sponsorable = Field(
        ...,
        description='The user or organization that is being sponsored, the maintainer.',
    )
    sponsorsTier: Optional[SponsorsTier] = Field(
        None, description='The associated sponsorship tier.'
    )
    timestamp: Optional[DateTime] = Field(
        None, description='The timestamp of this event.'
    )
    viaBulkSponsorship: Boolean = Field(
        ...,
        description='Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?',
    )
    typename__: Optional[Literal['SponsorsActivity']] = Field(
        'SponsorsActivity', alias='__typename'
    )


class SponsorsActivityConnection(BaseModel):
    """
    The connection type for SponsorsActivity.
    """

    edges: Optional[List[Optional[SponsorsActivityEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SponsorsActivity]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SponsorsActivityConnection']] = Field(
        'SponsorsActivityConnection', alias='__typename'
    )


class SponsorsActivityEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SponsorsActivity] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SponsorsActivityEdge']] = Field(
        'SponsorsActivityEdge', alias='__typename'
    )


class SponsorsGoal(BaseModel):
    """
    A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
    """

    description: Optional[String] = Field(
        None, description='A description of the goal from the maintainer.'
    )
    kind: SponsorsGoalKind = Field(
        ..., description='What the objective of this goal is.'
    )
    percentComplete: Int = Field(
        ...,
        description='The percentage representing how complete this goal is, between 0-100.',
    )
    targetValue: Int = Field(
        ...,
        description='What the goal amount is. Represents an amount in USD for monthly sponsorship\namount goals. Represents a count of unique sponsors for total sponsors count goals.',
    )
    title: String = Field(
        ..., description='A brief summary of the kind and target value of this goal.'
    )
    typename__: Optional[Literal['SponsorsGoal']] = Field(
        'SponsorsGoal', alias='__typename'
    )


class SponsorsListing(Node):
    """
    A GitHub Sponsors listing.
    """

    activeGoal: Optional[SponsorsGoal] = Field(
        None,
        description='The current goal the maintainer is trying to reach with GitHub Sponsors, if any.',
    )
    activeStripeConnectAccount: Optional[StripeConnectAccount] = Field(
        None,
        description='The Stripe Connect account currently in use for payouts for this Sponsors\nlisting, if any. Will only return a value when queried by the maintainer\nthemselves, or by an admin of the sponsorable organization.',
    )
    billingCountryOrRegion: Optional[String] = Field(
        None,
        description="The name of the country or region with the maintainer's bank account or fiscal\nhost. Will only return a value when queried by the maintainer themselves, or\nby an admin of the sponsorable organization.",
    )
    contactEmailAddress: Optional[String] = Field(
        None,
        description='The email address used by GitHub to contact the sponsorable about their GitHub\nSponsors profile. Will only return a value when queried by the maintainer\nthemselves, or by an admin of the sponsorable organization.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    dashboardResourcePath: URI = Field(
        ...,
        description='The HTTP path for the Sponsors dashboard for this Sponsors listing.',
    )
    dashboardUrl: URI = Field(
        ...,
        description='The HTTP URL for the Sponsors dashboard for this Sponsors listing.',
    )
    featuredItems: List[SponsorsListingFeaturedItem] = Field(
        ..., description='The records featured on the GitHub Sponsors profile.'
    )
    fiscalHost: Optional[Organization_aliased] = Field(
        None,
        description='The fiscal host used for payments, if any. Will only return a value when\nqueried by the maintainer themselves, or by an admin of the sponsorable organization.',
    )
    fullDescription: String = Field(
        ..., description='The full description of the listing.'
    )
    fullDescriptionHTML: HTML = Field(
        ..., description='The full description of the listing rendered to HTML.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the SponsorsListing object')
    isPublic: Boolean = Field(
        ..., description='Whether this listing is publicly visible.'
    )
    name: String = Field(..., description="The listing's full name.")
    nextPayoutDate: Optional[Date] = Field(
        None,
        description='A future date on which this listing is eligible to receive a payout.',
    )
    residenceCountryOrRegion: Optional[String] = Field(
        None,
        description='The name of the country or region where the maintainer resides. Will only\nreturn a value when queried by the maintainer themselves, or by an admin of\nthe sponsorable organization.',
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for this Sponsors listing.'
    )
    shortDescription: String = Field(
        ..., description='The short description of the listing.'
    )
    slug: String = Field(..., description='The short name of the listing.')
    sponsorable: Sponsorable = Field(
        ...,
        description='The entity this listing represents who can be sponsored on GitHub Sponsors.',
    )
    tiers: Optional[SponsorsTierConnection] = Field(
        None, description='The tiers for this GitHub Sponsors profile.'
    )
    url: URI = Field(..., description='The HTTP URL for this Sponsors listing.')
    typename__: Optional[Literal['SponsorsListing']] = Field(
        'SponsorsListing', alias='__typename'
    )


class SponsorsListingFeaturedItem(Node):
    """
    A record that is promoted on a GitHub Sponsors profile.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    description: Optional[String] = Field(
        None,
        description="Will either be a description from the sponsorable maintainer about why they\nfeatured this item, or the item's description itself, such as a user's bio\nfrom their GitHub profile page.",
    )
    featureable: SponsorsListingFeatureableItem = Field(
        ..., description='The record that is featured on the GitHub Sponsors profile.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the SponsorsListingFeaturedItem object'
    )
    position: Int = Field(
        ...,
        description='The position of this featured item on the GitHub Sponsors profile with a lower\nposition indicating higher precedence. Starts at 1.',
    )
    sponsorsListing: SponsorsListing = Field(
        ..., description='The GitHub Sponsors profile that features this record.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['SponsorsListingFeaturedItem']] = Field(
        'SponsorsListingFeaturedItem', alias='__typename'
    )


class SponsorsTier(Node):
    """
    A GitHub Sponsors tier associated with a GitHub Sponsors listing.
    """

    adminInfo: Optional[SponsorsTierAdminInfo] = Field(
        None,
        description='SponsorsTier information only visible to users that can administer the associated Sponsors listing.',
    )
    closestLesserValueTier: Optional[SponsorsTier] = Field(
        None,
        description="Get a different tier for this tier's maintainer that is at the same frequency\nas this tier but with an equal or lesser cost. Returns the published tier with\nthe monthly price closest to this tier's without going over.",
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    description: String = Field(..., description='The description of the tier.')
    descriptionHTML: HTML = Field(
        ..., description='The tier description rendered to HTML'
    )
    id: ID_aliased = Field(..., description='The Node ID of the SponsorsTier object')
    isCustomAmount: Boolean = Field(
        ...,
        description='Whether this tier was chosen at checkout time by the sponsor rather than\ndefined ahead of time by the maintainer who manages the Sponsors listing.',
    )
    isOneTime: Boolean = Field(
        ..., description='Whether this tier is only for use with one-time sponsorships.'
    )
    monthlyPriceInCents: Int = Field(
        ..., description='How much this tier costs per month in cents.'
    )
    monthlyPriceInDollars: Int = Field(
        ..., description='How much this tier costs per month in USD.'
    )
    name: String = Field(..., description='The name of the tier.')
    sponsorsListing: SponsorsListing = Field(
        ..., description='The sponsors listing that this tier belongs to.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['SponsorsTier']] = Field(
        'SponsorsTier', alias='__typename'
    )


class SponsorsTierAdminInfo(BaseModel):
    """
    SponsorsTier information only visible to users that can administer the associated Sponsors listing.
    """

    isDraft: Boolean = Field(
        ...,
        description='Indicates whether this tier is still a work in progress by the sponsorable and\nnot yet published to the associated GitHub Sponsors profile. Draft tiers\ncannot be used for new sponsorships and will not be in use on existing\nsponsorships. Draft tiers cannot be seen by anyone but the admins of the\nGitHub Sponsors profile.',
    )
    isPublished: Boolean = Field(
        ...,
        description='Indicates whether this tier is published to the associated GitHub Sponsors\nprofile. Published tiers are visible to anyone who can see the GitHub Sponsors\nprofile, and are available for use in sponsorships if the GitHub Sponsors\nprofile is publicly visible.',
    )
    isRetired: Boolean = Field(
        ...,
        description='Indicates whether this tier has been retired from the associated GitHub\nSponsors profile. Retired tiers are no longer shown on the GitHub Sponsors\nprofile and cannot be chosen for new sponsorships. Existing sponsorships may\nstill use retired tiers if the sponsor selected the tier before it was retired.',
    )
    sponsorships: SponsorshipConnection = Field(
        ..., description='The sponsorships using this tier.'
    )
    typename__: Optional[Literal['SponsorsTierAdminInfo']] = Field(
        'SponsorsTierAdminInfo', alias='__typename'
    )


class SponsorsTierConnection(BaseModel):
    """
    The connection type for SponsorsTier.
    """

    edges: Optional[List[Optional[SponsorsTierEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SponsorsTier]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SponsorsTierConnection']] = Field(
        'SponsorsTierConnection', alias='__typename'
    )


class SponsorsTierEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SponsorsTier] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SponsorsTierEdge']] = Field(
        'SponsorsTierEdge', alias='__typename'
    )


class Sponsorship(Node):
    """
    A sponsorship relationship between a sponsor and a maintainer
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Sponsorship object')
    isActive: Boolean = Field(
        ...,
        description='Whether the sponsorship is active. False implies the sponsor is a past sponsor\nof the maintainer, while true implies they are a current sponsor.',
    )
    isOneTimePayment: Boolean = Field(
        ...,
        description='Whether this sponsorship represents a one-time payment versus a recurring sponsorship.',
    )
    isSponsorOptedIntoEmail: Optional[Boolean] = Field(
        None,
        description='Whether the sponsor has chosen to receive sponsorship update emails sent from\nthe sponsorable. Only returns a non-null value when the viewer has permission to know this.',
    )
    maintainer: User_aliased = Field(
        ..., description='The entity that is being sponsored'
    )
    paymentSource: Optional[SponsorshipPaymentSource] = Field(
        None,
        description='The platform that was most recently used to pay for the sponsorship.',
    )
    privacyLevel: SponsorshipPrivacy = Field(
        ..., description='The privacy level for this sponsorship.'
    )
    sponsor: Optional[User_aliased] = Field(
        None,
        description='The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.',
    )
    sponsorEntity: Optional[Sponsor] = Field(
        None,
        description='The user or organization that is sponsoring, if you have permission to view them.',
    )
    sponsorable: Sponsorable = Field(
        ..., description='The entity that is being sponsored'
    )
    tier: Optional[SponsorsTier] = Field(
        None, description='The associated sponsorship tier'
    )
    tierSelectedAt: Optional[DateTime] = Field(
        None,
        description='Identifies the date and time when the current tier was chosen for this sponsorship.',
    )
    typename__: Optional[Literal['Sponsorship']] = Field(
        'Sponsorship', alias='__typename'
    )


class SponsorshipConnection(BaseModel):
    """
    A list of sponsorships either from the subject or received by the subject.
    """

    edges: Optional[List[Optional[SponsorshipEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Sponsorship]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    totalRecurringMonthlyPriceInCents: Int = Field(
        ...,
        description='The total amount in cents of all recurring sponsorships in the connection\nwhose amount you can view. Does not include one-time sponsorships.',
    )
    totalRecurringMonthlyPriceInDollars: Int = Field(
        ...,
        description='The total amount in USD of all recurring sponsorships in the connection whose\namount you can view. Does not include one-time sponsorships.',
    )
    typename__: Optional[Literal['SponsorshipConnection']] = Field(
        'SponsorshipConnection', alias='__typename'
    )


class SponsorshipEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Sponsorship] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SponsorshipEdge']] = Field(
        'SponsorshipEdge', alias='__typename'
    )


class SponsorshipNewsletter(Node):
    """
    An update sent to sponsors of a user or organization on GitHub Sponsors.
    """

    author: Optional[User_aliased] = Field(
        None, description='The author of the newsletter.'
    )
    body: String = Field(
        ...,
        description='The contents of the newsletter, the message the sponsorable wanted to give.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the SponsorshipNewsletter object'
    )
    isPublished: Boolean = Field(
        ...,
        description='Indicates if the newsletter has been made available to sponsors.',
    )
    sponsorable: Sponsorable = Field(
        ..., description='The user or organization this newsletter is from.'
    )
    subject: String = Field(
        ..., description="The subject of the newsletter, what it's about."
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['SponsorshipNewsletter']] = Field(
        'SponsorshipNewsletter', alias='__typename'
    )


class SponsorshipNewsletterConnection(BaseModel):
    """
    The connection type for SponsorshipNewsletter.
    """

    edges: Optional[List[Optional[SponsorshipNewsletterEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[SponsorshipNewsletter]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SponsorshipNewsletterConnection']] = Field(
        'SponsorshipNewsletterConnection', alias='__typename'
    )


class SponsorshipNewsletterEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[SponsorshipNewsletter] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SponsorshipNewsletterEdge']] = Field(
        'SponsorshipNewsletterEdge', alias='__typename'
    )


class SshSignature(GitSignature):
    """
    Represents an SSH signature on a Commit or Tag.
    """

    email: String = Field(..., description='Email used to sign this object.')
    isValid: Boolean = Field(
        ..., description='True if the signature is valid and verified by GitHub.'
    )
    keyFingerprint: Optional[String] = Field(
        None, description='Hex-encoded fingerprint of the key that signed this object.'
    )
    payload: String = Field(
        ...,
        description='Payload for GPG signing object. Raw ODB object without the signature header.',
    )
    signature: String = Field(
        ..., description='ASCII-armored signature header from object.'
    )
    signer: Optional[User_aliased] = Field(
        None, description='GitHub user corresponding to the email signing this commit.'
    )
    state: GitSignatureState = Field(
        ...,
        description='The state of this signature. `VALID` if signature is valid and verified by\nGitHub, otherwise represents reason why signature is considered invalid.',
    )
    verifiedAt: Optional[DateTime] = Field(
        None, description='The date the signature was verified, if valid'
    )
    wasSignedByGitHub: Boolean = Field(
        ..., description="True if the signature was made with GitHub's signing key."
    )
    typename__: Optional[Literal['SshSignature']] = Field(
        'SshSignature', alias='__typename'
    )


class StargazerConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[StargazerEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['StargazerConnection']] = Field(
        'StargazerConnection', alias='__typename'
    )


class StargazerEdge(BaseModel):
    """
    Represents a user that's starred a repository.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: User_aliased
    starredAt: DateTime = Field(
        ..., description='Identifies when the item was starred.'
    )
    typename__: Optional[Literal['StargazerEdge']] = Field(
        'StargazerEdge', alias='__typename'
    )


class StarredRepositoryConnection(BaseModel):
    """
    The connection type for Repository.
    """

    edges: Optional[List[Optional[StarredRepositoryEdge]]] = Field(
        None, description='A list of edges.'
    )
    isOverLimit: Boolean = Field(
        ...,
        description='Is the list of stars for this user truncated? This is true for users that have many stars.',
    )
    nodes: Optional[List[Optional[Repository]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['StarredRepositoryConnection']] = Field(
        'StarredRepositoryConnection', alias='__typename'
    )


class StarredRepositoryEdge(BaseModel):
    """
    Represents a starred repository.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Repository_aliased
    starredAt: DateTime = Field(
        ..., description='Identifies when the item was starred.'
    )
    typename__: Optional[Literal['StarredRepositoryEdge']] = Field(
        'StarredRepositoryEdge', alias='__typename'
    )


class StartOrganizationMigrationPayload(BaseModel):
    """
    Autogenerated return type of StartOrganizationMigration.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    orgMigration: Optional[OrganizationMigration] = Field(
        None, description='The new organization migration.'
    )
    typename__: Optional[Literal['StartOrganizationMigrationPayload']] = Field(
        'StartOrganizationMigrationPayload', alias='__typename'
    )


class StartRepositoryMigrationPayload(BaseModel):
    """
    Autogenerated return type of StartRepositoryMigration.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryMigration: Optional[RepositoryMigration] = Field(
        None, description='The new repository migration.'
    )
    typename__: Optional[Literal['StartRepositoryMigrationPayload']] = Field(
        'StartRepositoryMigrationPayload', alias='__typename'
    )


class Status(Node):
    """
    Represents a commit status.
    """

    combinedContexts: StatusCheckRollupContextConnection = Field(
        ..., description='A list of status contexts and check runs for this commit.'
    )
    commit: Optional[Commit_aliased] = Field(
        None, description='The commit this status is attached to.'
    )
    context: Optional[StatusContext_aliased] = Field(
        None, description='Looks up an individual status context by context name.'
    )
    contexts: List[StatusContext] = Field(
        ..., description='The individual status contexts for this commit.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Status object')
    state: StatusState = Field(..., description='The combined commit status.')
    typename__: Optional[Literal['Status']] = Field('Status', alias='__typename')


class StatusCheckConfiguration(BaseModel):
    """
    Required status check
    """

    context: String = Field(
        ...,
        description='The status check context name that must be present on the commit.',
    )
    integrationId: Optional[Int] = Field(
        None,
        description='The optional integration ID that this status check must originate from.',
    )
    typename__: Optional[Literal['StatusCheckConfiguration']] = Field(
        'StatusCheckConfiguration', alias='__typename'
    )


class StatusCheckRollup(Node):
    """
    Represents the rollup for both the check runs and status for a commit.
    """

    commit: Optional[Commit_aliased] = Field(
        None, description='The commit the status and check runs are attached to.'
    )
    contexts: StatusCheckRollupContextConnection = Field(
        ..., description='A list of status contexts and check runs for this commit.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the StatusCheckRollup object'
    )
    state: StatusState = Field(..., description='The combined status for the commit.')
    typename__: Optional[Literal['StatusCheckRollup']] = Field(
        'StatusCheckRollup', alias='__typename'
    )


class StatusCheckRollupContextConnection(BaseModel):
    """
    The connection type for StatusCheckRollupContext.
    """

    checkRunCount: Int = Field(
        ..., description='The number of check runs in this rollup.'
    )
    checkRunCountsByState: Optional[List[CheckRunStateCount]] = Field(
        None, description='Counts of check runs by state.'
    )
    edges: Optional[List[Optional[StatusCheckRollupContextEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[StatusCheckRollupContext]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    statusContextCount: Int = Field(
        ..., description='The number of status contexts in this rollup.'
    )
    statusContextCountsByState: Optional[List[StatusContextStateCount]] = Field(
        None, description='Counts of status contexts by state.'
    )
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['StatusCheckRollupContextConnection']] = Field(
        'StatusCheckRollupContextConnection', alias='__typename'
    )


class StatusCheckRollupContextEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[StatusCheckRollupContext] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['StatusCheckRollupContextEdge']] = Field(
        'StatusCheckRollupContextEdge', alias='__typename'
    )


class StatusContext(Node, RequirableByPullRequest):
    """
    Represents an individual commit status context
    """

    avatarUrl: Optional[URI] = Field(
        None,
        description='The avatar of the OAuth application or the user that created the status',
    )
    commit: Optional[Commit_aliased] = Field(
        None, description='This commit this status context is attached to.'
    )
    context: String = Field(..., description='The name of this status context.')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    creator: Optional[Actor] = Field(
        None, description='The actor who created this status context.'
    )
    description: Optional[String] = Field(
        None, description='The description for this status context.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the StatusContext object')
    isRequired: Boolean = Field(
        ...,
        description='Whether this is required to pass before merging for a specific pull request.',
    )
    state: StatusState = Field(..., description='The state of this status context.')
    targetUrl: Optional[URI] = Field(
        None, description='The URL for this status context.'
    )
    typename__: Optional[Literal['StatusContext']] = Field(
        'StatusContext', alias='__typename'
    )


class StatusContextStateCount(BaseModel):
    """
    Represents a count of the state of a status context.
    """

    count: Int = Field(..., description='The number of statuses with this state.')
    state: StatusState = Field(..., description='The state of a status context.')
    typename__: Optional[Literal['StatusContextStateCount']] = Field(
        'StatusContextStateCount', alias='__typename'
    )


class StripeConnectAccount(BaseModel):
    """
    A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
    """

    accountId: String = Field(
        ...,
        description='The account number used to identify this Stripe Connect account.',
    )
    billingCountryOrRegion: Optional[String] = Field(
        None,
        description='The name of the country or region of an external account, such as a bank\naccount, tied to the Stripe Connect account. Will only return a value when\nqueried by the maintainer of the associated GitHub Sponsors profile\nthemselves, or by an admin of the sponsorable organization.',
    )
    countryOrRegion: Optional[String] = Field(
        None,
        description='The name of the country or region of the Stripe Connect account. Will only\nreturn a value when queried by the maintainer of the associated GitHub\nSponsors profile themselves, or by an admin of the sponsorable organization.',
    )
    isActive: Boolean = Field(
        ...,
        description='Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.',
    )
    sponsorsListing: SponsorsListing = Field(
        ...,
        description='The GitHub Sponsors profile associated with this Stripe Connect account.',
    )
    stripeDashboardUrl: URI = Field(
        ...,
        description="The URL to access this Stripe Connect account on Stripe's website.",
    )
    typename__: Optional[Literal['StripeConnectAccount']] = Field(
        'StripeConnectAccount', alias='__typename'
    )


class SubIssueAddedEvent(Node):
    """
    Represents a 'sub_issue_added' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the SubIssueAddedEvent object'
    )
    subIssue: Optional[Issue_aliased] = Field(None, description='The sub-issue added.')
    typename__: Optional[Literal['SubIssueAddedEvent']] = Field(
        'SubIssueAddedEvent', alias='__typename'
    )


class SubIssueRemovedEvent(Node):
    """
    Represents a 'sub_issue_removed' event on a given issue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the SubIssueRemovedEvent object'
    )
    subIssue: Optional[Issue_aliased] = Field(
        None, description='The sub-issue removed.'
    )
    typename__: Optional[Literal['SubIssueRemovedEvent']] = Field(
        'SubIssueRemovedEvent', alias='__typename'
    )


class SubIssuesSummary(BaseModel):
    """
    Summary of the state of an issue's sub-issues
    """

    completed: Int = Field(..., description='Count of completed sub-issues')
    percentCompleted: Int = Field(
        ..., description='Percent of sub-issues which are completed'
    )
    total: Int = Field(..., description='Count of total number of sub-issues')
    typename__: Optional[Literal['SubIssuesSummary']] = Field(
        'SubIssuesSummary', alias='__typename'
    )


class SubmitPullRequestReviewPayload(BaseModel):
    """
    Autogenerated return type of SubmitPullRequestReview.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The submitted pull request review.'
    )
    typename__: Optional[Literal['SubmitPullRequestReviewPayload']] = Field(
        'SubmitPullRequestReviewPayload', alias='__typename'
    )


class Submodule(BaseModel):
    """
    A pointer to a repository at a specific revision embedded inside another repository.
    """

    branch: Optional[String] = Field(
        None, description='The branch of the upstream submodule for tracking updates'
    )
    gitUrl: URI = Field(..., description='The git URL of the submodule repository')
    name: String = Field(..., description='The name of the submodule in .gitmodules')
    nameRaw: Base64String = Field(
        ..., description='The name of the submodule in .gitmodules (Base64-encoded)'
    )
    path: String = Field(
        ...,
        description='The path in the superproject that this submodule is located in',
    )
    pathRaw: Base64String = Field(
        ...,
        description='The path in the superproject that this submodule is located in (Base64-encoded)',
    )
    subprojectCommitOid: Optional[GitObjectID] = Field(
        None,
        description='The commit revision of the subproject repository being tracked by the submodule',
    )
    typename__: Optional[Literal['Submodule']] = Field('Submodule', alias='__typename')


class SubmoduleConnection(BaseModel):
    """
    The connection type for Submodule.
    """

    edges: Optional[List[Optional[SubmoduleEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Submodule]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['SubmoduleConnection']] = Field(
        'SubmoduleConnection', alias='__typename'
    )


class SubmoduleEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Submodule] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['SubmoduleEdge']] = Field(
        'SubmoduleEdge', alias='__typename'
    )


class SubscribedEvent(Node):
    """
    Represents a 'subscribed' event on a given `Subscribable`.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the SubscribedEvent object')
    subscribable: Subscribable = Field(..., description='Object referenced by event.')
    typename__: Optional[Literal['SubscribedEvent']] = Field(
        'SubscribedEvent', alias='__typename'
    )


class SuggestedReviewer(BaseModel):
    """
    A suggestion to review a pull request based on a user's commit history and review comments.
    """

    isAuthor: Boolean = Field(
        ..., description='Is this suggestion based on past commits?'
    )
    isCommenter: Boolean = Field(
        ..., description='Is this suggestion based on past review comments?'
    )
    reviewer: User_aliased = Field(
        ..., description='Identifies the user suggested to review the pull request.'
    )
    typename__: Optional[Literal['SuggestedReviewer']] = Field(
        'SuggestedReviewer', alias='__typename'
    )


class Tag(GitObject, Node):
    """
    Represents a Git tag.
    """

    abbreviatedOid: String = Field(
        ..., description='An abbreviated version of the Git object ID'
    )
    commitResourcePath: URI = Field(
        ..., description='The HTTP path for this Git object'
    )
    commitUrl: URI = Field(..., description='The HTTP URL for this Git object')
    id: ID_aliased = Field(..., description='The Node ID of the Tag object')
    message: Optional[String] = Field(None, description='The Git tag message.')
    name: String = Field(..., description='The Git tag name.')
    oid: GitObjectID = Field(..., description='The Git object ID')
    repository: Repository_aliased = Field(
        ..., description='The Repository the Git object belongs to'
    )
    tagger: Optional[GitActor] = Field(
        None, description='Details about the tag author.'
    )
    target: GitObject = Field(..., description='The Git object the tag points to.')
    typename__: Optional[Literal['Tag']] = Field('Tag', alias='__typename')


class TagNamePatternParameters(BaseModel):
    """
    Parameters to be used for the tag_name_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Boolean = Field(
        ..., description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['TagNamePatternParameters']] = Field(
        'TagNamePatternParameters', alias='__typename'
    )


class Team(MemberStatusable, Node, Subscribable):
    """
    A team of users in an organization.
    """

    ancestors: TeamConnection = Field(
        ..., description='A list of teams that are ancestors of this team.'
    )
    avatarUrl: Optional[URI] = Field(
        None, description="A URL pointing to the team's avatar."
    )
    childTeams: TeamConnection = Field(
        ..., description='List of child teams belonging to this team'
    )
    combinedSlug: String = Field(
        ..., description='The slug corresponding to the organization and team.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    description: Optional[String] = Field(
        None, description='The description of the team.'
    )
    discussion: Optional[TeamDiscussion] = Field(
        None, description='Find a team discussion by its number.'
    )
    discussions: TeamDiscussionConnection = Field(
        ..., description='A list of team discussions.'
    )
    discussionsResourcePath: URI = Field(
        ..., description='The HTTP path for team discussions'
    )
    discussionsUrl: URI = Field(..., description='The HTTP URL for team discussions')
    editTeamResourcePath: URI = Field(
        ..., description='The HTTP path for editing this team'
    )
    editTeamUrl: URI = Field(..., description='The HTTP URL for editing this team')
    id: ID_aliased = Field(..., description='The Node ID of the Team object')
    invitations: Optional[OrganizationInvitationConnection] = Field(
        None, description='A list of pending invitations for users to this team'
    )
    memberStatuses: UserStatusConnection = Field(
        ...,
        description='Get the status messages members of this entity have set that are either public or visible only to the organization.',
    )
    members: TeamMemberConnection = Field(
        ..., description='A list of users who are members of this team.'
    )
    membersResourcePath: URI = Field(
        ..., description="The HTTP path for the team' members"
    )
    membersUrl: URI = Field(..., description="The HTTP URL for the team' members")
    name: String = Field(..., description='The name of the team.')
    newTeamResourcePath: URI = Field(
        ..., description='The HTTP path creating a new team'
    )
    newTeamUrl: URI = Field(..., description='The HTTP URL creating a new team')
    notificationSetting: TeamNotificationSetting = Field(
        ..., description='The notification setting that the team has set.'
    )
    organization: Organization_aliased = Field(
        ..., description='The organization that owns this team.'
    )
    parentTeam: Optional[Team_aliased] = Field(
        None, description='The parent team of the team.'
    )
    privacy: TeamPrivacy = Field(..., description='The level of privacy the team has.')
    projectV2: Optional[ProjectV2_aliased] = Field(
        None,
        description='Finds and returns the project according to the provided project number.',
    )
    projectsV2: ProjectV2Connection = Field(
        ..., description='List of projects this team has collaborator access to.'
    )
    repositories: TeamRepositoryConnection = Field(
        ..., description='A list of repositories this team has access to.'
    )
    repositoriesResourcePath: URI = Field(
        ..., description="The HTTP path for this team's repositories"
    )
    repositoriesUrl: URI = Field(
        ..., description="The HTTP URL for this team's repositories"
    )
    resourcePath: URI = Field(..., description='The HTTP path for this team')
    reviewRequestDelegationAlgorithm: Optional[TeamReviewAssignmentAlgorithm] = Field(
        None, description='What algorithm is used for review assignment for this team'
    )
    reviewRequestDelegationEnabled: Boolean = Field(
        ..., description='True if review assignment is enabled for this team'
    )
    reviewRequestDelegationMemberCount: Optional[Int] = Field(
        None,
        description='How many team members are required for review assignment for this team',
    )
    reviewRequestDelegationNotifyTeam: Boolean = Field(
        ...,
        description='When assigning team members via delegation, whether the entire team should be notified as well.',
    )
    slug: String = Field(..., description='The slug corresponding to the team.')
    teamsResourcePath: URI = Field(
        ..., description="The HTTP path for this team's teams"
    )
    teamsUrl: URI = Field(..., description="The HTTP URL for this team's teams")
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this team')
    viewerCanAdminister: Boolean = Field(
        ..., description='Team is adminable by the viewer.'
    )
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    typename__: Optional[Literal['Team']] = Field('Team', alias='__typename')


class TeamAddMemberAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, TeamAuditEntryData
):
    """
    Audit log entry for a team.add_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the TeamAddMemberAuditEntry object'
    )
    isLdapMapped: Optional[Boolean] = Field(
        None, description='Whether the team was mapped to an LDAP Group.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    team: Optional[Team_aliased] = Field(
        None, description='The team associated with the action'
    )
    teamName: Optional[String] = Field(None, description='The name of the team')
    teamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this team'
    )
    teamUrl: Optional[URI] = Field(None, description='The HTTP URL for this team')
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['TeamAddMemberAuditEntry']] = Field(
        'TeamAddMemberAuditEntry', alias='__typename'
    )


class TeamAddRepositoryAuditEntry(
    AuditEntry,
    Node,
    OrganizationAuditEntryData,
    RepositoryAuditEntryData,
    TeamAuditEntryData,
):
    """
    Audit log entry for a team.add_repository event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the TeamAddRepositoryAuditEntry object'
    )
    isLdapMapped: Optional[Boolean] = Field(
        None, description='Whether the team was mapped to an LDAP Group.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    team: Optional[Team_aliased] = Field(
        None, description='The team associated with the action'
    )
    teamName: Optional[String] = Field(None, description='The name of the team')
    teamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this team'
    )
    teamUrl: Optional[URI] = Field(None, description='The HTTP URL for this team')
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['TeamAddRepositoryAuditEntry']] = Field(
        'TeamAddRepositoryAuditEntry', alias='__typename'
    )


class TeamChangeParentTeamAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, TeamAuditEntryData
):
    """
    Audit log entry for a team.change_parent_team event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the TeamChangeParentTeamAuditEntry object'
    )
    isLdapMapped: Optional[Boolean] = Field(
        None, description='Whether the team was mapped to an LDAP Group.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    parentTeam: Optional[Team_aliased] = Field(None, description='The new parent team.')
    parentTeamName: Optional[String] = Field(
        None, description='The name of the new parent team'
    )
    parentTeamNameWas: Optional[String] = Field(
        None, description='The name of the former parent team'
    )
    parentTeamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the parent team'
    )
    parentTeamUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the parent team'
    )
    parentTeamWas: Optional[Team_aliased] = Field(
        None, description='The former parent team.'
    )
    parentTeamWasResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the previous parent team'
    )
    parentTeamWasUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the previous parent team'
    )
    team: Optional[Team_aliased] = Field(
        None, description='The team associated with the action'
    )
    teamName: Optional[String] = Field(None, description='The name of the team')
    teamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this team'
    )
    teamUrl: Optional[URI] = Field(None, description='The HTTP URL for this team')
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['TeamChangeParentTeamAuditEntry']] = Field(
        'TeamChangeParentTeamAuditEntry', alias='__typename'
    )


class TeamConnection(BaseModel):
    """
    The connection type for Team.
    """

    edges: Optional[List[Optional[TeamEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Team]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['TeamConnection']] = Field(
        'TeamConnection', alias='__typename'
    )


class TeamDiscussion(
    Comment,
    Deletable,
    Node,
    Reactable,
    Subscribable,
    UniformResourceLocatable,
    Updatable,
    UpdatableComment,
):
    """
    A team discussion.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the discussion's team."
    )
    body: String = Field(..., description='The body as Markdown.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    bodyVersion: String = Field(..., description='Identifies the discussion body hash.')
    comments: TeamDiscussionCommentConnection = Field(
        ..., description='A list of comments on this discussion.'
    )
    commentsResourcePath: URI = Field(
        ..., description='The HTTP path for discussion comments'
    )
    commentsUrl: URI = Field(..., description='The HTTP URL for discussion comments')
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the TeamDiscussion object')
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    isPinned: Boolean = Field(
        ..., description='Whether or not the discussion is pinned.'
    )
    isPrivate: Boolean = Field(
        ...,
        description='Whether or not the discussion is only visible to team members and organization owners.',
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    number: Int = Field(..., description='Identifies the discussion within its team.')
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this discussion')
    team: Team_aliased = Field(
        ..., description='The team that defines the context of this discussion.'
    )
    title: String = Field(..., description='The title of the discussion')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this discussion')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanPin: Boolean = Field(
        ..., description='Whether or not the current viewer can pin this discussion.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanSubscribe: Boolean = Field(
        ...,
        description='Check if the viewer is able to change their subscription status for the repository.',
    )
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    viewerSubscription: Optional[SubscriptionState] = Field(
        None,
        description='Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.',
    )
    typename__: Optional[Literal['TeamDiscussion']] = Field(
        'TeamDiscussion', alias='__typename'
    )


class TeamDiscussionComment(
    Comment,
    Deletable,
    Node,
    Reactable,
    UniformResourceLocatable,
    Updatable,
    UpdatableComment,
):
    """
    A comment on a team discussion.
    """

    author: Optional[Actor] = Field(
        None, description='The actor who authored the comment.'
    )
    authorAssociation: CommentAuthorAssociation = Field(
        ..., description="Author's association with the comment's team."
    )
    body: String = Field(..., description='The body as Markdown.')
    bodyHTML: HTML = Field(..., description='The body rendered to HTML.')
    bodyText: String = Field(..., description='The body rendered to text.')
    bodyVersion: String = Field(
        ..., description='The current version of the body content.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    createdViaEmail: Boolean = Field(
        ..., description='Check if this comment was created via an email reply.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    discussion: TeamDiscussion = Field(
        ..., description='The discussion this comment is about.'
    )
    editor: Optional[Actor] = Field(
        None, description='The actor who edited the comment.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the TeamDiscussionComment object'
    )
    includesCreatedEdit: Boolean = Field(
        ...,
        description='Check if this comment was edited and includes an edit with the creation data',
    )
    lastEditedAt: Optional[DateTime] = Field(
        None, description='The moment the editor made the last edit'
    )
    number: Int = Field(..., description='Identifies the comment number.')
    publishedAt: Optional[DateTime] = Field(
        None, description='Identifies when the comment was published at.'
    )
    reactionGroups: Optional[List[ReactionGroup]] = Field(
        None, description='A list of reactions grouped by content left on the subject.'
    )
    reactions: ReactionConnection = Field(
        ..., description='A list of Reactions left on the Issue.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this comment')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this comment')
    userContentEdits: Optional[UserContentEditConnection] = Field(
        None, description='A list of edits to this content.'
    )
    viewerCanDelete: Boolean = Field(
        ..., description='Check if the current viewer can delete this object.'
    )
    viewerCanReact: Boolean = Field(..., description='Can user react to this subject')
    viewerCanUpdate: Boolean = Field(
        ..., description='Check if the current viewer can update this object.'
    )
    viewerCannotUpdateReasons: List[CommentCannotUpdateReason] = Field(
        ..., description='Reasons why the current viewer can not update this comment.'
    )
    viewerDidAuthor: Boolean = Field(
        ..., description='Did the viewer author this comment.'
    )
    typename__: Optional[Literal['TeamDiscussionComment']] = Field(
        'TeamDiscussionComment', alias='__typename'
    )


class TeamDiscussionCommentConnection(BaseModel):
    """
    The connection type for TeamDiscussionComment.
    """

    edges: Optional[List[Optional[TeamDiscussionCommentEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[TeamDiscussionComment]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['TeamDiscussionCommentConnection']] = Field(
        'TeamDiscussionCommentConnection', alias='__typename'
    )


class TeamDiscussionCommentEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[TeamDiscussionComment] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['TeamDiscussionCommentEdge']] = Field(
        'TeamDiscussionCommentEdge', alias='__typename'
    )


class TeamDiscussionConnection(BaseModel):
    """
    The connection type for TeamDiscussion.
    """

    edges: Optional[List[Optional[TeamDiscussionEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[TeamDiscussion]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['TeamDiscussionConnection']] = Field(
        'TeamDiscussionConnection', alias='__typename'
    )


class TeamDiscussionEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[TeamDiscussion] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['TeamDiscussionEdge']] = Field(
        'TeamDiscussionEdge', alias='__typename'
    )


class TeamEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[Team_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['TeamEdge']] = Field('TeamEdge', alias='__typename')


class TeamMemberConnection(BaseModel):
    """
    The connection type for User.
    """

    edges: Optional[List[Optional[TeamMemberEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['TeamMemberConnection']] = Field(
        'TeamMemberConnection', alias='__typename'
    )


class TeamMemberEdge(BaseModel):
    """
    Represents a user who is a member of a team.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    memberAccessResourcePath: URI = Field(
        ..., description="The HTTP path to the organization's member access page."
    )
    memberAccessUrl: URI = Field(
        ..., description="The HTTP URL to the organization's member access page."
    )
    node: User_aliased
    role: TeamMemberRole = Field(
        ..., description='The role the member has on the team.'
    )
    typename__: Optional[Literal['TeamMemberEdge']] = Field(
        'TeamMemberEdge', alias='__typename'
    )


class TeamRemoveMemberAuditEntry(
    AuditEntry, Node, OrganizationAuditEntryData, TeamAuditEntryData
):
    """
    Audit log entry for a team.remove_member event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the TeamRemoveMemberAuditEntry object'
    )
    isLdapMapped: Optional[Boolean] = Field(
        None, description='Whether the team was mapped to an LDAP Group.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    team: Optional[Team_aliased] = Field(
        None, description='The team associated with the action'
    )
    teamName: Optional[String] = Field(None, description='The name of the team')
    teamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this team'
    )
    teamUrl: Optional[URI] = Field(None, description='The HTTP URL for this team')
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['TeamRemoveMemberAuditEntry']] = Field(
        'TeamRemoveMemberAuditEntry', alias='__typename'
    )


class TeamRemoveRepositoryAuditEntry(
    AuditEntry,
    Node,
    OrganizationAuditEntryData,
    RepositoryAuditEntryData,
    TeamAuditEntryData,
):
    """
    Audit log entry for a team.remove_repository event.
    """

    action: String = Field(..., description='The action name')
    actor: Optional[AuditEntryActor] = Field(
        None, description='The user who initiated the action'
    )
    actorIp: Optional[String] = Field(None, description='The IP address of the actor')
    actorLocation: Optional[ActorLocation] = Field(
        None, description="A readable representation of the actor's location"
    )
    actorLogin: Optional[String] = Field(
        None, description='The username of the user who initiated the action'
    )
    actorResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the actor.'
    )
    actorUrl: Optional[URI] = Field(None, description='The HTTP URL for the actor.')
    createdAt: PreciseDateTime = Field(
        ..., description='The time the action was initiated'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the TeamRemoveRepositoryAuditEntry object'
    )
    isLdapMapped: Optional[Boolean] = Field(
        None, description='Whether the team was mapped to an LDAP Group.'
    )
    operationType: Optional[OperationType] = Field(
        None, description='The corresponding operation type for the action'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The Organization associated with the Audit Entry.'
    )
    organizationName: Optional[String] = Field(
        None, description='The name of the Organization.'
    )
    organizationResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the organization'
    )
    organizationUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the organization'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository associated with the action'
    )
    repositoryName: Optional[String] = Field(
        None, description='The name of the repository'
    )
    repositoryResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the repository'
    )
    repositoryUrl: Optional[URI] = Field(
        None, description='The HTTP URL for the repository'
    )
    team: Optional[Team_aliased] = Field(
        None, description='The team associated with the action'
    )
    teamName: Optional[String] = Field(None, description='The name of the team')
    teamResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for this team'
    )
    teamUrl: Optional[URI] = Field(None, description='The HTTP URL for this team')
    user: Optional[User_aliased] = Field(
        None, description='The user affected by the action'
    )
    userLogin: Optional[String] = Field(
        None,
        description='For actions involving two users, the actor is the initiator and the user is the affected user.',
    )
    userResourcePath: Optional[URI] = Field(
        None, description='The HTTP path for the user.'
    )
    userUrl: Optional[URI] = Field(None, description='The HTTP URL for the user.')
    typename__: Optional[Literal['TeamRemoveRepositoryAuditEntry']] = Field(
        'TeamRemoveRepositoryAuditEntry', alias='__typename'
    )


class TeamRepositoryConnection(BaseModel):
    """
    The connection type for Repository.
    """

    edges: Optional[List[Optional[TeamRepositoryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[Repository]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['TeamRepositoryConnection']] = Field(
        'TeamRepositoryConnection', alias='__typename'
    )


class TeamRepositoryEdge(BaseModel):
    """
    Represents a team repository.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Repository_aliased
    permission: RepositoryPermission = Field(
        ..., description='The permission level the team has on the repository'
    )
    typename__: Optional[Literal['TeamRepositoryEdge']] = Field(
        'TeamRepositoryEdge', alias='__typename'
    )


class TextMatch(BaseModel):
    """
    A text match within a search result.
    """

    fragment: String = Field(
        ..., description='The specific text fragment within the property matched on.'
    )
    highlights: List[TextMatchHighlight] = Field(
        ..., description='Highlights within the matched fragment.'
    )
    property: String = Field(..., description='The property matched on.')
    typename__: Optional[Literal['TextMatch']] = Field('TextMatch', alias='__typename')


class TextMatchHighlight(BaseModel):
    """
    Represents a single highlight in a search result match.
    """

    beginIndice: Int = Field(
        ..., description='The indice in the fragment where the matched text begins.'
    )
    endIndice: Int = Field(
        ..., description='The indice in the fragment where the matched text ends.'
    )
    text: String = Field(..., description='The text matched.')
    typename__: Optional[Literal['TextMatchHighlight']] = Field(
        'TextMatchHighlight', alias='__typename'
    )


class Topic(Node, Starrable):
    """
    A topic aggregates entities that are related to a subject.
    """

    id: ID_aliased = Field(..., description='The Node ID of the Topic object')
    name: String = Field(..., description="The topic's name.")
    relatedTopics: List[Topic] = Field(
        ...,
        description='A list of related topics, including aliases of this topic, sorted with the most relevant\nfirst. Returns up to 10 Topics.',
    )
    repositories: RepositoryConnection = Field(
        ..., description='A list of repositories.'
    )
    stargazerCount: Int = Field(
        ...,
        description='Returns a count of how many stargazers there are on this object',
    )
    stargazers: StargazerConnection = Field(
        ..., description='A list of users who have starred this starrable.'
    )
    viewerHasStarred: Boolean = Field(
        ...,
        description='Returns a boolean indicating whether the viewing user has starred this starrable.',
    )
    typename__: Optional[Literal['Topic']] = Field('Topic', alias='__typename')


class TransferEnterpriseOrganizationPayload(BaseModel):
    """
    Autogenerated return type of TransferEnterpriseOrganization.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The organization for which a transfer was initiated.'
    )
    typename__: Optional[Literal['TransferEnterpriseOrganizationPayload']] = Field(
        'TransferEnterpriseOrganizationPayload', alias='__typename'
    )


class TransferIssuePayload(BaseModel):
    """
    Autogenerated return type of TransferIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The issue that was transferred'
    )
    typename__: Optional[Literal['TransferIssuePayload']] = Field(
        'TransferIssuePayload', alias='__typename'
    )


class TransferredEvent(Node):
    """
    Represents a 'transferred' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    fromRepository: Optional[Repository_aliased] = Field(
        None, description='The repository this came from'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the TransferredEvent object'
    )
    issue: Issue_aliased = Field(
        ..., description='Identifies the issue associated with the event.'
    )
    typename__: Optional[Literal['TransferredEvent']] = Field(
        'TransferredEvent', alias='__typename'
    )


class Tree(GitObject, Node):
    """
    Represents a Git tree.
    """

    abbreviatedOid: String = Field(
        ..., description='An abbreviated version of the Git object ID'
    )
    commitResourcePath: URI = Field(
        ..., description='The HTTP path for this Git object'
    )
    commitUrl: URI = Field(..., description='The HTTP URL for this Git object')
    entries: Optional[List[TreeEntry]] = Field(
        None, description='A list of tree entries.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Tree object')
    oid: GitObjectID = Field(..., description='The Git object ID')
    repository: Repository_aliased = Field(
        ..., description='The Repository the Git object belongs to'
    )
    typename__: Optional[Literal['Tree']] = Field('Tree', alias='__typename')


class TreeEntry(BaseModel):
    """
    Represents a Git tree entry.
    """

    extension: Optional[String] = Field(None, description='The extension of the file')
    isGenerated: Boolean = Field(
        ..., description='Whether or not this tree entry is generated'
    )
    language: Optional[Language] = Field(
        None, description='The programming language this file is written in.'
    )
    lineCount: Optional[Int] = Field(None, description='Number of lines in the file.')
    mode: Int = Field(..., description='Entry file mode.')
    name: String = Field(..., description='Entry file name.')
    nameRaw: Base64String = Field(..., description='Entry file name. (Base64-encoded)')
    object: Optional[GitObject] = Field(None, description='Entry file object.')
    oid: GitObjectID = Field(..., description='Entry file Git object ID.')
    path: Optional[String] = Field(None, description='The full path of the file.')
    pathRaw: Optional[Base64String] = Field(
        None, description='The full path of the file. (Base64-encoded)'
    )
    repository: Repository_aliased = Field(
        ..., description='The Repository the tree entry belongs to'
    )
    size: Int = Field(..., description='Entry byte size')
    submodule: Optional[Submodule] = Field(
        None,
        description='If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule',
    )
    type: String = Field(..., description='Entry file type.')
    typename__: Optional[Literal['TreeEntry']] = Field('TreeEntry', alias='__typename')


class UnarchiveProjectV2ItemPayload(BaseModel):
    """
    Autogenerated return type of UnarchiveProjectV2Item.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    item: Optional[ProjectV2Item] = Field(
        None, description='The item unarchived from the project.'
    )
    typename__: Optional[Literal['UnarchiveProjectV2ItemPayload']] = Field(
        'UnarchiveProjectV2ItemPayload', alias='__typename'
    )


class UnarchiveRepositoryPayload(BaseModel):
    """
    Autogenerated return type of UnarchiveRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository that was unarchived.'
    )
    typename__: Optional[Literal['UnarchiveRepositoryPayload']] = Field(
        'UnarchiveRepositoryPayload', alias='__typename'
    )


class UnassignedEvent(Node):
    """
    Represents an 'unassigned' event on any assignable object.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    assignable: Assignable = Field(
        ..., description='Identifies the assignable associated with the event.'
    )
    assignee: Optional[Assignee] = Field(
        None, description='Identifies the user or mannequin that was unassigned.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the UnassignedEvent object')
    user: Optional[User_aliased] = Field(
        None, description='Identifies the subject (user) who was unassigned.'
    )
    typename__: Optional[Literal['UnassignedEvent']] = Field(
        'UnassignedEvent', alias='__typename'
    )


class UnfollowOrganizationPayload(BaseModel):
    """
    Autogenerated return type of UnfollowOrganization.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organization: Optional[Organization_aliased] = Field(
        None, description='The organization that was unfollowed.'
    )
    typename__: Optional[Literal['UnfollowOrganizationPayload']] = Field(
        'UnfollowOrganizationPayload', alias='__typename'
    )


class UnfollowUserPayload(BaseModel):
    """
    Autogenerated return type of UnfollowUser.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user that was unfollowed.'
    )
    typename__: Optional[Literal['UnfollowUserPayload']] = Field(
        'UnfollowUserPayload', alias='__typename'
    )


class UnknownSignature(GitSignature):
    """
    Represents an unknown signature on a Commit or Tag.
    """

    email: String = Field(..., description='Email used to sign this object.')
    isValid: Boolean = Field(
        ..., description='True if the signature is valid and verified by GitHub.'
    )
    payload: String = Field(
        ...,
        description='Payload for GPG signing object. Raw ODB object without the signature header.',
    )
    signature: String = Field(
        ..., description='ASCII-armored signature header from object.'
    )
    signer: Optional[User_aliased] = Field(
        None, description='GitHub user corresponding to the email signing this commit.'
    )
    state: GitSignatureState = Field(
        ...,
        description='The state of this signature. `VALID` if signature is valid and verified by\nGitHub, otherwise represents reason why signature is considered invalid.',
    )
    verifiedAt: Optional[DateTime] = Field(
        None, description='The date the signature was verified, if valid'
    )
    wasSignedByGitHub: Boolean = Field(
        ..., description="True if the signature was made with GitHub's signing key."
    )
    typename__: Optional[Literal['UnknownSignature']] = Field(
        'UnknownSignature', alias='__typename'
    )


class UnlabeledEvent(Node):
    """
    Represents an 'unlabeled' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the UnlabeledEvent object')
    label: Label = Field(
        ..., description="Identifies the label associated with the 'unlabeled' event."
    )
    labelable: Labelable = Field(
        ..., description='Identifies the `Labelable` associated with the event.'
    )
    typename__: Optional[Literal['UnlabeledEvent']] = Field(
        'UnlabeledEvent', alias='__typename'
    )


class UnlinkProjectV2FromRepositoryPayload(BaseModel):
    """
    Autogenerated return type of UnlinkProjectV2FromRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository the project is no longer linked to.'
    )
    typename__: Optional[Literal['UnlinkProjectV2FromRepositoryPayload']] = Field(
        'UnlinkProjectV2FromRepositoryPayload', alias='__typename'
    )


class UnlinkProjectV2FromTeamPayload(BaseModel):
    """
    Autogenerated return type of UnlinkProjectV2FromTeam.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    team: Optional[Team_aliased] = Field(
        None, description='The team the project is unlinked from'
    )
    typename__: Optional[Literal['UnlinkProjectV2FromTeamPayload']] = Field(
        'UnlinkProjectV2FromTeamPayload', alias='__typename'
    )


class UnlinkRepositoryFromProjectPayload(BaseModel):
    """
    Autogenerated return type of UnlinkRepositoryFromProject.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    project: Optional[Project] = Field(None, description='The linked Project.')
    repository: Optional[Repository_aliased] = Field(
        None, description='The linked Repository.'
    )
    typename__: Optional[Literal['UnlinkRepositoryFromProjectPayload']] = Field(
        'UnlinkRepositoryFromProjectPayload', alias='__typename'
    )


class UnlockLockablePayload(BaseModel):
    """
    Autogenerated return type of UnlockLockable.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    unlockedRecord: Optional[Lockable] = Field(
        None, description='The item that was unlocked.'
    )
    typename__: Optional[Literal['UnlockLockablePayload']] = Field(
        'UnlockLockablePayload', alias='__typename'
    )


class UnlockedEvent(Node):
    """
    Represents an 'unlocked' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the UnlockedEvent object')
    lockable: Lockable = Field(..., description='Object that was unlocked.')
    typename__: Optional[Literal['UnlockedEvent']] = Field(
        'UnlockedEvent', alias='__typename'
    )


class UnmarkDiscussionCommentAsAnswerPayload(BaseModel):
    """
    Autogenerated return type of UnmarkDiscussionCommentAsAnswer.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The discussion that includes the comment.'
    )
    typename__: Optional[Literal['UnmarkDiscussionCommentAsAnswerPayload']] = Field(
        'UnmarkDiscussionCommentAsAnswerPayload', alias='__typename'
    )


class UnmarkFileAsViewedPayload(BaseModel):
    """
    Autogenerated return type of UnmarkFileAsViewed.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The updated pull request.'
    )
    typename__: Optional[Literal['UnmarkFileAsViewedPayload']] = Field(
        'UnmarkFileAsViewedPayload', alias='__typename'
    )


class UnmarkIssueAsDuplicatePayload(BaseModel):
    """
    Autogenerated return type of UnmarkIssueAsDuplicate.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    duplicate: Optional[IssueOrPullRequest] = Field(
        None, description='The issue or pull request that was marked as a duplicate.'
    )
    typename__: Optional[Literal['UnmarkIssueAsDuplicatePayload']] = Field(
        'UnmarkIssueAsDuplicatePayload', alias='__typename'
    )


class UnmarkProjectV2AsTemplatePayload(BaseModel):
    """
    Autogenerated return type of UnmarkProjectV2AsTemplate.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(None, description='The project.')
    typename__: Optional[Literal['UnmarkProjectV2AsTemplatePayload']] = Field(
        'UnmarkProjectV2AsTemplatePayload', alias='__typename'
    )


class UnmarkedAsDuplicateEvent(Node):
    """
    Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    canonical: Optional[IssueOrPullRequest] = Field(
        None,
        description='The authoritative issue or pull request which has been duplicated by another.',
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    duplicate: Optional[IssueOrPullRequest] = Field(
        None,
        description='The issue or pull request which has been marked as a duplicate of another.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the UnmarkedAsDuplicateEvent object'
    )
    isCrossRepository: Boolean = Field(
        ..., description='Canonical and duplicate belong to different repositories.'
    )
    typename__: Optional[Literal['UnmarkedAsDuplicateEvent']] = Field(
        'UnmarkedAsDuplicateEvent', alias='__typename'
    )


class UnminimizeCommentPayload(BaseModel):
    """
    Autogenerated return type of UnminimizeComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    unminimizedComment: Optional[Minimizable] = Field(
        None, description='The comment that was unminimized.'
    )
    typename__: Optional[Literal['UnminimizeCommentPayload']] = Field(
        'UnminimizeCommentPayload', alias='__typename'
    )


class UnpinIssuePayload(BaseModel):
    """
    Autogenerated return type of UnpinIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: Optional[ID_aliased] = Field(
        None, description='The id of the pinned issue that was unpinned'
    )
    issue: Optional[Issue_aliased] = Field(
        None, description='The issue that was unpinned'
    )
    typename__: Optional[Literal['UnpinIssuePayload']] = Field(
        'UnpinIssuePayload', alias='__typename'
    )


class UnpinnedEvent(Node):
    """
    Represents an 'unpinned' event on a given issue or pull request.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the UnpinnedEvent object')
    issue: Issue_aliased = Field(
        ..., description='Identifies the issue associated with the event.'
    )
    typename__: Optional[Literal['UnpinnedEvent']] = Field(
        'UnpinnedEvent', alias='__typename'
    )


class UnresolveReviewThreadPayload(BaseModel):
    """
    Autogenerated return type of UnresolveReviewThread.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    thread: Optional[PullRequestReviewThread_aliased] = Field(
        None, description='The thread to resolve.'
    )
    typename__: Optional[Literal['UnresolveReviewThreadPayload']] = Field(
        'UnresolveReviewThreadPayload', alias='__typename'
    )


class UnsubscribedEvent(Node):
    """
    Represents an 'unsubscribed' event on a given `Subscribable`.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the UnsubscribedEvent object'
    )
    subscribable: Subscribable = Field(..., description='Object referenced by event.')
    typename__: Optional[Literal['UnsubscribedEvent']] = Field(
        'UnsubscribedEvent', alias='__typename'
    )


class UpdateBranchProtectionRulePayload(BaseModel):
    """
    Autogenerated return type of UpdateBranchProtectionRule.
    """

    branchProtectionRule: Optional[BranchProtectionRule] = Field(
        None, description='The newly created BranchProtectionRule.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['UpdateBranchProtectionRulePayload']] = Field(
        'UpdateBranchProtectionRulePayload', alias='__typename'
    )


class UpdateCheckRunPayload(BaseModel):
    """
    Autogenerated return type of UpdateCheckRun.
    """

    checkRun: Optional[CheckRun_aliased] = Field(
        None, description='The updated check run.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['UpdateCheckRunPayload']] = Field(
        'UpdateCheckRunPayload', alias='__typename'
    )


class UpdateCheckSuitePreferencesPayload(BaseModel):
    """
    Autogenerated return type of UpdateCheckSuitePreferences.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The updated repository.'
    )
    typename__: Optional[Literal['UpdateCheckSuitePreferencesPayload']] = Field(
        'UpdateCheckSuitePreferencesPayload', alias='__typename'
    )


class UpdateDiscussionCommentPayload(BaseModel):
    """
    Autogenerated return type of UpdateDiscussionComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comment: Optional[DiscussionComment] = Field(
        None, description='The modified discussion comment.'
    )
    typename__: Optional[Literal['UpdateDiscussionCommentPayload']] = Field(
        'UpdateDiscussionCommentPayload', alias='__typename'
    )


class UpdateDiscussionPayload(BaseModel):
    """
    Autogenerated return type of UpdateDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussion: Optional[Discussion_aliased] = Field(
        None, description='The modified discussion.'
    )
    typename__: Optional[Literal['UpdateDiscussionPayload']] = Field(
        'UpdateDiscussionPayload', alias='__typename'
    )


class UpdateEnterpriseAdministratorRolePayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseAdministratorRole.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: Optional[String] = Field(
        None,
        description="A message confirming the result of changing the administrator's role.",
    )
    typename__: Optional[Literal['UpdateEnterpriseAdministratorRolePayload']] = Field(
        'UpdateEnterpriseAdministratorRolePayload', alias='__typename'
    )


class UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated allow private repository forking setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the allow private repository forking setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload']
    ] = Field(
        'UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload',
        alias='__typename',
    )


class UpdateEnterpriseDefaultRepositoryPermissionSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated base repository permission setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the base repository permission setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseDefaultRepositoryPermissionSettingPayload']
    ] = Field(
        'UpdateEnterpriseDefaultRepositoryPermissionSettingPayload', alias='__typename'
    )


class UpdateEnterpriseDeployKeySettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseDeployKeySetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The enterprise with the updated deploy key setting.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the deploy key setting.',
    )
    typename__: Optional[Literal['UpdateEnterpriseDeployKeySettingPayload']] = Field(
        'UpdateEnterpriseDeployKeySettingPayload', alias='__typename'
    )


class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can change repository visibility setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can change repository visibility setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload',
        alias='__typename',
    )


class UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can create repositories setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can create repositories setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload', alias='__typename'
    )


class UpdateEnterpriseMembersCanDeleteIssuesSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can delete issues setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can delete issues setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanDeleteIssuesSettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanDeleteIssuesSettingPayload', alias='__typename'
    )


class UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can delete repositories setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can delete repositories setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload', alias='__typename'
    )


class UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can invite collaborators setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can invite collaborators setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload',
        alias='__typename',
    )


class UpdateEnterpriseMembersCanMakePurchasesSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can make purchases setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can make purchases setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanMakePurchasesSettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanMakePurchasesSettingPayload', alias='__typename'
    )


class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can update protected branches setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can update protected branches setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload',
        alias='__typename',
    )


class UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated members can view dependency insights setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the members can view dependency insights setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload']
    ] = Field(
        'UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload',
        alias='__typename',
    )


class UpdateEnterpriseOrganizationProjectsSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated organization projects setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the organization projects setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseOrganizationProjectsSettingPayload']
    ] = Field('UpdateEnterpriseOrganizationProjectsSettingPayload', alias='__typename')


class UpdateEnterpriseOwnerOrganizationRolePayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: Optional[String] = Field(
        None,
        description="A message confirming the result of changing the owner's organization role.",
    )
    typename__: Optional[Literal['UpdateEnterpriseOwnerOrganizationRolePayload']] = (
        Field('UpdateEnterpriseOwnerOrganizationRolePayload', alias='__typename')
    )


class UpdateEnterpriseProfilePayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseProfile.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The updated enterprise.'
    )
    typename__: Optional[Literal['UpdateEnterpriseProfilePayload']] = Field(
        'UpdateEnterpriseProfilePayload', alias='__typename'
    )


class UpdateEnterpriseRepositoryProjectsSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The enterprise with the updated repository projects setting.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the repository projects setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseRepositoryProjectsSettingPayload']
    ] = Field('UpdateEnterpriseRepositoryProjectsSettingPayload', alias='__typename')


class UpdateEnterpriseTeamDiscussionsSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None, description='The enterprise with the updated team discussions setting.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the team discussions setting.',
    )
    typename__: Optional[Literal['UpdateEnterpriseTeamDiscussionsSettingPayload']] = (
        Field('UpdateEnterpriseTeamDiscussionsSettingPayload', alias='__typename')
    )


class UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated two-factor authentication disallowed methods setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the two-factor authentication disallowed methods setting.',
    )
    typename__: Optional[
        Literal[
            'UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload'
        ]
    ] = Field(
        'UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload',
        alias='__typename',
    )


class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterprise: Optional[Enterprise_aliased] = Field(
        None,
        description='The enterprise with the updated two factor authentication required setting.',
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the two factor authentication required setting.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload']
    ] = Field(
        'UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload',
        alias='__typename',
    )


class UpdateEnvironmentPayload(BaseModel):
    """
    Autogenerated return type of UpdateEnvironment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    environment: Optional[Environment] = Field(
        None, description='The updated environment.'
    )
    typename__: Optional[Literal['UpdateEnvironmentPayload']] = Field(
        'UpdateEnvironmentPayload', alias='__typename'
    )


class UpdateIpAllowListEnabledSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateIpAllowListEnabledSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    owner: Optional[IpAllowListOwner] = Field(
        None, description='The IP allow list owner on which the setting was updated.'
    )
    typename__: Optional[Literal['UpdateIpAllowListEnabledSettingPayload']] = Field(
        'UpdateIpAllowListEnabledSettingPayload', alias='__typename'
    )


class UpdateIpAllowListEntryPayload(BaseModel):
    """
    Autogenerated return type of UpdateIpAllowListEntry.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ipAllowListEntry: Optional[IpAllowListEntry] = Field(
        None, description='The IP allow list entry that was updated.'
    )
    typename__: Optional[Literal['UpdateIpAllowListEntryPayload']] = Field(
        'UpdateIpAllowListEntryPayload', alias='__typename'
    )


class UpdateIpAllowListForInstalledAppsEnabledSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    owner: Optional[IpAllowListOwner] = Field(
        None, description='The IP allow list owner on which the setting was updated.'
    )
    typename__: Optional[
        Literal['UpdateIpAllowListForInstalledAppsEnabledSettingPayload']
    ] = Field(
        'UpdateIpAllowListForInstalledAppsEnabledSettingPayload', alias='__typename'
    )


class UpdateIssueCommentPayload(BaseModel):
    """
    Autogenerated return type of UpdateIssueComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueComment: Optional[IssueComment_aliased] = Field(
        None, description='The updated comment.'
    )
    typename__: Optional[Literal['UpdateIssueCommentPayload']] = Field(
        'UpdateIssueCommentPayload', alias='__typename'
    )


class UpdateIssueIssueTypePayload(BaseModel):
    """
    Autogenerated return type of UpdateIssueIssueType.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(None, description='The updated issue')
    typename__: Optional[Literal['UpdateIssueIssueTypePayload']] = Field(
        'UpdateIssueIssueTypePayload', alias='__typename'
    )


class UpdateIssuePayload(BaseModel):
    """
    Autogenerated return type of UpdateIssue.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issue: Optional[Issue_aliased] = Field(None, description='The issue.')
    typename__: Optional[Literal['UpdateIssuePayload']] = Field(
        'UpdateIssuePayload', alias='__typename'
    )


class UpdateIssueTypePayload(BaseModel):
    """
    Autogenerated return type of UpdateIssueType.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueType: Optional[IssueType] = Field(None, description='The updated issue type')
    typename__: Optional[Literal['UpdateIssueTypePayload']] = Field(
        'UpdateIssueTypePayload', alias='__typename'
    )


class UpdateLabelPayload(BaseModel):
    """
    Autogenerated return type of UpdateLabel.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    label: Optional[Label] = Field(None, description='The updated label.')
    typename__: Optional[Literal['UpdateLabelPayload']] = Field(
        'UpdateLabelPayload', alias='__typename'
    )


class UpdateNotificationRestrictionSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateNotificationRestrictionSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    owner: Optional[VerifiableDomainOwner] = Field(
        None, description='The owner on which the setting was updated.'
    )
    typename__: Optional[Literal['UpdateNotificationRestrictionSettingPayload']] = (
        Field('UpdateNotificationRestrictionSettingPayload', alias='__typename')
    )


class UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the allow private repository forking setting.',
    )
    organization: Optional[Organization_aliased] = Field(
        None,
        description='The organization with the updated allow private repository forking setting.',
    )
    typename__: Optional[
        Literal['UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload']
    ] = Field(
        'UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload',
        alias='__typename',
    )


class UpdateOrganizationWebCommitSignoffSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the web commit signoff setting.',
    )
    organization: Optional[Organization_aliased] = Field(
        None,
        description='The organization with the updated web commit signoff setting.',
    )
    typename__: Optional[
        Literal['UpdateOrganizationWebCommitSignoffSettingPayload']
    ] = Field('UpdateOrganizationWebCommitSignoffSettingPayload', alias='__typename')


class UpdateParameters(BaseModel):
    """
    Only allow users with bypass permission to update matching refs.
    """

    updateAllowsFetchAndMerge: Boolean = Field(
        ..., description='Branch can pull changes from its upstream repository'
    )
    typename__: Optional[Literal['UpdateParameters']] = Field(
        'UpdateParameters', alias='__typename'
    )


class UpdatePatreonSponsorabilityPayload(BaseModel):
    """
    Autogenerated return type of UpdatePatreonSponsorability.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorsListing: Optional[SponsorsListing] = Field(
        None, description='The GitHub Sponsors profile.'
    )
    typename__: Optional[Literal['UpdatePatreonSponsorabilityPayload']] = Field(
        'UpdatePatreonSponsorabilityPayload', alias='__typename'
    )


class UpdateProjectCardPayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectCard.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectCard: Optional[ProjectCard] = Field(
        None, description='The updated ProjectCard.'
    )
    typename__: Optional[Literal['UpdateProjectCardPayload']] = Field(
        'UpdateProjectCardPayload', alias='__typename'
    )


class UpdateProjectColumnPayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectColumn.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectColumn: Optional[ProjectColumn] = Field(
        None, description='The updated project column.'
    )
    typename__: Optional[Literal['UpdateProjectColumnPayload']] = Field(
        'UpdateProjectColumnPayload', alias='__typename'
    )


class UpdateProjectPayload(BaseModel):
    """
    Autogenerated return type of UpdateProject.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    project: Optional[Project] = Field(None, description='The updated project.')
    typename__: Optional[Literal['UpdateProjectPayload']] = Field(
        'UpdateProjectPayload', alias='__typename'
    )


class UpdateProjectV2CollaboratorsPayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectV2Collaborators.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    collaborators: Optional[ProjectV2ActorConnection] = Field(
        None, description='The collaborators granted a role'
    )
    typename__: Optional[Literal['UpdateProjectV2CollaboratorsPayload']] = Field(
        'UpdateProjectV2CollaboratorsPayload', alias='__typename'
    )


class UpdateProjectV2DraftIssuePayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectV2DraftIssue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    draftIssue: Optional[DraftIssue_aliased] = Field(
        None, description='The draft issue updated in the project.'
    )
    typename__: Optional[Literal['UpdateProjectV2DraftIssuePayload']] = Field(
        'UpdateProjectV2DraftIssuePayload', alias='__typename'
    )


class UpdateProjectV2FieldPayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectV2Field.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2Field: Optional[ProjectV2FieldConfiguration] = Field(
        None, description='The updated field.'
    )
    typename__: Optional[Literal['UpdateProjectV2FieldPayload']] = Field(
        'UpdateProjectV2FieldPayload', alias='__typename'
    )


class UpdateProjectV2ItemFieldValuePayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectV2ItemFieldValue.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2Item: Optional[ProjectV2Item] = Field(
        None, description='The updated item.'
    )
    typename__: Optional[Literal['UpdateProjectV2ItemFieldValuePayload']] = Field(
        'UpdateProjectV2ItemFieldValuePayload', alias='__typename'
    )


class UpdateProjectV2ItemPositionPayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectV2ItemPosition.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    items: Optional[ProjectV2ItemConnection] = Field(
        None, description='The items in the new order'
    )
    typename__: Optional[Literal['UpdateProjectV2ItemPositionPayload']] = Field(
        'UpdateProjectV2ItemPositionPayload', alias='__typename'
    )


class UpdateProjectV2Payload(BaseModel):
    """
    Autogenerated return type of UpdateProjectV2.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='The updated Project.'
    )
    typename__: Optional[Literal['UpdateProjectV2Payload']] = Field(
        'UpdateProjectV2Payload', alias='__typename'
    )


class UpdateProjectV2StatusUpdatePayload(BaseModel):
    """
    Autogenerated return type of UpdateProjectV2StatusUpdate.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    statusUpdate: Optional[ProjectV2StatusUpdate] = Field(
        None, description='The status update updated in the project.'
    )
    typename__: Optional[Literal['UpdateProjectV2StatusUpdatePayload']] = Field(
        'UpdateProjectV2StatusUpdatePayload', alias='__typename'
    )


class UpdatePullRequestBranchPayload(BaseModel):
    """
    Autogenerated return type of UpdatePullRequestBranch.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The updated pull request.'
    )
    typename__: Optional[Literal['UpdatePullRequestBranchPayload']] = Field(
        'UpdatePullRequestBranchPayload', alias='__typename'
    )


class UpdatePullRequestPayload(BaseModel):
    """
    Autogenerated return type of UpdatePullRequest.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequest: Optional[PullRequest_aliased] = Field(
        None, description='The updated pull request.'
    )
    typename__: Optional[Literal['UpdatePullRequestPayload']] = Field(
        'UpdatePullRequestPayload', alias='__typename'
    )


class UpdatePullRequestReviewCommentPayload(BaseModel):
    """
    Autogenerated return type of UpdatePullRequestReviewComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReviewComment: Optional[PullRequestReviewComment_aliased] = Field(
        None, description='The updated comment.'
    )
    typename__: Optional[Literal['UpdatePullRequestReviewCommentPayload']] = Field(
        'UpdatePullRequestReviewCommentPayload', alias='__typename'
    )


class UpdatePullRequestReviewPayload(BaseModel):
    """
    Autogenerated return type of UpdatePullRequestReview.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReview: Optional[PullRequestReview_aliased] = Field(
        None, description='The updated pull request review.'
    )
    typename__: Optional[Literal['UpdatePullRequestReviewPayload']] = Field(
        'UpdatePullRequestReviewPayload', alias='__typename'
    )


class UpdateRefPayload(BaseModel):
    """
    Autogenerated return type of UpdateRef.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ref: Optional[Ref] = Field(None, description='The updated Ref.')
    typename__: Optional[Literal['UpdateRefPayload']] = Field(
        'UpdateRefPayload', alias='__typename'
    )


class UpdateRefsPayload(BaseModel):
    """
    Autogenerated return type of UpdateRefs.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['UpdateRefsPayload']] = Field(
        'UpdateRefsPayload', alias='__typename'
    )


class UpdateRepositoryPayload(BaseModel):
    """
    Autogenerated return type of UpdateRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The updated repository.'
    )
    typename__: Optional[Literal['UpdateRepositoryPayload']] = Field(
        'UpdateRepositoryPayload', alias='__typename'
    )


class UpdateRepositoryRulesetPayload(BaseModel):
    """
    Autogenerated return type of UpdateRepositoryRuleset.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ruleset: Optional[RepositoryRuleset] = Field(
        None, description='The newly created Ruleset.'
    )
    typename__: Optional[Literal['UpdateRepositoryRulesetPayload']] = Field(
        'UpdateRepositoryRulesetPayload', alias='__typename'
    )


class UpdateRepositoryWebCommitSignoffSettingPayload(BaseModel):
    """
    Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: Optional[String] = Field(
        None,
        description='A message confirming the result of updating the web commit signoff setting.',
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The updated repository.'
    )
    typename__: Optional[Literal['UpdateRepositoryWebCommitSignoffSettingPayload']] = (
        Field('UpdateRepositoryWebCommitSignoffSettingPayload', alias='__typename')
    )


class UpdateSponsorshipPreferencesPayload(BaseModel):
    """
    Autogenerated return type of UpdateSponsorshipPreferences.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorship: Optional[Sponsorship] = Field(
        None, description='The sponsorship that was updated.'
    )
    typename__: Optional[Literal['UpdateSponsorshipPreferencesPayload']] = Field(
        'UpdateSponsorshipPreferencesPayload', alias='__typename'
    )


class UpdateSubscriptionPayload(BaseModel):
    """
    Autogenerated return type of UpdateSubscription.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subscribable: Optional[Subscribable] = Field(
        None, description='The input subscribable entity.'
    )
    typename__: Optional[Literal['UpdateSubscriptionPayload']] = Field(
        'UpdateSubscriptionPayload', alias='__typename'
    )


class UpdateTeamDiscussionCommentPayload(BaseModel):
    """
    Autogenerated return type of UpdateTeamDiscussionComment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    teamDiscussionComment: Optional[TeamDiscussionComment] = Field(
        None, description='The updated comment.'
    )
    typename__: Optional[Literal['UpdateTeamDiscussionCommentPayload']] = Field(
        'UpdateTeamDiscussionCommentPayload', alias='__typename'
    )


class UpdateTeamDiscussionPayload(BaseModel):
    """
    Autogenerated return type of UpdateTeamDiscussion.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    teamDiscussion: Optional[TeamDiscussion] = Field(
        None, description='The updated discussion.'
    )
    typename__: Optional[Literal['UpdateTeamDiscussionPayload']] = Field(
        'UpdateTeamDiscussionPayload', alias='__typename'
    )


class UpdateTeamReviewAssignmentPayload(BaseModel):
    """
    Autogenerated return type of UpdateTeamReviewAssignment.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    team: Optional[Team_aliased] = Field(None, description='The team that was modified')
    typename__: Optional[Literal['UpdateTeamReviewAssignmentPayload']] = Field(
        'UpdateTeamReviewAssignmentPayload', alias='__typename'
    )


class UpdateTeamsRepositoryPayload(BaseModel):
    """
    Autogenerated return type of UpdateTeamsRepository.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The repository that was updated.'
    )
    teams: Optional[List[Team]] = Field(
        None, description='The teams granted permission on the repository.'
    )
    typename__: Optional[Literal['UpdateTeamsRepositoryPayload']] = Field(
        'UpdateTeamsRepositoryPayload', alias='__typename'
    )


class UpdateTopicsPayload(BaseModel):
    """
    Autogenerated return type of UpdateTopics.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invalidTopicNames: Optional[List[String]] = Field(
        None, description='Names of the provided topics that are not valid.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='The updated repository.'
    )
    typename__: Optional[Literal['UpdateTopicsPayload']] = Field(
        'UpdateTopicsPayload', alias='__typename'
    )


class UpdateUserListPayload(BaseModel):
    """
    Autogenerated return type of UpdateUserList.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    list: Optional[UserList] = Field(None, description='The list that was just updated')
    typename__: Optional[Literal['UpdateUserListPayload']] = Field(
        'UpdateUserListPayload', alias='__typename'
    )


class UpdateUserListsForItemPayload(BaseModel):
    """
    Autogenerated return type of UpdateUserListsForItem.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    item: Optional[UserListItems] = Field(None, description='The item that was added')
    lists: Optional[List[UserList]] = Field(
        None, description='The lists to which this item belongs'
    )
    user: Optional[User_aliased] = Field(
        None, description='The user who owns the lists'
    )
    typename__: Optional[Literal['UpdateUserListsForItemPayload']] = Field(
        'UpdateUserListsForItemPayload', alias='__typename'
    )


class User(
    Actor,
    Node,
    PackageOwner,
    ProfileOwner,
    ProjectOwner,
    ProjectV2Owner,
    ProjectV2Recent,
    RepositoryDiscussionAuthor,
    RepositoryDiscussionCommentAuthor,
    RepositoryOwner,
    Sponsorable,
    UniformResourceLocatable,
):
    """
    A user is an individual's account on GitHub that owns repositories and can make new content.
    """

    anyPinnableItems: Boolean = Field(
        ...,
        description='Determine if this repository owner has any items that can be pinned to their profile.',
    )
    avatarUrl: URI = Field(
        ..., description="A URL pointing to the user's public avatar."
    )
    bio: Optional[String] = Field(None, description="The user's public profile bio.")
    bioHTML: HTML = Field(..., description="The user's public profile bio as HTML.")
    canReceiveOrganizationEmailsWhenNotificationsRestricted: Boolean = Field(
        ...,
        description='Could this user receive email notifications, if the organization had notification restrictions enabled?',
    )
    commitComments: CommitCommentConnection = Field(
        ..., description='A list of commit comments made by this user.'
    )
    company: Optional[String] = Field(
        None, description="The user's public profile company."
    )
    companyHTML: HTML = Field(
        ..., description="The user's public profile company as HTML."
    )
    contributionsCollection: ContributionsCollection = Field(
        ...,
        description='The collection of contributions this user has made to different repositories.',
    )
    copilotEndpoints: Optional[CopilotEndpoints] = Field(
        None, description="The user's Copilot endpoint information"
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    email: String = Field(..., description="The user's publicly visible profile email.")
    enterprises: Optional[EnterpriseConnection] = Field(
        None, description='A list of enterprises that the user belongs to.'
    )
    estimatedNextSponsorsPayoutInCents: Int = Field(
        ...,
        description='The estimated next GitHub Sponsors payout for this user/organization in cents (USD).',
    )
    followers: FollowerConnection = Field(
        ..., description='A list of users the given user is followed by.'
    )
    following: FollowingConnection = Field(
        ..., description='A list of users the given user is following.'
    )
    gist: Optional[Gist_aliased] = Field(None, description='Find gist by repo name.')
    gistComments: GistCommentConnection = Field(
        ..., description='A list of gist comments made by this user.'
    )
    gists: GistConnection = Field(
        ..., description='A list of the Gists the user has created.'
    )
    hasSponsorsListing: Boolean = Field(
        ..., description='True if this user/organization has a GitHub Sponsors listing.'
    )
    hovercard: Hovercard = Field(
        ..., description='The hovercard information for this user in a given context'
    )
    id: ID_aliased = Field(..., description='The Node ID of the User object')
    interactionAbility: Optional[RepositoryInteractionAbility] = Field(
        None, description='The interaction ability settings for this user.'
    )
    isBountyHunter: Boolean = Field(
        ...,
        description='Whether or not this user is a participant in the GitHub Security Bug Bounty.',
    )
    isCampusExpert: Boolean = Field(
        ...,
        description='Whether or not this user is a participant in the GitHub Campus Experts Program.',
    )
    isDeveloperProgramMember: Boolean = Field(
        ...,
        description='Whether or not this user is a GitHub Developer Program member.',
    )
    isEmployee: Boolean = Field(
        ..., description='Whether or not this user is a GitHub employee.'
    )
    isFollowingViewer: Boolean = Field(
        ...,
        description='Whether or not this user is following the viewer. Inverse of viewerIsFollowing',
    )
    isGitHubStar: Boolean = Field(
        ...,
        description='Whether or not this user is a member of the GitHub Stars Program.',
    )
    isHireable: Boolean = Field(
        ..., description='Whether or not the user has marked themselves as for hire.'
    )
    isSiteAdmin: Boolean = Field(
        ..., description='Whether or not this user is a site administrator.'
    )
    isSponsoredBy: Boolean = Field(
        ...,
        description='Whether the given account is sponsoring this user/organization.',
    )
    isSponsoringViewer: Boolean = Field(
        ..., description='True if the viewer is sponsored by this user/organization.'
    )
    isViewer: Boolean = Field(
        ..., description='Whether or not this user is the viewing user.'
    )
    issueComments: IssueCommentConnection = Field(
        ..., description='A list of issue comments made by this user.'
    )
    issues: IssueConnection = Field(
        ..., description='A list of issues associated with this user.'
    )
    itemShowcase: ProfileItemShowcase = Field(
        ...,
        description='Showcases a selection of repositories and gists that the profile owner has\neither curated or that have been selected automatically based on popularity.',
    )
    lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection = Field(
        ...,
        description='Calculate how much each sponsor has ever paid total to this maintainer via\nGitHub Sponsors. Does not include sponsorships paid via Patreon.',
    )
    lists: UserListConnection = Field(
        ..., description='A user-curated list of repositories'
    )
    location: Optional[String] = Field(
        None, description="The user's public profile location."
    )
    login: String = Field(..., description='The username used to login.')
    monthlyEstimatedSponsorsIncomeInCents: Int = Field(
        ...,
        description='The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).',
    )
    name: Optional[String] = Field(None, description="The user's public profile name.")
    organization: Optional[Organization_aliased] = Field(
        None, description='Find an organization by its login that the user belongs to.'
    )
    organizationVerifiedDomainEmails: List[String] = Field(
        ...,
        description='Verified email addresses that match verified domains for a specified organization the user is a member of.',
    )
    organizations: OrganizationConnection = Field(
        ..., description='A list of organizations the user belongs to.'
    )
    packages: PackageConnection = Field(
        ..., description='A list of packages under the owner.'
    )
    pinnableItems: PinnableItemConnection = Field(
        ...,
        description='A list of repositories and gists this profile owner can pin to their profile.',
    )
    pinnedItems: PinnableItemConnection = Field(
        ...,
        description='A list of repositories and gists this profile owner has pinned to their profile',
    )
    pinnedItemsRemaining: Int = Field(
        ...,
        description='Returns how many more items this profile owner can pin to their profile.',
    )
    project: Optional[Project] = Field(None, description='Find project by number.')
    projectV2: Optional[ProjectV2_aliased] = Field(
        None, description='Find a project by number.'
    )
    projects: ProjectConnection = Field(
        ..., description='A list of projects under the owner.'
    )
    projectsResourcePath: URI = Field(
        ..., description="The HTTP path listing user's projects"
    )
    projectsUrl: URI = Field(..., description="The HTTP URL listing user's projects")
    projectsV2: ProjectV2Connection = Field(
        ..., description='A list of projects under the owner.'
    )
    pronouns: Optional[String] = Field(None, description="The user's profile pronouns")
    publicKeys: PublicKeyConnection = Field(
        ..., description='A list of public keys associated with this user.'
    )
    pullRequests: PullRequestConnection = Field(
        ..., description='A list of pull requests associated with this user.'
    )
    recentProjects: ProjectV2Connection = Field(
        ...,
        description='Recent projects that this user has modified in the context of the owner.',
    )
    repositories: RepositoryConnection = Field(
        ..., description='A list of repositories that the user owns.'
    )
    repositoriesContributedTo: RepositoryConnection = Field(
        ..., description='A list of repositories that the user recently contributed to.'
    )
    repository: Optional[Repository_aliased] = Field(
        None, description='Find Repository.'
    )
    repositoryDiscussionComments: DiscussionCommentConnection = Field(
        ..., description='Discussion comments this user has authored.'
    )
    repositoryDiscussions: DiscussionConnection = Field(
        ..., description='Discussions this user has started.'
    )
    resourcePath: URI = Field(..., description='The HTTP path for this user')
    savedReplies: Optional[SavedReplyConnection] = Field(
        None, description='Replies this user has saved'
    )
    socialAccounts: SocialAccountConnection = Field(
        ...,
        description="The user's social media accounts, ordered as they appear on the user's profile.",
    )
    sponsoring: SponsorConnection = Field(
        ..., description='List of users and organizations this entity is sponsoring.'
    )
    sponsors: SponsorConnection = Field(
        ..., description='List of sponsors for this user or organization.'
    )
    sponsorsActivities: SponsorsActivityConnection = Field(
        ..., description='Events involving this sponsorable, such as new sponsorships.'
    )
    sponsorsListing: Optional[SponsorsListing] = Field(
        None, description='The GitHub Sponsors listing for this user or organization.'
    )
    sponsorshipForViewerAsSponsor: Optional[Sponsorship] = Field(
        None,
        description="The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.",
    )
    sponsorshipForViewerAsSponsorable: Optional[Sponsorship] = Field(
        None,
        description="The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.",
    )
    sponsorshipNewsletters: SponsorshipNewsletterConnection = Field(
        ...,
        description='List of sponsorship updates sent from this sponsorable to sponsors.',
    )
    sponsorshipsAsMaintainer: SponsorshipConnection = Field(
        ...,
        description='The sponsorships where this user or organization is the maintainer receiving the funds.',
    )
    sponsorshipsAsSponsor: SponsorshipConnection = Field(
        ...,
        description='The sponsorships where this user or organization is the funder.',
    )
    starredRepositories: StarredRepositoryConnection = Field(
        ..., description='Repositories the user has starred.'
    )
    status: Optional[UserStatus] = Field(
        None, description="The user's description of what they're currently doing."
    )
    suggestedListNames: List[UserListSuggestion] = Field(
        ..., description='Suggested names for user lists'
    )
    topRepositories: RepositoryConnection = Field(
        ...,
        description='Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created',
    )
    totalSponsorshipAmountAsSponsorInCents: Optional[Int] = Field(
        None,
        description='The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has\nspent on GitHub to fund sponsorships. Only returns a value when viewed by the\nuser themselves or by a user who can manage sponsorships for the requested organization.',
    )
    twitterUsername: Optional[String] = Field(
        None, description="The user's Twitter username."
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this user')
    userViewType: UserViewType = Field(
        ...,
        description='Whether the request returns publicly visible information or privately visible information about the user',
    )
    viewerCanChangePinnedItems: Boolean = Field(
        ..., description='Can the viewer pin repositories and gists to the profile?'
    )
    viewerCanCreateProjects: Boolean = Field(
        ..., description='Can the current viewer create new projects on this owner.'
    )
    viewerCanFollow: Boolean = Field(
        ..., description='Whether or not the viewer is able to follow the user.'
    )
    viewerCanSponsor: Boolean = Field(
        ...,
        description='Whether or not the viewer is able to sponsor this user/organization.',
    )
    viewerIsFollowing: Boolean = Field(
        ...,
        description='Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.',
    )
    viewerIsSponsoring: Boolean = Field(
        ..., description='True if the viewer is sponsoring this user/organization.'
    )
    watching: RepositoryConnection = Field(
        ..., description='A list of repositories the given user is watching.'
    )
    websiteUrl: Optional[URI] = Field(
        None, description="A URL pointing to the user's public website/blog."
    )
    typename__: Optional[Literal['User']] = Field('User', alias='__typename')


class UserBlockedEvent(Node):
    """
    Represents a 'user_blocked' event on a given user.
    """

    actor: Optional[Actor] = Field(
        None, description='Identifies the actor who performed the event.'
    )
    blockDuration: UserBlockDuration = Field(
        ..., description='Number of days that the user was blocked for.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the UserBlockedEvent object'
    )
    subject: Optional[User_aliased] = Field(
        None, description='The user who was blocked.'
    )
    typename__: Optional[Literal['UserBlockedEvent']] = Field(
        'UserBlockedEvent', alias='__typename'
    )


class UserConnection(BaseModel):
    """
    A list of users.
    """

    edges: Optional[List[Optional[UserEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[User]]] = Field(None, description='A list of nodes.')
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['UserConnection']] = Field(
        'UserConnection', alias='__typename'
    )


class UserContentEdit(Node):
    """
    An edit on user content
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    deletedAt: Optional[DateTime] = Field(
        None, description='Identifies the date and time when the object was deleted.'
    )
    deletedBy: Optional[Actor] = Field(
        None, description='The actor who deleted this content'
    )
    diff: Optional[String] = Field(
        None, description='A summary of the changes for this edit'
    )
    editedAt: DateTime = Field(..., description='When this content was edited')
    editor: Optional[Actor] = Field(
        None, description='The actor who edited this content'
    )
    id: ID_aliased = Field(..., description='The Node ID of the UserContentEdit object')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    typename__: Optional[Literal['UserContentEdit']] = Field(
        'UserContentEdit', alias='__typename'
    )


class UserContentEditConnection(BaseModel):
    """
    A list of edits to content.
    """

    edges: Optional[List[Optional[UserContentEditEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[UserContentEdit]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['UserContentEditConnection']] = Field(
        'UserContentEditConnection', alias='__typename'
    )


class UserContentEditEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[UserContentEdit] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['UserContentEditEdge']] = Field(
        'UserContentEditEdge', alias='__typename'
    )


class UserEdge(BaseModel):
    """
    Represents a user.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[User_aliased] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['UserEdge']] = Field('UserEdge', alias='__typename')


class UserEmailMetadata(BaseModel):
    """
    Email attributes from External Identity
    """

    primary: Optional[Boolean] = Field(
        None, description='Boolean to identify primary emails'
    )
    type: Optional[String] = Field(None, description='Type of email')
    value: String = Field(..., description='Email id')
    typename__: Optional[Literal['UserEmailMetadata']] = Field(
        'UserEmailMetadata', alias='__typename'
    )


class UserList(Node):
    """
    A user-curated list of repositories
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    description: Optional[String] = Field(
        None, description='The description of this list'
    )
    id: ID_aliased = Field(..., description='The Node ID of the UserList object')
    isPrivate: Boolean = Field(..., description='Whether or not this list is private')
    items: UserListItemsConnection = Field(
        ..., description='The items associated with this list'
    )
    lastAddedAt: DateTime = Field(
        ...,
        description='The date and time at which this list was created or last had items added to it',
    )
    name: String = Field(..., description='The name of this list')
    slug: String = Field(..., description='The slug of this list')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    user: User_aliased = Field(..., description='The user to which this list belongs')
    typename__: Optional[Literal['UserList']] = Field('UserList', alias='__typename')


class UserListConnection(BaseModel):
    """
    The connection type for UserList.
    """

    edges: Optional[List[Optional[UserListEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[UserList]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['UserListConnection']] = Field(
        'UserListConnection', alias='__typename'
    )


class UserListEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[UserList] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['UserListEdge']] = Field(
        'UserListEdge', alias='__typename'
    )


class UserListItemsConnection(BaseModel):
    """
    The connection type for UserListItems.
    """

    edges: Optional[List[Optional[UserListItemsEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[UserListItems]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['UserListItemsConnection']] = Field(
        'UserListItemsConnection', alias='__typename'
    )


class UserListItemsEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[UserListItems] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['UserListItemsEdge']] = Field(
        'UserListItemsEdge', alias='__typename'
    )


class UserListSuggestion(BaseModel):
    """
    Represents a suggested user list.
    """

    id: Optional[ID_aliased] = Field(
        None, description='The ID of the suggested user list'
    )
    name: Optional[String] = Field(
        None, description='The name of the suggested user list'
    )
    typename__: Optional[Literal['UserListSuggestion']] = Field(
        'UserListSuggestion', alias='__typename'
    )


class UserNamespaceRepository(Node):
    """
    A repository owned by an Enterprise Managed user.
    """

    id: ID_aliased = Field(
        ..., description='The Node ID of the UserNamespaceRepository object'
    )
    name: String = Field(..., description='The name of the repository.')
    nameWithOwner: String = Field(..., description="The repository's name with owner.")
    owner: RepositoryOwner = Field(..., description='The user owner of the repository.')
    typename__: Optional[Literal['UserNamespaceRepository']] = Field(
        'UserNamespaceRepository', alias='__typename'
    )


class UserNamespaceRepositoryConnection(BaseModel):
    """
    A list of repositories owned by users in an enterprise with Enterprise Managed Users.
    """

    edges: Optional[List[Optional[UserNamespaceRepositoryEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[UserNamespaceRepository]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['UserNamespaceRepositoryConnection']] = Field(
        'UserNamespaceRepositoryConnection', alias='__typename'
    )


class UserNamespaceRepositoryEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[UserNamespaceRepository] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['UserNamespaceRepositoryEdge']] = Field(
        'UserNamespaceRepositoryEdge', alias='__typename'
    )


class UserStatus(Node):
    """
    The user's description of what they're currently doing.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    emoji: Optional[String] = Field(
        None, description="An emoji summarizing the user's status."
    )
    emojiHTML: Optional[HTML] = Field(None, description='The status emoji as HTML.')
    expiresAt: Optional[DateTime] = Field(
        None, description='If set, the status will not be shown after this date.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the UserStatus object')
    indicatesLimitedAvailability: Boolean = Field(
        ...,
        description='Whether this status indicates the user is not fully available on GitHub.',
    )
    message: Optional[String] = Field(
        None, description='A brief message describing what the user is doing.'
    )
    organization: Optional[Organization_aliased] = Field(
        None,
        description='The organization whose members can see this status. If null, this status is publicly visible.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    user: User_aliased = Field(..., description='The user who has this status.')
    typename__: Optional[Literal['UserStatus']] = Field(
        'UserStatus', alias='__typename'
    )


class UserStatusConnection(BaseModel):
    """
    The connection type for UserStatus.
    """

    edges: Optional[List[Optional[UserStatusEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[UserStatus]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['UserStatusConnection']] = Field(
        'UserStatusConnection', alias='__typename'
    )


class UserStatusEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[UserStatus] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['UserStatusEdge']] = Field(
        'UserStatusEdge', alias='__typename'
    )


class VerifiableDomain(Node):
    """
    A domain that can be verified or approved for an organization or an enterprise.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    dnsHostName: Optional[URI] = Field(
        None, description='The DNS host name that should be used for verification.'
    )
    domain: URI = Field(..., description='The unicode encoded domain.')
    hasFoundHostName: Boolean = Field(
        ...,
        description='Whether a TXT record for verification with the expected host name was found.',
    )
    hasFoundVerificationToken: Boolean = Field(
        ...,
        description='Whether a TXT record for verification with the expected verification token was found.',
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the VerifiableDomain object'
    )
    isApproved: Boolean = Field(
        ..., description='Whether or not the domain is approved.'
    )
    isRequiredForPolicyEnforcement: Boolean = Field(
        ...,
        description='Whether this domain is required to exist for an organization or enterprise policy to be enforced.',
    )
    isVerified: Boolean = Field(
        ..., description='Whether or not the domain is verified.'
    )
    owner: VerifiableDomainOwner = Field(..., description='The owner of the domain.')
    punycodeEncodedDomain: URI = Field(..., description='The punycode encoded domain.')
    tokenExpirationTime: Optional[DateTime] = Field(
        None, description='The time that the current verification token will expire.'
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    verificationToken: Optional[String] = Field(
        None, description='The current verification token for the domain.'
    )
    typename__: Optional[Literal['VerifiableDomain']] = Field(
        'VerifiableDomain', alias='__typename'
    )


class VerifiableDomainConnection(BaseModel):
    """
    The connection type for VerifiableDomain.
    """

    edges: Optional[List[Optional[VerifiableDomainEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[VerifiableDomain]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['VerifiableDomainConnection']] = Field(
        'VerifiableDomainConnection', alias='__typename'
    )


class VerifiableDomainEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[VerifiableDomain] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['VerifiableDomainEdge']] = Field(
        'VerifiableDomainEdge', alias='__typename'
    )


class VerifyVerifiableDomainPayload(BaseModel):
    """
    Autogenerated return type of VerifyVerifiableDomain.
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    domain: Optional[VerifiableDomain] = Field(
        None, description='The verifiable domain that was verified.'
    )
    typename__: Optional[Literal['VerifyVerifiableDomainPayload']] = Field(
        'VerifyVerifiableDomainPayload', alias='__typename'
    )


class ViewerHovercardContext(HovercardContext):
    """
    A hovercard context with a message describing how the viewer is related.
    """

    message: String = Field(..., description='A string describing this context')
    octicon: String = Field(..., description='An octicon to accompany this context')
    viewer: User_aliased = Field(
        ..., description='Identifies the user who is related to this context.'
    )
    typename__: Optional[Literal['ViewerHovercardContext']] = Field(
        'ViewerHovercardContext', alias='__typename'
    )


class Workflow(Node, UniformResourceLocatable):
    """
    A workflow contains meta information about an Actions workflow file.
    """

    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the Workflow object')
    name: String = Field(..., description='The name of the workflow.')
    resourcePath: URI = Field(..., description='The HTTP path for this workflow')
    runs: WorkflowRunConnection = Field(..., description='The runs of the workflow.')
    state: WorkflowState = Field(..., description='The state of the workflow.')
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this workflow')
    typename__: Optional[Literal['Workflow']] = Field('Workflow', alias='__typename')


class WorkflowFileReference(BaseModel):
    """
    A workflow that must run for this rule to pass
    """

    path: String = Field(..., description='The path to the workflow file')
    ref: Optional[String] = Field(
        None, description='The ref (branch or tag) of the workflow file to use'
    )
    repositoryId: Int = Field(
        ..., description='The ID of the repository where the workflow is defined'
    )
    sha: Optional[String] = Field(
        None, description='The commit SHA of the workflow file to use'
    )
    typename__: Optional[Literal['WorkflowFileReference']] = Field(
        'WorkflowFileReference', alias='__typename'
    )


class WorkflowRun(Node, UniformResourceLocatable):
    """
    A workflow run.
    """

    checkSuite: CheckSuite = Field(
        ..., description='The check suite this workflow run belongs to.'
    )
    createdAt: DateTime = Field(
        ..., description='Identifies the date and time when the object was created.'
    )
    databaseId: Optional[Int] = Field(
        None, description='Identifies the primary key from the database.'
    )
    deploymentReviews: DeploymentReviewConnection = Field(
        ..., description='The log of deployment reviews'
    )
    event: String = Field(..., description='The event that triggered the workflow run')
    file: Optional[WorkflowRunFile] = Field(None, description='The workflow file')
    id: ID_aliased = Field(..., description='The Node ID of the WorkflowRun object')
    pendingDeploymentRequests: DeploymentRequestConnection = Field(
        ...,
        description='The pending deployment requests of all check runs in this workflow run',
    )
    resourcePath: URI = Field(..., description='The HTTP path for this workflow run')
    runNumber: Int = Field(
        ...,
        description='A number that uniquely identifies this workflow run in its parent workflow.',
    )
    updatedAt: DateTime = Field(
        ...,
        description='Identifies the date and time when the object was last updated.',
    )
    url: URI = Field(..., description='The HTTP URL for this workflow run')
    workflow: Workflow = Field(
        ..., description='The workflow executed in this workflow run.'
    )
    typename__: Optional[Literal['WorkflowRun']] = Field(
        'WorkflowRun', alias='__typename'
    )


class WorkflowRunConnection(BaseModel):
    """
    The connection type for WorkflowRun.
    """

    edges: Optional[List[Optional[WorkflowRunEdge]]] = Field(
        None, description='A list of edges.'
    )
    nodes: Optional[List[Optional[WorkflowRun]]] = Field(
        None, description='A list of nodes.'
    )
    pageInfo: PageInfo = Field(..., description='Information to aid in pagination.')
    totalCount: Int = Field(
        ..., description='Identifies the total count of items in the connection.'
    )
    typename__: Optional[Literal['WorkflowRunConnection']] = Field(
        'WorkflowRunConnection', alias='__typename'
    )


class WorkflowRunEdge(BaseModel):
    """
    An edge in a connection.
    """

    cursor: String = Field(..., description='A cursor for use in pagination.')
    node: Optional[WorkflowRun] = Field(
        None, description='The item at the end of the edge.'
    )
    typename__: Optional[Literal['WorkflowRunEdge']] = Field(
        'WorkflowRunEdge', alias='__typename'
    )


class WorkflowRunFile(Node, UniformResourceLocatable):
    """
    An executed workflow file for a workflow run.
    """

    id: ID_aliased = Field(..., description='The Node ID of the WorkflowRunFile object')
    path: String = Field(
        ..., description='The path of the workflow file relative to its repository.'
    )
    repositoryFileUrl: URI = Field(
        ...,
        description='The direct link to the file in the repository which stores the workflow file.',
    )
    repositoryName: URI = Field(
        ..., description='The repository name and owner which stores the workflow file.'
    )
    resourcePath: URI = Field(
        ..., description='The HTTP path for this workflow run file'
    )
    run: WorkflowRun = Field(
        ..., description='The parent workflow run execution for this file.'
    )
    url: URI = Field(..., description='The HTTP URL for this workflow run file')
    viewerCanPushRepository: Boolean = Field(
        ...,
        description='If the viewer has permissions to push to the repository which stores the workflow.',
    )
    viewerCanReadRepository: Boolean = Field(
        ...,
        description='If the viewer has permissions to read the repository which stores the workflow.',
    )
    typename__: Optional[Literal['WorkflowRunFile']] = Field(
        'WorkflowRunFile', alias='__typename'
    )


class WorkflowsParameters(BaseModel):
    """
    Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
    """

    doNotEnforceOnCreate: Boolean = Field(
        ...,
        description='Allow repositories and branches to be created if a check would otherwise prohibit it.',
    )
    workflows: List[WorkflowFileReference] = Field(
        ..., description='Workflows that must pass for this rule to pass.'
    )
    typename__: Optional[Literal['WorkflowsParameters']] = Field(
        'WorkflowsParameters', alias='__typename'
    )


class AbortQueuedMigrationsInput(BaseModel):
    """
    Autogenerated input type of AbortQueuedMigrations
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ownerId: ID_aliased = Field(
        ..., description='The ID of the organization that is running the migrations.'
    )
    typename__: Optional[Literal['AbortQueuedMigrationsInput']] = Field(
        'AbortQueuedMigrationsInput', alias='__typename'
    )


class AbortRepositoryMigrationInput(BaseModel):
    """
    Autogenerated input type of AbortRepositoryMigration
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    migrationId: ID_aliased = Field(
        ..., description='The ID of the migration to be aborted.'
    )
    typename__: Optional[Literal['AbortRepositoryMigrationInput']] = Field(
        'AbortRepositoryMigrationInput', alias='__typename'
    )


class AcceptEnterpriseAdministratorInvitationInput(BaseModel):
    """
    Autogenerated input type of AcceptEnterpriseAdministratorInvitation
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitationId: ID_aliased = Field(
        ..., description='The id of the invitation being accepted'
    )
    typename__: Optional[Literal['AcceptEnterpriseAdministratorInvitationInput']] = (
        Field('AcceptEnterpriseAdministratorInvitationInput', alias='__typename')
    )


class AcceptEnterpriseMemberInvitationInput(BaseModel):
    """
    Autogenerated input type of AcceptEnterpriseMemberInvitation
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitationId: ID_aliased = Field(
        ..., description='The id of the invitation being accepted'
    )
    typename__: Optional[Literal['AcceptEnterpriseMemberInvitationInput']] = Field(
        'AcceptEnterpriseMemberInvitationInput', alias='__typename'
    )


class AcceptTopicSuggestionInput(BaseModel):
    """
    Autogenerated input type of AcceptTopicSuggestion
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: Optional[String] = Field(
        None,
        description='The name of the suggested topic.\n\n**Upcoming Change on 2024-04-01 UTC**\n**Description:** `name` will be removed.\n**Reason:** Suggested topics are no longer supported',
    )
    repositoryId: Optional[ID_aliased] = Field(
        None,
        description='The Node ID of the repository.\n\n**Upcoming Change on 2024-04-01 UTC**\n**Description:** `repositoryId` will be removed.\n**Reason:** Suggested topics are no longer supported',
    )
    typename__: Optional[Literal['AcceptTopicSuggestionInput']] = Field(
        'AcceptTopicSuggestionInput', alias='__typename'
    )


class AccessUserNamespaceRepositoryInput(BaseModel):
    """
    Autogenerated input type of AccessUserNamespaceRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise owning the user namespace repository.',
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the user namespace repository to access.'
    )
    typename__: Optional[Literal['AccessUserNamespaceRepositoryInput']] = Field(
        'AccessUserNamespaceRepositoryInput', alias='__typename'
    )


class AddAssigneesToAssignableInput(BaseModel):
    """
    Autogenerated input type of AddAssigneesToAssignable
    """

    assignableId: ID_aliased = Field(
        ..., description='The id of the assignable object to add assignees to.'
    )
    assigneeIds: List[ID] = Field(
        ..., description='The id of users to add as assignees.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['AddAssigneesToAssignableInput']] = Field(
        'AddAssigneesToAssignableInput', alias='__typename'
    )


class AddCommentInput(BaseModel):
    """
    Autogenerated input type of AddComment
    """

    body: String = Field(..., description='The contents of the comment.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subjectId: ID_aliased = Field(
        ..., description='The Node ID of the subject to modify.'
    )
    typename__: Optional[Literal['AddCommentInput']] = Field(
        'AddCommentInput', alias='__typename'
    )


class AddDiscussionCommentInput(BaseModel):
    """
    Autogenerated input type of AddDiscussionComment
    """

    body: String = Field(..., description='The contents of the comment.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussionId: ID_aliased = Field(
        ..., description='The Node ID of the discussion to comment on.'
    )
    replyToId: Optional[ID_aliased] = Field(
        None,
        description='The Node ID of the discussion comment within this discussion to reply to.',
    )
    typename__: Optional[Literal['AddDiscussionCommentInput']] = Field(
        'AddDiscussionCommentInput', alias='__typename'
    )


class AddDiscussionPollVoteInput(BaseModel):
    """
    Autogenerated input type of AddDiscussionPollVote
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pollOptionId: ID_aliased = Field(
        ..., description='The Node ID of the discussion poll option to vote for.'
    )
    typename__: Optional[Literal['AddDiscussionPollVoteInput']] = Field(
        'AddDiscussionPollVoteInput', alias='__typename'
    )


class AddEnterpriseOrganizationMemberInput(BaseModel):
    """
    Autogenerated input type of AddEnterpriseOrganizationMember
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ..., description='The ID of the enterprise which owns the organization.'
    )
    organizationId: ID_aliased = Field(
        ..., description='The ID of the organization the users will be added to.'
    )
    role: Optional[OrganizationMemberRole] = Field(
        None, description='The role to assign the users in the organization'
    )
    userIds: List[ID] = Field(
        ..., description='The IDs of the enterprise members to add.'
    )
    typename__: Optional[Literal['AddEnterpriseOrganizationMemberInput']] = Field(
        'AddEnterpriseOrganizationMemberInput', alias='__typename'
    )


class AddEnterpriseSupportEntitlementInput(BaseModel):
    """
    Autogenerated input type of AddEnterpriseSupportEntitlement
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ..., description='The ID of the Enterprise which the admin belongs to.'
    )
    login: String = Field(
        ...,
        description='The login of a member who will receive the support entitlement.',
    )
    typename__: Optional[Literal['AddEnterpriseSupportEntitlementInput']] = Field(
        'AddEnterpriseSupportEntitlementInput', alias='__typename'
    )


class AddLabelsToLabelableInput(BaseModel):
    """
    Autogenerated input type of AddLabelsToLabelable
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    labelIds: List[ID] = Field(..., description='The ids of the labels to add.')
    labelableId: ID_aliased = Field(
        ..., description='The id of the labelable object to add labels to.'
    )
    typename__: Optional[Literal['AddLabelsToLabelableInput']] = Field(
        'AddLabelsToLabelableInput', alias='__typename'
    )


class AddProjectCardInput(BaseModel):
    """
    Autogenerated input type of AddProjectCard
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    contentId: Optional[ID_aliased] = Field(
        None,
        description='The content of the card. Must be a member of the ProjectCardItem union',
    )
    note: Optional[String] = Field(None, description='The note on the card.')
    projectColumnId: ID_aliased = Field(
        ..., description='The Node ID of the ProjectColumn.'
    )
    typename__: Optional[Literal['AddProjectCardInput']] = Field(
        'AddProjectCardInput', alias='__typename'
    )


class AddProjectColumnInput(BaseModel):
    """
    Autogenerated input type of AddProjectColumn
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: String = Field(..., description='The name of the column.')
    projectId: ID_aliased = Field(..., description='The Node ID of the project.')
    typename__: Optional[Literal['AddProjectColumnInput']] = Field(
        'AddProjectColumnInput', alias='__typename'
    )


class AddProjectV2DraftIssueInput(BaseModel):
    """
    Autogenerated input type of AddProjectV2DraftIssue
    """

    assigneeIds: Optional[List[ID]] = Field(
        None, description='The IDs of the assignees of the draft issue.'
    )
    body: Optional[String] = Field(None, description='The body of the draft issue.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to add the draft issue to.'
    )
    title: String = Field(
        ...,
        description='The title of the draft issue. A project item can also be created by providing\nthe URL of an Issue or Pull Request if you have access.',
    )
    typename__: Optional[Literal['AddProjectV2DraftIssueInput']] = Field(
        'AddProjectV2DraftIssueInput', alias='__typename'
    )


class AddProjectV2ItemByIdInput(BaseModel):
    """
    Autogenerated input type of AddProjectV2ItemById
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    contentId: ID_aliased = Field(
        ..., description='The id of the Issue or Pull Request to add.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to add the item to.'
    )
    typename__: Optional[Literal['AddProjectV2ItemByIdInput']] = Field(
        'AddProjectV2ItemByIdInput', alias='__typename'
    )


class AddPullRequestReviewCommentInput(BaseModel):
    """
    Autogenerated input type of AddPullRequestReviewComment
    """

    body: Optional[String] = Field(
        None,
        description='The text of the comment. This field is required\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n**Reason:** We are deprecating the addPullRequestReviewComment mutation',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    commitOID: Optional[GitObjectID] = Field(
        None,
        description='The SHA of the commit to comment on.\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n**Reason:** We are deprecating the addPullRequestReviewComment mutation',
    )
    inReplyTo: Optional[ID_aliased] = Field(
        None,
        description='The comment id to reply to.\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n**Reason:** We are deprecating the addPullRequestReviewComment mutation',
    )
    path: Optional[String] = Field(
        None,
        description='The relative path of the file to comment on.\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n**Reason:** We are deprecating the addPullRequestReviewComment mutation',
    )
    position: Optional[Int] = Field(
        None,
        description='The line index in the diff to comment on.\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n**Reason:** We are deprecating the addPullRequestReviewComment mutation',
    )
    pullRequestId: Optional[ID_aliased] = Field(
        None,
        description='The node ID of the pull request reviewing\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `pullRequestId` will be removed. use\naddPullRequestReviewThread or addPullRequestReviewThreadReply instead\n**Reason:** We are deprecating the addPullRequestReviewComment mutation',
    )
    pullRequestReviewId: Optional[ID_aliased] = Field(
        None,
        description='The Node ID of the review to modify.\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `pullRequestReviewId` will be removed. use\naddPullRequestReviewThread or addPullRequestReviewThreadReply instead\n**Reason:** We are deprecating the addPullRequestReviewComment mutation',
    )
    typename__: Optional[Literal['AddPullRequestReviewCommentInput']] = Field(
        'AddPullRequestReviewCommentInput', alias='__typename'
    )


class AddPullRequestReviewInput(BaseModel):
    """
    Autogenerated input type of AddPullRequestReview
    """

    body: Optional[String] = Field(
        None, description='The contents of the review body comment.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comments: Optional[List[Optional[DraftPullRequestReviewComment]]] = Field(
        None,
        description='The review line comments.\n\n**Upcoming Change on 2023-10-01 UTC**\n**Description:** `comments` will be removed. use the `threads` argument instead\n**Reason:** We are deprecating comment fields that use diff-relative positioning',
    )
    commitOID: Optional[GitObjectID] = Field(
        None, description='The commit OID the review pertains to.'
    )
    event: Optional[PullRequestReviewEvent] = Field(
        None, description='The event to perform on the pull request review.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='The Node ID of the pull request to modify.'
    )
    threads: Optional[List[Optional[DraftPullRequestReviewThread]]] = Field(
        None, description='The review line comment threads.'
    )
    typename__: Optional[Literal['AddPullRequestReviewInput']] = Field(
        'AddPullRequestReviewInput', alias='__typename'
    )


class AddPullRequestReviewThreadInput(BaseModel):
    """
    Autogenerated input type of AddPullRequestReviewThread
    """

    body: String = Field(..., description="Body of the thread's first comment.")
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    line: Optional[Int] = Field(
        None,
        description='The line of the blob to which the thread refers, required for line-level\nthreads. The end of the line range for multi-line comments.',
    )
    path: Optional[String] = Field(
        None, description='Path to the file being commented on.'
    )
    pullRequestId: Optional[ID_aliased] = Field(
        None, description='The node ID of the pull request reviewing'
    )
    pullRequestReviewId: Optional[ID_aliased] = Field(
        None, description='The Node ID of the review to modify.'
    )
    side: Optional[DiffSide] = Field(
        'RIGHT',
        description='The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.',
    )
    startLine: Optional[Int] = Field(
        None, description='The first line of the range to which the comment refers.'
    )
    startSide: Optional[DiffSide] = Field(
        'RIGHT', description='The side of the diff on which the start line resides.'
    )
    subjectType: Optional[PullRequestReviewThreadSubjectType] = Field(
        'LINE',
        description='The level at which the comments in the corresponding thread are targeted, can be a diff line or a file',
    )
    typename__: Optional[Literal['AddPullRequestReviewThreadInput']] = Field(
        'AddPullRequestReviewThreadInput', alias='__typename'
    )


class AddPullRequestReviewThreadReplyInput(BaseModel):
    """
    Autogenerated input type of AddPullRequestReviewThreadReply
    """

    body: String = Field(..., description='The text of the reply.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReviewId: Optional[ID_aliased] = Field(
        None,
        description='The Node ID of the pending review to which the reply will belong.',
    )
    pullRequestReviewThreadId: ID_aliased = Field(
        ...,
        description='The Node ID of the thread to which this reply is being written.',
    )
    typename__: Optional[Literal['AddPullRequestReviewThreadReplyInput']] = Field(
        'AddPullRequestReviewThreadReplyInput', alias='__typename'
    )


class AddReactionInput(BaseModel):
    """
    Autogenerated input type of AddReaction
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    content: ReactionContent = Field(
        ..., description='The name of the emoji to react with.'
    )
    subjectId: ID_aliased = Field(
        ..., description='The Node ID of the subject to modify.'
    )
    typename__: Optional[Literal['AddReactionInput']] = Field(
        'AddReactionInput', alias='__typename'
    )


class AddStarInput(BaseModel):
    """
    Autogenerated input type of AddStar
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    starrableId: ID_aliased = Field(..., description='The Starrable ID to star.')
    typename__: Optional[Literal['AddStarInput']] = Field(
        'AddStarInput', alias='__typename'
    )


class AddSubIssueInput(BaseModel):
    """
    Autogenerated input type of AddSubIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='The id of the issue.')
    replaceParent: Optional[Boolean] = Field(
        None, description='Option to replace parent issue if one already exists'
    )
    subIssueId: Optional[ID_aliased] = Field(
        None, description='The id of the sub-issue.'
    )
    subIssueUrl: Optional[String] = Field(None, description='The url of the sub-issue.')
    typename__: Optional[Literal['AddSubIssueInput']] = Field(
        'AddSubIssueInput', alias='__typename'
    )


class AddUpvoteInput(BaseModel):
    """
    Autogenerated input type of AddUpvote
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subjectId: ID_aliased = Field(
        ..., description='The Node ID of the discussion or comment to upvote.'
    )
    typename__: Optional[Literal['AddUpvoteInput']] = Field(
        'AddUpvoteInput', alias='__typename'
    )


class AddVerifiableDomainInput(BaseModel):
    """
    Autogenerated input type of AddVerifiableDomain
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    domain: URI = Field(..., description='The URL of the domain')
    ownerId: ID_aliased = Field(
        ..., description='The ID of the owner to add the domain to'
    )
    typename__: Optional[Literal['AddVerifiableDomainInput']] = Field(
        'AddVerifiableDomainInput', alias='__typename'
    )


class ApproveDeploymentsInput(BaseModel):
    """
    Autogenerated input type of ApproveDeployments
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comment: Optional[String] = Field(
        '', description='Optional comment for approving deployments'
    )
    environmentIds: List[ID] = Field(
        ..., description='The ids of environments to reject deployments'
    )
    workflowRunId: ID_aliased = Field(
        ...,
        description='The node ID of the workflow run containing the pending deployments.',
    )
    typename__: Optional[Literal['ApproveDeploymentsInput']] = Field(
        'ApproveDeploymentsInput', alias='__typename'
    )


class ApproveVerifiableDomainInput(BaseModel):
    """
    Autogenerated input type of ApproveVerifiableDomain
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The ID of the verifiable domain to approve.'
    )
    typename__: Optional[Literal['ApproveVerifiableDomainInput']] = Field(
        'ApproveVerifiableDomainInput', alias='__typename'
    )


class ArchiveProjectV2ItemInput(BaseModel):
    """
    Autogenerated input type of ArchiveProjectV2Item
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    itemId: ID_aliased = Field(
        ..., description='The ID of the ProjectV2Item to archive.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to archive the item from.'
    )
    typename__: Optional[Literal['ArchiveProjectV2ItemInput']] = Field(
        'ArchiveProjectV2ItemInput', alias='__typename'
    )


class ArchiveRepositoryInput(BaseModel):
    """
    Autogenerated input type of ArchiveRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to mark as archived.'
    )
    typename__: Optional[Literal['ArchiveRepositoryInput']] = Field(
        'ArchiveRepositoryInput', alias='__typename'
    )


class AuditLogOrder(BaseModel):
    """
    Ordering options for Audit Log connections.
    """

    direction: Optional[OrderDirection] = Field(
        None, description='The ordering direction.'
    )
    field: Optional[AuditLogOrderField] = Field(
        None, description='The field to order Audit Logs by.'
    )
    typename__: Optional[Literal['AuditLogOrder']] = Field(
        'AuditLogOrder', alias='__typename'
    )


class BranchNamePatternParametersInput(BaseModel):
    """
    Parameters to be used for the branch_name_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Optional[Boolean] = Field(
        None, description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['BranchNamePatternParametersInput']] = Field(
        'BranchNamePatternParametersInput', alias='__typename'
    )


class BulkSponsorship(BaseModel):
    """
    Information about a sponsorship to make for a user or organization with a GitHub
    Sponsors profile, as part of sponsoring many users or organizations at once.
    """

    amount: Int = Field(
        ...,
        description='The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.',
    )
    sponsorableId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.',
    )
    sponsorableLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.',
    )
    typename__: Optional[Literal['BulkSponsorship']] = Field(
        'BulkSponsorship', alias='__typename'
    )


class CancelEnterpriseAdminInvitationInput(BaseModel):
    """
    Autogenerated input type of CancelEnterpriseAdminInvitation
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitationId: ID_aliased = Field(
        ...,
        description='The Node ID of the pending enterprise administrator invitation.',
    )
    typename__: Optional[Literal['CancelEnterpriseAdminInvitationInput']] = Field(
        'CancelEnterpriseAdminInvitationInput', alias='__typename'
    )


class CancelEnterpriseMemberInvitationInput(BaseModel):
    """
    Autogenerated input type of CancelEnterpriseMemberInvitation
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    invitationId: ID_aliased = Field(
        ..., description='The Node ID of the pending enterprise member invitation.'
    )
    typename__: Optional[Literal['CancelEnterpriseMemberInvitationInput']] = Field(
        'CancelEnterpriseMemberInvitationInput', alias='__typename'
    )


class CancelSponsorshipInput(BaseModel):
    """
    Autogenerated input type of CancelSponsorship
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sponsorId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who is acting as the sponsor, paying for\nthe sponsorship. Required if sponsorLogin is not given.',
    )
    sponsorLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who is acting as the sponsor, paying\nfor the sponsorship. Required if sponsorId is not given.',
    )
    sponsorableId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.',
    )
    sponsorableLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.',
    )
    typename__: Optional[Literal['CancelSponsorshipInput']] = Field(
        'CancelSponsorshipInput', alias='__typename'
    )


class ChangeUserStatusInput(BaseModel):
    """
    Autogenerated input type of ChangeUserStatus
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    emoji: Optional[String] = Field(
        None,
        description='The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.',
    )
    expiresAt: Optional[DateTime] = Field(
        None, description='If set, the user status will not be shown after this date.'
    )
    limitedAvailability: Optional[Boolean] = Field(
        False,
        description='Whether this status should indicate you are not fully available on GitHub, e.g., you are away.',
    )
    message: Optional[String] = Field(
        None, description='A short description of your current status.'
    )
    organizationId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the organization whose members will be allowed to see the status. If\nomitted, the status will be publicly visible.',
    )
    typename__: Optional[Literal['ChangeUserStatusInput']] = Field(
        'ChangeUserStatusInput', alias='__typename'
    )


class CheckAnnotationData(BaseModel):
    """
    Information from a check run analysis to specific lines of code.
    """

    annotationLevel: CheckAnnotationLevel = Field(
        ..., description="Represents an annotation's information level"
    )
    location: CheckAnnotationRange = Field(
        ..., description='The location of the annotation'
    )
    message: String = Field(
        ..., description='A short description of the feedback for these lines of code.'
    )
    path: String = Field(
        ..., description='The path of the file to add an annotation to.'
    )
    rawDetails: Optional[String] = Field(
        None, description='Details about this annotation.'
    )
    title: Optional[String] = Field(
        None, description='The title that represents the annotation.'
    )
    typename__: Optional[Literal['CheckAnnotationData']] = Field(
        'CheckAnnotationData', alias='__typename'
    )


class CheckAnnotationRange(BaseModel):
    """
    Information from a check run analysis to specific lines of code.
    """

    endColumn: Optional[Int] = Field(
        None, description='The ending column of the range.'
    )
    endLine: Int = Field(..., description='The ending line of the range.')
    startColumn: Optional[Int] = Field(
        None, description='The starting column of the range.'
    )
    startLine: Int = Field(..., description='The starting line of the range.')
    typename__: Optional[Literal['CheckAnnotationRange']] = Field(
        'CheckAnnotationRange', alias='__typename'
    )


class CheckRunAction(BaseModel):
    """
    Possible further actions the integrator can perform.
    """

    description: String = Field(
        ..., description='A short explanation of what this action would do.'
    )
    identifier: String = Field(
        ..., description="A reference for the action on the integrator's system."
    )
    label: String = Field(
        ..., description='The text to be displayed on a button in the web UI.'
    )
    typename__: Optional[Literal['CheckRunAction']] = Field(
        'CheckRunAction', alias='__typename'
    )


class CheckRunFilter(BaseModel):
    """
    The filters that are available when fetching check runs.
    """

    appId: Optional[Int] = Field(
        None, description='Filters the check runs created by this application ID.'
    )
    checkName: Optional[String] = Field(
        None, description='Filters the check runs by this name.'
    )
    checkType: Optional[CheckRunType] = Field(
        None, description='Filters the check runs by this type.'
    )
    conclusions: Optional[List[CheckConclusionState]] = Field(
        None, description='Filters the check runs by these conclusions.'
    )
    status: Optional[CheckStatusState] = Field(
        None,
        description='Filters the check runs by this status. Superceded by statuses.',
    )
    statuses: Optional[List[CheckStatusState]] = Field(
        None, description='Filters the check runs by this status. Overrides status.'
    )
    typename__: Optional[Literal['CheckRunFilter']] = Field(
        'CheckRunFilter', alias='__typename'
    )


class CheckRunOutput(BaseModel):
    """
    Descriptive details about the check run.
    """

    annotations: Optional[List[CheckAnnotationData]] = Field(
        None, description='The annotations that are made as part of the check run.'
    )
    images: Optional[List[CheckRunOutputImage]] = Field(
        None,
        description='Images attached to the check run output displayed in the GitHub pull request UI.',
    )
    summary: String = Field(
        ..., description='The summary of the check run (supports Commonmark).'
    )
    text: Optional[String] = Field(
        None, description='The details of the check run (supports Commonmark).'
    )
    title: String = Field(..., description='A title to provide for this check run.')
    typename__: Optional[Literal['CheckRunOutput']] = Field(
        'CheckRunOutput', alias='__typename'
    )


class CheckRunOutputImage(BaseModel):
    """
    Images attached to the check run output displayed in the GitHub pull request UI.
    """

    alt: String = Field(..., description='The alternative text for the image.')
    caption: Optional[String] = Field(None, description='A short image description.')
    imageUrl: URI = Field(..., description='The full URL of the image.')
    typename__: Optional[Literal['CheckRunOutputImage']] = Field(
        'CheckRunOutputImage', alias='__typename'
    )


class CheckSuiteAutoTriggerPreference(BaseModel):
    """
    The auto-trigger preferences that are available for check suites.
    """

    appId: ID_aliased = Field(
        ..., description='The node ID of the application that owns the check suite.'
    )
    setting: Boolean = Field(
        ...,
        description='Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.',
    )
    typename__: Optional[Literal['CheckSuiteAutoTriggerPreference']] = Field(
        'CheckSuiteAutoTriggerPreference', alias='__typename'
    )


class CheckSuiteFilter(BaseModel):
    """
    The filters that are available when fetching check suites.
    """

    appId: Optional[Int] = Field(
        None, description='Filters the check suites created by this application ID.'
    )
    checkName: Optional[String] = Field(
        None, description='Filters the check suites by this name.'
    )
    typename__: Optional[Literal['CheckSuiteFilter']] = Field(
        'CheckSuiteFilter', alias='__typename'
    )


class ClearLabelsFromLabelableInput(BaseModel):
    """
    Autogenerated input type of ClearLabelsFromLabelable
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    labelableId: ID_aliased = Field(
        ..., description='The id of the labelable object to clear the labels from.'
    )
    typename__: Optional[Literal['ClearLabelsFromLabelableInput']] = Field(
        'ClearLabelsFromLabelableInput', alias='__typename'
    )


class ClearProjectV2ItemFieldValueInput(BaseModel):
    """
    Autogenerated input type of ClearProjectV2ItemFieldValue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    fieldId: ID_aliased = Field(..., description='The ID of the field to be cleared.')
    itemId: ID_aliased = Field(..., description='The ID of the item to be cleared.')
    projectId: ID_aliased = Field(..., description='The ID of the Project.')
    typename__: Optional[Literal['ClearProjectV2ItemFieldValueInput']] = Field(
        'ClearProjectV2ItemFieldValueInput', alias='__typename'
    )


class CloneProjectInput(BaseModel):
    """
    Autogenerated input type of CloneProject
    """

    body: Optional[String] = Field(None, description='The description of the project.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    includeWorkflows: Boolean = Field(
        ..., description="Whether or not to clone the source project's workflows."
    )
    name: String = Field(..., description='The name of the project.')
    public: Optional[Boolean] = Field(
        None, description='The visibility of the project, defaults to false (private).'
    )
    sourceId: ID_aliased = Field(..., description='The source project to clone.')
    targetOwnerId: ID_aliased = Field(
        ..., description='The owner ID to create the project under.'
    )
    typename__: Optional[Literal['CloneProjectInput']] = Field(
        'CloneProjectInput', alias='__typename'
    )


class CloneTemplateRepositoryInput(BaseModel):
    """
    Autogenerated input type of CloneTemplateRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: Optional[String] = Field(
        None, description='A short description of the new repository.'
    )
    includeAllBranches: Optional[Boolean] = Field(
        False,
        description='Whether to copy all branches from the template to the new repository. Defaults\nto copying only the default branch of the template.',
    )
    name: String = Field(..., description='The name of the new repository.')
    ownerId: ID_aliased = Field(
        ..., description='The ID of the owner for the new repository.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The Node ID of the template repository.'
    )
    visibility: RepositoryVisibility = Field(
        ..., description="Indicates the repository's visibility level."
    )
    typename__: Optional[Literal['CloneTemplateRepositoryInput']] = Field(
        'CloneTemplateRepositoryInput', alias='__typename'
    )


class CloseDiscussionInput(BaseModel):
    """
    Autogenerated input type of CloseDiscussion
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussionId: ID_aliased = Field(
        ..., description='ID of the discussion to be closed.'
    )
    reason: Optional[DiscussionCloseReason] = Field(
        'RESOLVED', description='The reason why the discussion is being closed.'
    )
    typename__: Optional[Literal['CloseDiscussionInput']] = Field(
        'CloseDiscussionInput', alias='__typename'
    )


class CloseIssueInput(BaseModel):
    """
    Autogenerated input type of CloseIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    duplicateIssueId: Optional[ID_aliased] = Field(
        None, description='ID of the issue that this is a duplicate of.'
    )
    issueId: ID_aliased = Field(..., description='ID of the issue to be closed.')
    stateReason: Optional[IssueClosedStateReason] = Field(
        None, description='The reason the issue is to be closed.'
    )
    typename__: Optional[Literal['CloseIssueInput']] = Field(
        'CloseIssueInput', alias='__typename'
    )


class ClosePullRequestInput(BaseModel):
    """
    Autogenerated input type of ClosePullRequest
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='ID of the pull request to be closed.'
    )
    typename__: Optional[Literal['ClosePullRequestInput']] = Field(
        'ClosePullRequestInput', alias='__typename'
    )


class CodeScanningParametersInput(BaseModel):
    """
    Choose which tools must provide code scanning results before the reference is
    updated. When configured, code scanning must be enabled and have results for
    both the commit and the reference being updated.
    """

    codeScanningTools: List[CodeScanningToolInput] = Field(
        ...,
        description='Tools that must provide code scanning results for this rule to pass.',
    )
    typename__: Optional[Literal['CodeScanningParametersInput']] = Field(
        'CodeScanningParametersInput', alias='__typename'
    )


class CodeScanningToolInput(BaseModel):
    """
    A tool that must provide code scanning results for this rule to pass.
    """

    alertsThreshold: String = Field(
        ...,
        description='The severity level at which code scanning results that raise alerts block a\nreference update. For more information on alert severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."',
    )
    securityAlertsThreshold: String = Field(
        ...,
        description='The severity level at which code scanning results that raise security alerts\nblock a reference update. For more information on security severity levels,\nsee "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."',
    )
    tool: String = Field(..., description='The name of a code scanning tool')
    typename__: Optional[Literal['CodeScanningToolInput']] = Field(
        'CodeScanningToolInput', alias='__typename'
    )


class CommitAuthor(BaseModel):
    """
    Specifies an author for filtering Git commits.
    """

    emails: Optional[List[String]] = Field(
        None,
        description='Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.',
    )
    id: Optional[ID_aliased] = Field(
        None,
        description='ID of a User to filter by. If non-null, only commits authored by this user\nwill be returned. This field takes precedence over emails.',
    )
    typename__: Optional[Literal['CommitAuthor']] = Field(
        'CommitAuthor', alias='__typename'
    )


class CommitAuthorEmailPatternParametersInput(BaseModel):
    """
    Parameters to be used for the commit_author_email_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Optional[Boolean] = Field(
        None, description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['CommitAuthorEmailPatternParametersInput']] = Field(
        'CommitAuthorEmailPatternParametersInput', alias='__typename'
    )


class CommitContributionOrder(BaseModel):
    """
    Ordering options for commit contribution connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: CommitContributionOrderField = Field(
        ..., description='The field by which to order commit contributions.'
    )
    typename__: Optional[Literal['CommitContributionOrder']] = Field(
        'CommitContributionOrder', alias='__typename'
    )


class CommitMessage(BaseModel):
    """
    A message to include with a new commit
    """

    body: Optional[String] = Field(None, description='The body of the message.')
    headline: String = Field(..., description='The headline of the message.')
    typename__: Optional[Literal['CommitMessage']] = Field(
        'CommitMessage', alias='__typename'
    )


class CommitMessagePatternParametersInput(BaseModel):
    """
    Parameters to be used for the commit_message_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Optional[Boolean] = Field(
        None, description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['CommitMessagePatternParametersInput']] = Field(
        'CommitMessagePatternParametersInput', alias='__typename'
    )


class CommittableBranch(BaseModel):
    """
    A git ref for a commit to be appended to.

    The ref must be a branch, i.e. its fully qualified name must start
    with `refs/heads/` (although the input is not required to be fully
    qualified).

    The Ref may be specified by its global node ID or by the
    `repositoryNameWithOwner` and `branchName`.

    ### Examples

    Specify a branch using a global node ID:

        { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

    Specify a branch using `repositoryNameWithOwner` and `branchName`:

        {
          "repositoryNameWithOwner": "github/graphql-client",
          "branchName": "main"
        }
    """

    branchName: Optional[String] = Field(
        None, description='The unqualified name of the branch to append the commit to.'
    )
    id: Optional[ID_aliased] = Field(
        None, description='The Node ID of the Ref to be updated.'
    )
    repositoryNameWithOwner: Optional[String] = Field(
        None, description='The nameWithOwner of the repository to commit to.'
    )
    typename__: Optional[Literal['CommittableBranch']] = Field(
        'CommittableBranch', alias='__typename'
    )


class CommitterEmailPatternParametersInput(BaseModel):
    """
    Parameters to be used for the committer_email_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Optional[Boolean] = Field(
        None, description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['CommitterEmailPatternParametersInput']] = Field(
        'CommitterEmailPatternParametersInput', alias='__typename'
    )


class ContributionOrder(BaseModel):
    """
    Ordering options for contribution connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    typename__: Optional[Literal['ContributionOrder']] = Field(
        'ContributionOrder', alias='__typename'
    )


class ConvertProjectCardNoteToIssueInput(BaseModel):
    """
    Autogenerated input type of ConvertProjectCardNoteToIssue
    """

    body: Optional[String] = Field(
        None, description='The body of the newly created issue.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectCardId: ID_aliased = Field(..., description='The ProjectCard ID to convert.')
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to create the issue in.'
    )
    title: Optional[String] = Field(
        None,
        description="The title of the newly created issue. Defaults to the card's note text.",
    )
    typename__: Optional[Literal['ConvertProjectCardNoteToIssueInput']] = Field(
        'ConvertProjectCardNoteToIssueInput', alias='__typename'
    )


class ConvertProjectV2DraftIssueItemToIssueInput(BaseModel):
    """
    Autogenerated input type of ConvertProjectV2DraftIssueItemToIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    itemId: ID_aliased = Field(
        ..., description='The ID of the draft issue ProjectV2Item to convert.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to create the issue in.'
    )
    typename__: Optional[Literal['ConvertProjectV2DraftIssueItemToIssueInput']] = Field(
        'ConvertProjectV2DraftIssueItemToIssueInput', alias='__typename'
    )


class ConvertPullRequestToDraftInput(BaseModel):
    """
    Autogenerated input type of ConvertPullRequestToDraft
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='ID of the pull request to convert to draft'
    )
    typename__: Optional[Literal['ConvertPullRequestToDraftInput']] = Field(
        'ConvertPullRequestToDraftInput', alias='__typename'
    )


class CopyProjectV2Input(BaseModel):
    """
    Autogenerated input type of CopyProjectV2
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    includeDraftIssues: Optional[Boolean] = Field(
        False, description='Include draft issues in the new project'
    )
    ownerId: ID_aliased = Field(..., description='The owner ID of the new project.')
    projectId: ID_aliased = Field(
        ..., description='The ID of the source Project to copy.'
    )
    title: String = Field(..., description='The title of the project.')
    typename__: Optional[Literal['CopyProjectV2Input']] = Field(
        'CopyProjectV2Input', alias='__typename'
    )


class CreateAttributionInvitationInput(BaseModel):
    """
    Autogenerated input type of CreateAttributionInvitation
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ownerId: ID_aliased = Field(
        ..., description='The Node ID of the owner scoping the reattributable data.'
    )
    sourceId: ID_aliased = Field(
        ..., description='The Node ID of the account owning the data to reattribute.'
    )
    targetId: ID_aliased = Field(
        ..., description='The Node ID of the account which may claim the data.'
    )
    typename__: Optional[Literal['CreateAttributionInvitationInput']] = Field(
        'CreateAttributionInvitationInput', alias='__typename'
    )


class CreateBranchProtectionRuleInput(BaseModel):
    """
    Autogenerated input type of CreateBranchProtectionRule
    """

    allowsDeletions: Optional[Boolean] = Field(
        None, description='Can this branch be deleted.'
    )
    allowsForcePushes: Optional[Boolean] = Field(
        None, description='Are force pushes allowed on this branch.'
    )
    blocksCreations: Optional[Boolean] = Field(
        None, description='Is branch creation a protected operation.'
    )
    bypassForcePushActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.',
    )
    bypassPullRequestActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    dismissesStaleReviews: Optional[Boolean] = Field(
        None,
        description='Will new commits pushed to matching branches dismiss pull request review approvals.',
    )
    isAdminEnforced: Optional[Boolean] = Field(
        None, description='Can admins override branch protection.'
    )
    lockAllowsFetchAndMerge: Optional[Boolean] = Field(
        None,
        description='Whether users can pull changes from upstream when the branch is locked. Set to\n`true` to allow fork syncing. Set to `false` to prevent fork syncing.',
    )
    lockBranch: Optional[Boolean] = Field(
        None,
        description='Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.',
    )
    pattern: String = Field(
        ..., description='The glob-like pattern used to determine matching branches.'
    )
    pushActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to push to matching branches.',
    )
    repositoryId: ID_aliased = Field(
        ...,
        description='The global relay id of the repository in which a new branch protection rule should be created in.',
    )
    requireLastPushApproval: Optional[Boolean] = Field(
        None,
        description='Whether the most recent push must be approved by someone other than the person who pushed it',
    )
    requiredApprovingReviewCount: Optional[Int] = Field(
        None,
        description='Number of approving reviews required to update matching branches.',
    )
    requiredDeploymentEnvironments: Optional[List[String]] = Field(
        None, description='The list of required deployment environments'
    )
    requiredStatusCheckContexts: Optional[List[String]] = Field(
        None,
        description='List of required status check contexts that must pass for commits to be accepted to matching branches.',
    )
    requiredStatusChecks: Optional[List[RequiredStatusCheckInput]] = Field(
        None, description='The list of required status checks'
    )
    requiresApprovingReviews: Optional[Boolean] = Field(
        None, description='Are approving reviews required to update matching branches.'
    )
    requiresCodeOwnerReviews: Optional[Boolean] = Field(
        None,
        description='Are reviews from code owners required to update matching branches.',
    )
    requiresCommitSignatures: Optional[Boolean] = Field(
        None, description='Are commits required to be signed.'
    )
    requiresConversationResolution: Optional[Boolean] = Field(
        None, description='Are conversations required to be resolved before merging.'
    )
    requiresDeployments: Optional[Boolean] = Field(
        None, description='Are successful deployments required before merging.'
    )
    requiresLinearHistory: Optional[Boolean] = Field(
        None,
        description='Are merge commits prohibited from being pushed to this branch.',
    )
    requiresStatusChecks: Optional[Boolean] = Field(
        None, description='Are status checks required to update matching branches.'
    )
    requiresStrictStatusChecks: Optional[Boolean] = Field(
        None, description='Are branches required to be up to date before merging.'
    )
    restrictsPushes: Optional[Boolean] = Field(
        None, description='Is pushing to matching branches restricted.'
    )
    restrictsReviewDismissals: Optional[Boolean] = Field(
        None, description='Is dismissal of pull request reviews restricted.'
    )
    reviewDismissalActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.',
    )
    typename__: Optional[Literal['CreateBranchProtectionRuleInput']] = Field(
        'CreateBranchProtectionRuleInput', alias='__typename'
    )


class CreateCheckRunInput(BaseModel):
    """
    Autogenerated input type of CreateCheckRun
    """

    actions: Optional[List[CheckRunAction]] = Field(
        None,
        description='Possible further actions the integrator can perform, which a user may trigger.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    completedAt: Optional[DateTime] = Field(
        None, description='The time that the check run finished.'
    )
    conclusion: Optional[CheckConclusionState] = Field(
        None, description='The final conclusion of the check.'
    )
    detailsUrl: Optional[URI] = Field(
        None,
        description="The URL of the integrator's site that has the full details of the check.",
    )
    externalId: Optional[String] = Field(
        None, description="A reference for the run on the integrator's system."
    )
    headSha: GitObjectID = Field(..., description='The SHA of the head commit.')
    name: String = Field(..., description='The name of the check.')
    output: Optional[CheckRunOutput] = Field(
        None, description='Descriptive details about the run.'
    )
    repositoryId: ID_aliased = Field(..., description='The node ID of the repository.')
    startedAt: Optional[DateTime] = Field(
        None, description='The time that the check run began.'
    )
    status: Optional[RequestableCheckStatusState] = Field(
        None, description='The current status.'
    )
    typename__: Optional[Literal['CreateCheckRunInput']] = Field(
        'CreateCheckRunInput', alias='__typename'
    )


class CreateCheckSuiteInput(BaseModel):
    """
    Autogenerated input type of CreateCheckSuite
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    headSha: GitObjectID = Field(..., description='The SHA of the head commit.')
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    typename__: Optional[Literal['CreateCheckSuiteInput']] = Field(
        'CreateCheckSuiteInput', alias='__typename'
    )


class CreateCommitOnBranchInput(BaseModel):
    """
    Autogenerated input type of CreateCommitOnBranch
    """

    branch: CommittableBranch = Field(
        ..., description='The Ref to be updated.  Must be a branch.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    expectedHeadOid: GitObjectID = Field(
        ...,
        description='The git commit oid expected at the head of the branch prior to the commit',
    )
    fileChanges: Optional[FileChanges] = Field(
        None, description='A description of changes to files in this commit.'
    )
    message: CommitMessage = Field(
        ..., description='The commit message the be included with the commit.'
    )
    typename__: Optional[Literal['CreateCommitOnBranchInput']] = Field(
        'CreateCommitOnBranchInput', alias='__typename'
    )


class CreateDeploymentInput(BaseModel):
    """
    Autogenerated input type of CreateDeployment
    """

    autoMerge: Optional[Boolean] = Field(
        True,
        description='Attempt to automatically merge the default branch into the requested ref, defaults to true.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: Optional[String] = Field(
        '', description='Short description of the deployment.'
    )
    environment: Optional[String] = Field(
        'production', description='Name for the target deployment environment.'
    )
    payload: Optional[String] = Field(
        '{}', description='JSON payload with extra information about the deployment.'
    )
    refId: ID_aliased = Field(..., description='The node ID of the ref to be deployed.')
    repositoryId: ID_aliased = Field(..., description='The node ID of the repository.')
    requiredContexts: Optional[List[String]] = Field(
        None,
        description='The status contexts to verify against commit status checks. To bypass required\ncontexts, pass an empty array. Defaults to all unique contexts.',
    )
    task: Optional[String] = Field('deploy', description='Specifies a task to execute.')
    typename__: Optional[Literal['CreateDeploymentInput']] = Field(
        'CreateDeploymentInput', alias='__typename'
    )


class CreateDeploymentStatusInput(BaseModel):
    """
    Autogenerated input type of CreateDeploymentStatus
    """

    autoInactive: Optional[Boolean] = Field(
        True,
        description="Adds a new inactive status to all non-transient, non-production environment\ndeployments with the same repository and environment name as the created\nstatus's deployment.",
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    deploymentId: ID_aliased = Field(..., description='The node ID of the deployment.')
    description: Optional[String] = Field(
        '',
        description='A short description of the status. Maximum length of 140 characters.',
    )
    environment: Optional[String] = Field(
        None,
        description='If provided, updates the environment of the deploy. Otherwise, does not modify the environment.',
    )
    environmentUrl: Optional[String] = Field(
        '', description='Sets the URL for accessing your environment.'
    )
    logUrl: Optional[String] = Field(
        '',
        description='The log URL to associate with this status.       This URL should contain\noutput to keep the user updated while the task is running       or serve as\nhistorical information for what happened in the deployment.',
    )
    state: DeploymentStatusState = Field(
        ..., description='The state of the deployment.'
    )
    typename__: Optional[Literal['CreateDeploymentStatusInput']] = Field(
        'CreateDeploymentStatusInput', alias='__typename'
    )


class CreateDiscussionInput(BaseModel):
    """
    Autogenerated input type of CreateDiscussion
    """

    body: String = Field(..., description='The body of the discussion.')
    categoryId: ID_aliased = Field(
        ...,
        description='The id of the discussion category to associate with this discussion.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The id of the repository on which to create the discussion.'
    )
    title: String = Field(..., description='The title of the discussion.')
    typename__: Optional[Literal['CreateDiscussionInput']] = Field(
        'CreateDiscussionInput', alias='__typename'
    )


class CreateEnterpriseOrganizationInput(BaseModel):
    """
    Autogenerated input type of CreateEnterpriseOrganization
    """

    adminLogins: List[String] = Field(
        ..., description='The logins for the administrators of the new organization.'
    )
    billingEmail: String = Field(
        ..., description='The email used for sending billing receipts.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ..., description='The ID of the enterprise owning the new organization.'
    )
    login: String = Field(..., description='The login of the new organization.')
    profileName: String = Field(
        ..., description='The profile name of the new organization.'
    )
    typename__: Optional[Literal['CreateEnterpriseOrganizationInput']] = Field(
        'CreateEnterpriseOrganizationInput', alias='__typename'
    )


class CreateEnvironmentInput(BaseModel):
    """
    Autogenerated input type of CreateEnvironment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: String = Field(..., description='The name of the environment.')
    repositoryId: ID_aliased = Field(..., description='The node ID of the repository.')
    typename__: Optional[Literal['CreateEnvironmentInput']] = Field(
        'CreateEnvironmentInput', alias='__typename'
    )


class CreateIpAllowListEntryInput(BaseModel):
    """
    Autogenerated input type of CreateIpAllowListEntry
    """

    allowListValue: String = Field(
        ..., description='An IP address or range of addresses in CIDR notation.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    isActive: Boolean = Field(
        ...,
        description='Whether the IP allow list entry is active when an IP allow list is enabled.',
    )
    name: Optional[String] = Field(
        None, description='An optional name for the IP allow list entry.'
    )
    ownerId: ID_aliased = Field(
        ...,
        description='The ID of the owner for which to create the new IP allow list entry.',
    )
    typename__: Optional[Literal['CreateIpAllowListEntryInput']] = Field(
        'CreateIpAllowListEntryInput', alias='__typename'
    )


class CreateIssueInput(BaseModel):
    """
    Autogenerated input type of CreateIssue
    """

    assigneeIds: Optional[List[ID]] = Field(
        None, description='The Node ID of assignees for this issue.'
    )
    body: Optional[String] = Field(
        None, description='The body for the issue description.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueTemplate: Optional[String] = Field(
        None,
        description='The name of an issue template in the repository, assigns labels and assignees from the template to the issue',
    )
    issueTypeId: Optional[ID_aliased] = Field(
        None, description='The Node ID of the issue type for this issue'
    )
    labelIds: Optional[List[ID]] = Field(
        None, description='An array of Node IDs of labels for this issue.'
    )
    milestoneId: Optional[ID_aliased] = Field(
        None, description='The Node ID of the milestone for this issue.'
    )
    parentIssueId: Optional[ID_aliased] = Field(
        None, description='The Node ID of the parent issue to add this new issue to'
    )
    projectIds: Optional[List[ID]] = Field(
        None,
        description='An array of Node IDs for projects associated with this issue.',
    )
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    title: String = Field(..., description='The title for the issue.')
    typename__: Optional[Literal['CreateIssueInput']] = Field(
        'CreateIssueInput', alias='__typename'
    )


class CreateIssueTypeInput(BaseModel):
    """
    Autogenerated input type of CreateIssueType
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    color: Optional[IssueTypeColor] = Field(
        None, description='Color for the issue type'
    )
    description: Optional[String] = Field(
        None, description='Description of the new issue type'
    )
    isEnabled: Boolean = Field(
        ..., description='Whether or not the issue type is enabled on the org level'
    )
    name: String = Field(..., description='Name of the new issue type')
    ownerId: ID_aliased = Field(
        ...,
        description='The ID for the organization on which the issue type is created',
    )
    typename__: Optional[Literal['CreateIssueTypeInput']] = Field(
        'CreateIssueTypeInput', alias='__typename'
    )


class CreateLabelInput(BaseModel):
    """
    Autogenerated input type of CreateLabel
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    color: String = Field(
        ...,
        description='A 6 character hex code, without the leading #, identifying the color of the label.',
    )
    description: Optional[String] = Field(
        None, description='A brief description of the label, such as its purpose.'
    )
    name: String = Field(..., description='The name of the label.')
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    typename__: Optional[Literal['CreateLabelInput']] = Field(
        'CreateLabelInput', alias='__typename'
    )


class CreateLinkedBranchInput(BaseModel):
    """
    Autogenerated input type of CreateLinkedBranch
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='ID of the issue to link to.')
    name: Optional[String] = Field(
        None,
        description='The name of the new branch. Defaults to issue number and title.',
    )
    oid: GitObjectID = Field(
        ..., description='The commit SHA to base the new branch on.'
    )
    repositoryId: Optional[ID_aliased] = Field(
        None,
        description='ID of the repository to create the branch in. Defaults to the issue repository.',
    )
    typename__: Optional[Literal['CreateLinkedBranchInput']] = Field(
        'CreateLinkedBranchInput', alias='__typename'
    )


class CreateMigrationSourceInput(BaseModel):
    """
    Autogenerated input type of CreateMigrationSource
    """

    accessToken: Optional[String] = Field(
        None, description='The migration source access token.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    githubPat: Optional[String] = Field(
        None,
        description='The GitHub personal access token of the user importing to the target repository.',
    )
    name: String = Field(..., description='The migration source name.')
    ownerId: ID_aliased = Field(
        ...,
        description='The ID of the organization that will own the migration source.',
    )
    type: MigrationSourceType = Field(..., description='The migration source type.')
    url: Optional[String] = Field(
        None,
        description='The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.',
    )
    typename__: Optional[Literal['CreateMigrationSourceInput']] = Field(
        'CreateMigrationSourceInput', alias='__typename'
    )


class CreateProjectInput(BaseModel):
    """
    Autogenerated input type of CreateProject
    """

    body: Optional[String] = Field(None, description='The description of project.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: String = Field(..., description='The name of project.')
    ownerId: ID_aliased = Field(
        ..., description='The owner ID to create the project under.'
    )
    repositoryIds: Optional[List[ID]] = Field(
        None,
        description='A list of repository IDs to create as linked repositories for the project',
    )
    template: Optional[ProjectTemplate] = Field(
        None, description='The name of the GitHub-provided template.'
    )
    typename__: Optional[Literal['CreateProjectInput']] = Field(
        'CreateProjectInput', alias='__typename'
    )


class CreateProjectV2FieldInput(BaseModel):
    """
    Autogenerated input type of CreateProjectV2Field
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    dataType: ProjectV2CustomFieldType = Field(
        ..., description='The data type of the field.'
    )
    iterationConfiguration: Optional[ProjectV2IterationFieldConfigurationInput] = Field(
        None, description='Configuration for an iteration field.'
    )
    name: String = Field(..., description='The name of the field.')
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to create the field in.'
    )
    singleSelectOptions: Optional[List[ProjectV2SingleSelectFieldOptionInput]] = Field(
        None,
        description='Options for a single select field. At least one value is required if data_type is SINGLE_SELECT',
    )
    typename__: Optional[Literal['CreateProjectV2FieldInput']] = Field(
        'CreateProjectV2FieldInput', alias='__typename'
    )


class CreateProjectV2Input(BaseModel):
    """
    Autogenerated input type of CreateProjectV2
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ownerId: ID_aliased = Field(
        ..., description='The owner ID to create the project under.'
    )
    repositoryId: Optional[ID_aliased] = Field(
        None, description='The repository to link the project to.'
    )
    teamId: Optional[ID_aliased] = Field(
        None,
        description='The team to link the project to. The team will be granted read permissions.',
    )
    title: String = Field(..., description='The title of the project.')
    typename__: Optional[Literal['CreateProjectV2Input']] = Field(
        'CreateProjectV2Input', alias='__typename'
    )


class CreateProjectV2StatusUpdateInput(BaseModel):
    """
    Autogenerated input type of CreateProjectV2StatusUpdate
    """

    body: Optional[String] = Field(None, description='The body of the status update.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to create the status update in.'
    )
    startDate: Optional[Date] = Field(
        None, description='The start date of the status update.'
    )
    status: Optional[ProjectV2StatusUpdateStatus] = Field(
        None, description='The status of the status update.'
    )
    targetDate: Optional[Date] = Field(
        None, description='The target date of the status update.'
    )
    typename__: Optional[Literal['CreateProjectV2StatusUpdateInput']] = Field(
        'CreateProjectV2StatusUpdateInput', alias='__typename'
    )


class CreatePullRequestInput(BaseModel):
    """
    Autogenerated input type of CreatePullRequest
    """

    baseRefName: String = Field(
        ...,
        description='The name of the branch you want your changes pulled into. This should be an existing branch\non the current repository. You cannot update the base branch on a pull request to point\nto another repository.',
    )
    body: Optional[String] = Field(
        None, description='The contents of the pull request.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    draft: Optional[Boolean] = Field(
        False, description='Indicates whether this pull request should be a draft.'
    )
    headRefName: String = Field(
        ...,
        description='The name of the branch where your changes are implemented. For cross-repository pull requests\nin the same network, namespace `head_ref_name` with a user like this: `username:branch`.',
    )
    headRepositoryId: Optional[ID_aliased] = Field(
        None, description='The Node ID of the head repository.'
    )
    maintainerCanModify: Optional[Boolean] = Field(
        True, description='Indicates whether maintainers can modify the pull request.'
    )
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    title: String = Field(..., description='The title of the pull request.')
    typename__: Optional[Literal['CreatePullRequestInput']] = Field(
        'CreatePullRequestInput', alias='__typename'
    )


class CreateRefInput(BaseModel):
    """
    Autogenerated input type of CreateRef
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: String = Field(
        ...,
        description='The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).',
    )
    oid: GitObjectID = Field(
        ...,
        description='The GitObjectID that the new Ref shall target. Must point to a commit.',
    )
    repositoryId: ID_aliased = Field(
        ..., description='The Node ID of the Repository to create the Ref in.'
    )
    typename__: Optional[Literal['CreateRefInput']] = Field(
        'CreateRefInput', alias='__typename'
    )


class CreateRepositoryInput(BaseModel):
    """
    Autogenerated input type of CreateRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: Optional[String] = Field(
        None, description='A short description of the new repository.'
    )
    hasIssuesEnabled: Optional[Boolean] = Field(
        True,
        description='Indicates if the repository should have the issues feature enabled.',
    )
    hasWikiEnabled: Optional[Boolean] = Field(
        False,
        description='Indicates if the repository should have the wiki feature enabled.',
    )
    homepageUrl: Optional[URI] = Field(
        None, description='The URL for a web page about this repository.'
    )
    name: String = Field(..., description='The name of the new repository.')
    ownerId: Optional[ID_aliased] = Field(
        None, description='The ID of the owner for the new repository.'
    )
    teamId: Optional[ID_aliased] = Field(
        None,
        description='When an organization is specified as the owner, this ID identifies the team\nthat should be granted access to the new repository.',
    )
    template: Optional[Boolean] = Field(
        False,
        description='Whether this repository should be marked as a template such that anyone who\ncan access it can create new repositories with the same files and directory structure.',
    )
    visibility: RepositoryVisibility = Field(
        ..., description="Indicates the repository's visibility level."
    )
    typename__: Optional[Literal['CreateRepositoryInput']] = Field(
        'CreateRepositoryInput', alias='__typename'
    )


class CreateRepositoryRulesetInput(BaseModel):
    """
    Autogenerated input type of CreateRepositoryRuleset
    """

    bypassActors: Optional[List[RepositoryRulesetBypassActorInput]] = Field(
        None,
        description='A list of actors that are allowed to bypass rules in this ruleset.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    conditions: RepositoryRuleConditionsInput = Field(
        ..., description='The set of conditions for this ruleset'
    )
    enforcement: RuleEnforcement = Field(
        ..., description='The enforcement level for this ruleset'
    )
    name: String = Field(..., description='The name of the ruleset.')
    rules: Optional[List[RepositoryRuleInput]] = Field(
        None, description='The list of rules for this ruleset'
    )
    sourceId: ID_aliased = Field(
        ...,
        description='The global relay id of the source in which a new ruleset should be created in.',
    )
    target: Optional[RepositoryRulesetTarget] = Field(
        None, description='The target of the ruleset.'
    )
    typename__: Optional[Literal['CreateRepositoryRulesetInput']] = Field(
        'CreateRepositoryRulesetInput', alias='__typename'
    )


class CreateSponsorsListingInput(BaseModel):
    """
    Autogenerated input type of CreateSponsorsListing
    """

    billingCountryOrRegionCode: Optional[SponsorsCountryOrRegionCode] = Field(
        None,
        description="The country or region where the sponsorable's bank account is located.\nRequired if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.",
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    contactEmail: Optional[String] = Field(
        None,
        description='The email address we should use to contact you about the GitHub Sponsors\nprofile being created. This will not be shared publicly. Must be a verified\nemail address already on your GitHub account. Only relevant when the\nsponsorable is yourself. Defaults to your primary email address on file if omitted.',
    )
    fiscalHostLogin: Optional[String] = Field(
        None,
        description="The username of the supported fiscal host's GitHub organization, if you want\nto receive sponsorship payouts through a fiscal host rather than directly to a\nbank account. For example, 'Open-Source-Collective' for Open Source Collective\nor 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts\nfor more information.",
    )
    fiscallyHostedProjectProfileUrl: Optional[String] = Field(
        None,
        description="The URL for your profile page on the fiscal host's website, e.g.,\nhttps://opencollective.com/babel or https://numfocus.org/project/bokeh.\nRequired if fiscalHostLogin is specified.",
    )
    fullDescription: Optional[String] = Field(
        None,
        description="Provide an introduction to serve as the main focus that appears on your GitHub\nSponsors profile. It's a great opportunity to help potential sponsors learn\nmore about you, your work, and why their sponsorship is important to you.\nGitHub-flavored Markdown is supported.",
    )
    residenceCountryOrRegionCode: Optional[SponsorsCountryOrRegionCode] = Field(
        None,
        description='The country or region where the sponsorable resides. This is for tax purposes.\nRequired if the sponsorable is yourself, ignored when sponsorableLogin\nspecifies an organization.',
    )
    sponsorableLogin: Optional[String] = Field(
        None,
        description='The username of the organization to create a GitHub Sponsors profile for, if\ndesired. Defaults to creating a GitHub Sponsors profile for the authenticated\nuser if omitted.',
    )
    typename__: Optional[Literal['CreateSponsorsListingInput']] = Field(
        'CreateSponsorsListingInput', alias='__typename'
    )


class CreateSponsorsTierInput(BaseModel):
    """
    Autogenerated input type of CreateSponsorsTier
    """

    amount: Int = Field(
        ...,
        description='The value of the new tier in US dollars. Valid values: 1-12000.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: String = Field(
        ...,
        description='A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.',
    )
    isRecurring: Optional[Boolean] = Field(
        True,
        description='Whether sponsorships using this tier should happen monthly/yearly or just once.',
    )
    publish: Optional[Boolean] = Field(
        False,
        description='Whether to make the tier available immediately for sponsors to choose.\nDefaults to creating a draft tier that will not be publicly visible.',
    )
    repositoryId: Optional[ID_aliased] = Field(
        None,
        description='Optional ID of the private repository that sponsors at this tier should gain\nread-only access to. Must be owned by an organization.',
    )
    repositoryName: Optional[String] = Field(
        None,
        description='Optional name of the private repository that sponsors at this tier should gain\nread-only access to. Must be owned by an organization. Necessary if\nrepositoryOwnerLogin is given. Will be ignored if repositoryId is given.',
    )
    repositoryOwnerLogin: Optional[String] = Field(
        None,
        description='Optional login of the organization owner of the private repository that\nsponsors at this tier should gain read-only access to. Necessary if\nrepositoryName is given. Will be ignored if repositoryId is given.',
    )
    sponsorableId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who owns the GitHub Sponsors profile.\nDefaults to the current user if omitted and sponsorableLogin is not given.',
    )
    sponsorableLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who owns the GitHub Sponsors profile.\nDefaults to the current user if omitted and sponsorableId is not given.',
    )
    welcomeMessage: Optional[String] = Field(
        None, description='Optional message new sponsors at this tier will receive.'
    )
    typename__: Optional[Literal['CreateSponsorsTierInput']] = Field(
        'CreateSponsorsTierInput', alias='__typename'
    )


class CreateSponsorshipInput(BaseModel):
    """
    Autogenerated input type of CreateSponsorship
    """

    amount: Optional[Int] = Field(
        None,
        description='The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    isRecurring: Optional[Boolean] = Field(
        None,
        description='Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.',
    )
    privacyLevel: Optional[SponsorshipPrivacy] = Field(
        'PUBLIC',
        description='Specify whether others should be able to see that the sponsor is sponsoring\nthe sponsorable. Public visibility still does not reveal which tier is used.',
    )
    receiveEmails: Optional[Boolean] = Field(
        True,
        description='Whether the sponsor should receive email updates from the sponsorable.',
    )
    sponsorId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who is acting as the sponsor, paying for\nthe sponsorship. Required if sponsorLogin is not given.',
    )
    sponsorLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who is acting as the sponsor, paying\nfor the sponsorship. Required if sponsorId is not given.',
    )
    sponsorableId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.',
    )
    sponsorableLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.',
    )
    tierId: Optional[ID_aliased] = Field(
        None,
        description="The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.",
    )
    typename__: Optional[Literal['CreateSponsorshipInput']] = Field(
        'CreateSponsorshipInput', alias='__typename'
    )


class CreateSponsorshipsInput(BaseModel):
    """
    Autogenerated input type of CreateSponsorships
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    privacyLevel: Optional[SponsorshipPrivacy] = Field(
        'PUBLIC',
        description='Specify whether others should be able to see that the sponsor is sponsoring\nthe sponsorables. Public visibility still does not reveal the dollar value of\nthe sponsorship.',
    )
    receiveEmails: Optional[Boolean] = Field(
        False,
        description='Whether the sponsor should receive email updates from the sponsorables.',
    )
    recurring: Optional[Boolean] = Field(
        False,
        description='Whether the sponsorships created should continue each billing cycle for the\nsponsor (monthly or annually), versus lasting only a single month. Defaults to\none-time sponsorships.',
    )
    sponsorLogin: String = Field(
        ...,
        description='The username of the user or organization who is acting as the sponsor, paying for the sponsorships.',
    )
    sponsorships: List[BulkSponsorship] = Field(
        ..., description='The list of maintainers to sponsor and for how much apiece.'
    )
    typename__: Optional[Literal['CreateSponsorshipsInput']] = Field(
        'CreateSponsorshipsInput', alias='__typename'
    )


class CreateTeamDiscussionCommentInput(BaseModel):
    """
    Autogenerated input type of CreateTeamDiscussionComment
    """

    body: Optional[String] = Field(
        None,
        description='The content of the comment. This field is required.\n\n**Upcoming Change on 2024-07-01 UTC**\n**Description:** `body` will be removed. Follow the guide at\nhttps://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\nfind a suitable replacement.\n**Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussionId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the discussion to which the comment belongs. This field is required.\n\n**Upcoming Change on 2024-07-01 UTC**\n**Description:** `discussionId` will be removed. Follow the guide at\nhttps://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\nfind a suitable replacement.\n**Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.',
    )
    typename__: Optional[Literal['CreateTeamDiscussionCommentInput']] = Field(
        'CreateTeamDiscussionCommentInput', alias='__typename'
    )


class CreateTeamDiscussionInput(BaseModel):
    """
    Autogenerated input type of CreateTeamDiscussion
    """

    body: Optional[String] = Field(
        None,
        description='The content of the discussion. This field is required.\n\n**Upcoming Change on 2024-07-01 UTC**\n**Description:** `body` will be removed. Follow the guide at\nhttps://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\nfind a suitable replacement.\n**Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    private: Optional[Boolean] = Field(
        None,
        description='If true, restricts the visibility of this discussion to team members and\norganization owners. If false or not specified, allows any organization member\nto view this discussion.\n\n**Upcoming Change on 2024-07-01 UTC**\n**Description:** `private` will be removed. Follow the guide at\nhttps://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\nfind a suitable replacement.\n**Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.',
    )
    teamId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the team to which the discussion belongs. This field is required.\n\n**Upcoming Change on 2024-07-01 UTC**\n**Description:** `teamId` will be removed. Follow the guide at\nhttps://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\nfind a suitable replacement.\n**Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.',
    )
    title: Optional[String] = Field(
        None,
        description='The title of the discussion. This field is required.\n\n**Upcoming Change on 2024-07-01 UTC**\n**Description:** `title` will be removed. Follow the guide at\nhttps://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\nfind a suitable replacement.\n**Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.',
    )
    typename__: Optional[Literal['CreateTeamDiscussionInput']] = Field(
        'CreateTeamDiscussionInput', alias='__typename'
    )


class CreateUserListInput(BaseModel):
    """
    Autogenerated input type of CreateUserList
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: Optional[String] = Field(None, description='A description of the list')
    isPrivate: Optional[Boolean] = Field(
        False, description='Whether or not the list is private'
    )
    name: String = Field(..., description='The name of the new list')
    typename__: Optional[Literal['CreateUserListInput']] = Field(
        'CreateUserListInput', alias='__typename'
    )


class DeclineTopicSuggestionInput(BaseModel):
    """
    Autogenerated input type of DeclineTopicSuggestion
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: Optional[String] = Field(
        None,
        description='The name of the suggested topic.\n\n**Upcoming Change on 2024-04-01 UTC**\n**Description:** `name` will be removed.\n**Reason:** Suggested topics are no longer supported',
    )
    reason: Optional[TopicSuggestionDeclineReason] = Field(
        None,
        description='The reason why the suggested topic is declined.\n\n**Upcoming Change on 2024-04-01 UTC**\n**Description:** `reason` will be removed.\n**Reason:** Suggested topics are no longer supported',
    )
    repositoryId: Optional[ID_aliased] = Field(
        None,
        description='The Node ID of the repository.\n\n**Upcoming Change on 2024-04-01 UTC**\n**Description:** `repositoryId` will be removed.\n**Reason:** Suggested topics are no longer supported',
    )
    typename__: Optional[Literal['DeclineTopicSuggestionInput']] = Field(
        'DeclineTopicSuggestionInput', alias='__typename'
    )


class DeleteBranchProtectionRuleInput(BaseModel):
    """
    Autogenerated input type of DeleteBranchProtectionRule
    """

    branchProtectionRuleId: ID_aliased = Field(
        ...,
        description='The global relay id of the branch protection rule to be deleted.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteBranchProtectionRuleInput']] = Field(
        'DeleteBranchProtectionRuleInput', alias='__typename'
    )


class DeleteDeploymentInput(BaseModel):
    """
    Autogenerated input type of DeleteDeployment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the deployment to be deleted.'
    )
    typename__: Optional[Literal['DeleteDeploymentInput']] = Field(
        'DeleteDeploymentInput', alias='__typename'
    )


class DeleteDiscussionCommentInput(BaseModel):
    """
    Autogenerated input type of DeleteDiscussionComment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node id of the discussion comment to delete.'
    )
    typename__: Optional[Literal['DeleteDiscussionCommentInput']] = Field(
        'DeleteDiscussionCommentInput', alias='__typename'
    )


class DeleteDiscussionInput(BaseModel):
    """
    Autogenerated input type of DeleteDiscussion
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The id of the discussion to delete.')
    typename__: Optional[Literal['DeleteDiscussionInput']] = Field(
        'DeleteDiscussionInput', alias='__typename'
    )


class DeleteEnvironmentInput(BaseModel):
    """
    Autogenerated input type of DeleteEnvironment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the environment to be deleted.'
    )
    typename__: Optional[Literal['DeleteEnvironmentInput']] = Field(
        'DeleteEnvironmentInput', alias='__typename'
    )


class DeleteIpAllowListEntryInput(BaseModel):
    """
    Autogenerated input type of DeleteIpAllowListEntry
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ipAllowListEntryId: ID_aliased = Field(
        ..., description='The ID of the IP allow list entry to delete.'
    )
    typename__: Optional[Literal['DeleteIpAllowListEntryInput']] = Field(
        'DeleteIpAllowListEntryInput', alias='__typename'
    )


class DeleteIssueCommentInput(BaseModel):
    """
    Autogenerated input type of DeleteIssueComment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The ID of the comment to delete.')
    typename__: Optional[Literal['DeleteIssueCommentInput']] = Field(
        'DeleteIssueCommentInput', alias='__typename'
    )


class DeleteIssueInput(BaseModel):
    """
    Autogenerated input type of DeleteIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='The ID of the issue to delete.')
    typename__: Optional[Literal['DeleteIssueInput']] = Field(
        'DeleteIssueInput', alias='__typename'
    )


class DeleteIssueTypeInput(BaseModel):
    """
    Autogenerated input type of DeleteIssueType
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueTypeId: ID_aliased = Field(
        ..., description='The ID of the issue type to delete'
    )
    typename__: Optional[Literal['DeleteIssueTypeInput']] = Field(
        'DeleteIssueTypeInput', alias='__typename'
    )


class DeleteLabelInput(BaseModel):
    """
    Autogenerated input type of DeleteLabel
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the label to be deleted.')
    typename__: Optional[Literal['DeleteLabelInput']] = Field(
        'DeleteLabelInput', alias='__typename'
    )


class DeleteLinkedBranchInput(BaseModel):
    """
    Autogenerated input type of DeleteLinkedBranch
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    linkedBranchId: ID_aliased = Field(..., description='The ID of the linked branch')
    typename__: Optional[Literal['DeleteLinkedBranchInput']] = Field(
        'DeleteLinkedBranchInput', alias='__typename'
    )


class DeletePackageVersionInput(BaseModel):
    """
    Autogenerated input type of DeletePackageVersion
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    packageVersionId: ID_aliased = Field(
        ..., description='The ID of the package version to be deleted.'
    )
    typename__: Optional[Literal['DeletePackageVersionInput']] = Field(
        'DeletePackageVersionInput', alias='__typename'
    )


class DeleteProjectCardInput(BaseModel):
    """
    Autogenerated input type of DeleteProjectCard
    """

    cardId: ID_aliased = Field(..., description='The id of the card to delete.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['DeleteProjectCardInput']] = Field(
        'DeleteProjectCardInput', alias='__typename'
    )


class DeleteProjectColumnInput(BaseModel):
    """
    Autogenerated input type of DeleteProjectColumn
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    columnId: ID_aliased = Field(..., description='The id of the column to delete.')
    typename__: Optional[Literal['DeleteProjectColumnInput']] = Field(
        'DeleteProjectColumnInput', alias='__typename'
    )


class DeleteProjectInput(BaseModel):
    """
    Autogenerated input type of DeleteProject
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(..., description='The Project ID to update.')
    typename__: Optional[Literal['DeleteProjectInput']] = Field(
        'DeleteProjectInput', alias='__typename'
    )


class DeleteProjectV2FieldInput(BaseModel):
    """
    Autogenerated input type of DeleteProjectV2Field
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    fieldId: ID_aliased = Field(..., description='The ID of the field to delete.')
    typename__: Optional[Literal['DeleteProjectV2FieldInput']] = Field(
        'DeleteProjectV2FieldInput', alias='__typename'
    )


class DeleteProjectV2Input(BaseModel):
    """
    Autogenerated input type of DeleteProjectV2
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(..., description='The ID of the Project to delete.')
    typename__: Optional[Literal['DeleteProjectV2Input']] = Field(
        'DeleteProjectV2Input', alias='__typename'
    )


class DeleteProjectV2ItemInput(BaseModel):
    """
    Autogenerated input type of DeleteProjectV2Item
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    itemId: ID_aliased = Field(..., description='The ID of the item to be removed.')
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project from which the item should be removed.'
    )
    typename__: Optional[Literal['DeleteProjectV2ItemInput']] = Field(
        'DeleteProjectV2ItemInput', alias='__typename'
    )


class DeleteProjectV2StatusUpdateInput(BaseModel):
    """
    Autogenerated input type of DeleteProjectV2StatusUpdate
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    statusUpdateId: ID_aliased = Field(
        ..., description='The ID of the status update to be removed.'
    )
    typename__: Optional[Literal['DeleteProjectV2StatusUpdateInput']] = Field(
        'DeleteProjectV2StatusUpdateInput', alias='__typename'
    )


class DeleteProjectV2WorkflowInput(BaseModel):
    """
    Autogenerated input type of DeleteProjectV2Workflow
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    workflowId: ID_aliased = Field(
        ..., description='The ID of the workflow to be removed.'
    )
    typename__: Optional[Literal['DeleteProjectV2WorkflowInput']] = Field(
        'DeleteProjectV2WorkflowInput', alias='__typename'
    )


class DeletePullRequestReviewCommentInput(BaseModel):
    """
    Autogenerated input type of DeletePullRequestReviewComment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The ID of the comment to delete.')
    typename__: Optional[Literal['DeletePullRequestReviewCommentInput']] = Field(
        'DeletePullRequestReviewCommentInput', alias='__typename'
    )


class DeletePullRequestReviewInput(BaseModel):
    """
    Autogenerated input type of DeletePullRequestReview
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReviewId: ID_aliased = Field(
        ..., description='The Node ID of the pull request review to delete.'
    )
    typename__: Optional[Literal['DeletePullRequestReviewInput']] = Field(
        'DeletePullRequestReviewInput', alias='__typename'
    )


class DeleteRefInput(BaseModel):
    """
    Autogenerated input type of DeleteRef
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    refId: ID_aliased = Field(..., description='The Node ID of the Ref to be deleted.')
    typename__: Optional[Literal['DeleteRefInput']] = Field(
        'DeleteRefInput', alias='__typename'
    )


class DeleteRepositoryRulesetInput(BaseModel):
    """
    Autogenerated input type of DeleteRepositoryRuleset
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryRulesetId: ID_aliased = Field(
        ..., description='The global relay id of the repository ruleset to be deleted.'
    )
    typename__: Optional[Literal['DeleteRepositoryRulesetInput']] = Field(
        'DeleteRepositoryRulesetInput', alias='__typename'
    )


class DeleteTeamDiscussionCommentInput(BaseModel):
    """
    Autogenerated input type of DeleteTeamDiscussionComment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The ID of the comment to delete.')
    typename__: Optional[Literal['DeleteTeamDiscussionCommentInput']] = Field(
        'DeleteTeamDiscussionCommentInput', alias='__typename'
    )


class DeleteTeamDiscussionInput(BaseModel):
    """
    Autogenerated input type of DeleteTeamDiscussion
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The discussion ID to delete.')
    typename__: Optional[Literal['DeleteTeamDiscussionInput']] = Field(
        'DeleteTeamDiscussionInput', alias='__typename'
    )


class DeleteUserListInput(BaseModel):
    """
    Autogenerated input type of DeleteUserList
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    listId: ID_aliased = Field(..., description='The ID of the list to delete.')
    typename__: Optional[Literal['DeleteUserListInput']] = Field(
        'DeleteUserListInput', alias='__typename'
    )


class DeleteVerifiableDomainInput(BaseModel):
    """
    Autogenerated input type of DeleteVerifiableDomain
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The ID of the verifiable domain to delete.'
    )
    typename__: Optional[Literal['DeleteVerifiableDomainInput']] = Field(
        'DeleteVerifiableDomainInput', alias='__typename'
    )


class DeploymentOrder(BaseModel):
    """
    Ordering options for deployment connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: DeploymentOrderField = Field(
        ..., description='The field to order deployments by.'
    )
    typename__: Optional[Literal['DeploymentOrder']] = Field(
        'DeploymentOrder', alias='__typename'
    )


class DequeuePullRequestInput(BaseModel):
    """
    Autogenerated input type of DequeuePullRequest
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The ID of the pull request to be dequeued.'
    )
    typename__: Optional[Literal['DequeuePullRequestInput']] = Field(
        'DequeuePullRequestInput', alias='__typename'
    )


class DisablePullRequestAutoMergeInput(BaseModel):
    """
    Autogenerated input type of DisablePullRequestAutoMerge
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='ID of the pull request to disable auto merge on.'
    )
    typename__: Optional[Literal['DisablePullRequestAutoMergeInput']] = Field(
        'DisablePullRequestAutoMergeInput', alias='__typename'
    )


class DiscussionOrder(BaseModel):
    """
    Ways in which lists of discussions can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order discussions by the specified field.',
    )
    field: DiscussionOrderField = Field(
        ..., description='The field by which to order discussions.'
    )
    typename__: Optional[Literal['DiscussionOrder']] = Field(
        'DiscussionOrder', alias='__typename'
    )


class DiscussionPollOptionOrder(BaseModel):
    """
    Ordering options for discussion poll option connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: DiscussionPollOptionOrderField = Field(
        ..., description='The field to order poll options by.'
    )
    typename__: Optional[Literal['DiscussionPollOptionOrder']] = Field(
        'DiscussionPollOptionOrder', alias='__typename'
    )


class DismissPullRequestReviewInput(BaseModel):
    """
    Autogenerated input type of DismissPullRequestReview
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    message: String = Field(
        ..., description='The contents of the pull request review dismissal message.'
    )
    pullRequestReviewId: ID_aliased = Field(
        ..., description='The Node ID of the pull request review to modify.'
    )
    typename__: Optional[Literal['DismissPullRequestReviewInput']] = Field(
        'DismissPullRequestReviewInput', alias='__typename'
    )


class DismissRepositoryVulnerabilityAlertInput(BaseModel):
    """
    Autogenerated input type of DismissRepositoryVulnerabilityAlert
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    dismissReason: DismissReason = Field(
        ..., description='The reason the Dependabot alert is being dismissed.'
    )
    repositoryVulnerabilityAlertId: ID_aliased = Field(
        ..., description='The Dependabot alert ID to dismiss.'
    )
    typename__: Optional[Literal['DismissRepositoryVulnerabilityAlertInput']] = Field(
        'DismissRepositoryVulnerabilityAlertInput', alias='__typename'
    )


class DraftPullRequestReviewComment(BaseModel):
    """
    Specifies a review comment to be left with a Pull Request Review.
    """

    body: String = Field(..., description='Body of the comment to leave.')
    path: String = Field(..., description='Path to the file being commented on.')
    position: Int = Field(
        ..., description='Position in the file to leave a comment on.'
    )
    typename__: Optional[Literal['DraftPullRequestReviewComment']] = Field(
        'DraftPullRequestReviewComment', alias='__typename'
    )


class DraftPullRequestReviewThread(BaseModel):
    """
    Specifies a review comment thread to be left with a Pull Request Review.
    """

    body: String = Field(..., description='Body of the comment to leave.')
    line: Optional[Int] = Field(
        None,
        description='The line of the blob to which the thread refers. The end of the line range for\nmulti-line comments. Required if not using positioning.',
    )
    path: Optional[String] = Field(
        None,
        description='Path to the file being commented on. Required if not using positioning.',
    )
    side: Optional[DiffSide] = Field(
        'RIGHT',
        description='The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.',
    )
    startLine: Optional[Int] = Field(
        None, description='The first line of the range to which the comment refers.'
    )
    startSide: Optional[DiffSide] = Field(
        'RIGHT', description='The side of the diff on which the start line resides.'
    )
    typename__: Optional[Literal['DraftPullRequestReviewThread']] = Field(
        'DraftPullRequestReviewThread', alias='__typename'
    )


class EnablePullRequestAutoMergeInput(BaseModel):
    """
    Autogenerated input type of EnablePullRequestAutoMerge
    """

    authorEmail: Optional[String] = Field(
        None, description='The email address to associate with this merge.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    commitBody: Optional[String] = Field(
        None,
        description='Commit body to use for the commit when the PR is mergable; if omitted, a\ndefault message will be used. NOTE: when merging with a merge queue any input\nvalue for commit message is ignored.',
    )
    commitHeadline: Optional[String] = Field(
        None,
        description='Commit headline to use for the commit when the PR is mergable; if omitted, a\ndefault message will be used. NOTE: when merging with a merge queue any input\nvalue for commit headline is ignored.',
    )
    expectedHeadOid: Optional[GitObjectID] = Field(
        None, description='The expected head OID of the pull request.'
    )
    mergeMethod: Optional[PullRequestMergeMethod] = Field(
        'MERGE',
        description='The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging\nwith a merge queue any input value for merge method is ignored.',
    )
    pullRequestId: ID_aliased = Field(
        ..., description='ID of the pull request to enable auto-merge on.'
    )
    typename__: Optional[Literal['EnablePullRequestAutoMergeInput']] = Field(
        'EnablePullRequestAutoMergeInput', alias='__typename'
    )


class EnqueuePullRequestInput(BaseModel):
    """
    Autogenerated input type of EnqueuePullRequest
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    expectedHeadOid: Optional[GitObjectID] = Field(
        None, description='The expected head OID of the pull request.'
    )
    jump: Optional[Boolean] = Field(
        None, description='Add the pull request to the front of the queue.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='The ID of the pull request to enqueue.'
    )
    typename__: Optional[Literal['EnqueuePullRequestInput']] = Field(
        'EnqueuePullRequestInput', alias='__typename'
    )


class EnterpriseAdministratorInvitationOrder(BaseModel):
    """
    Ordering options for enterprise administrator invitation connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseAdministratorInvitationOrderField = Field(
        ..., description='The field to order enterprise administrator invitations by.'
    )
    typename__: Optional[Literal['EnterpriseAdministratorInvitationOrder']] = Field(
        'EnterpriseAdministratorInvitationOrder', alias='__typename'
    )


class EnterpriseMemberInvitationOrder(BaseModel):
    """
    Ordering options for enterprise administrator invitation connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseMemberInvitationOrderField = Field(
        ..., description='The field to order enterprise member invitations by.'
    )
    typename__: Optional[Literal['EnterpriseMemberInvitationOrder']] = Field(
        'EnterpriseMemberInvitationOrder', alias='__typename'
    )


class EnterpriseMemberOrder(BaseModel):
    """
    Ordering options for enterprise member connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseMemberOrderField = Field(
        ..., description='The field to order enterprise members by.'
    )
    typename__: Optional[Literal['EnterpriseMemberOrder']] = Field(
        'EnterpriseMemberOrder', alias='__typename'
    )


class EnterpriseOrder(BaseModel):
    """
    Ordering options for enterprises.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseOrderField = Field(
        ..., description='The field to order enterprises by.'
    )
    typename__: Optional[Literal['EnterpriseOrder']] = Field(
        'EnterpriseOrder', alias='__typename'
    )


class EnterpriseServerInstallationOrder(BaseModel):
    """
    Ordering options for Enterprise Server installation connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseServerInstallationOrderField = Field(
        ..., description='The field to order Enterprise Server installations by.'
    )
    typename__: Optional[Literal['EnterpriseServerInstallationOrder']] = Field(
        'EnterpriseServerInstallationOrder', alias='__typename'
    )


class EnterpriseServerUserAccountEmailOrder(BaseModel):
    """
    Ordering options for Enterprise Server user account email connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseServerUserAccountEmailOrderField = Field(
        ..., description='The field to order emails by.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountEmailOrder']] = Field(
        'EnterpriseServerUserAccountEmailOrder', alias='__typename'
    )


class EnterpriseServerUserAccountOrder(BaseModel):
    """
    Ordering options for Enterprise Server user account connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseServerUserAccountOrderField = Field(
        ..., description='The field to order user accounts by.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountOrder']] = Field(
        'EnterpriseServerUserAccountOrder', alias='__typename'
    )


class EnterpriseServerUserAccountsUploadOrder(BaseModel):
    """
    Ordering options for Enterprise Server user accounts upload connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: EnterpriseServerUserAccountsUploadOrderField = Field(
        ..., description='The field to order user accounts uploads by.'
    )
    typename__: Optional[Literal['EnterpriseServerUserAccountsUploadOrder']] = Field(
        'EnterpriseServerUserAccountsUploadOrder', alias='__typename'
    )


class Environments(BaseModel):
    """
    Ordering options for environments
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order environments by the specified field.',
    )
    field: EnvironmentOrderField = Field(
        ..., description='The field to order environments by.'
    )
    typename__: Optional[Literal['Environments']] = Field(
        'Environments', alias='__typename'
    )


class FileAddition(BaseModel):
    """
    A command to add a file at the given path with the given contents as part of a
    commit.  Any existing file at that that path will be replaced.
    """

    contents: Base64String = Field(
        ..., description='The base64 encoded contents of the file'
    )
    path: String = Field(
        ..., description='The path in the repository where the file will be located'
    )
    typename__: Optional[Literal['FileAddition']] = Field(
        'FileAddition', alias='__typename'
    )


class FileChanges(BaseModel):
    """
    A description of a set of changes to a file tree to be made as part of
    a git commit, modeled as zero or more file `additions` and zero or more
    file `deletions`.

    Both fields are optional; omitting both will produce a commit with no
    file changes.

    `deletions` and `additions` describe changes to files identified
    by their path in the git tree using unix-style path separators, i.e.
    `/`.  The root of a git tree is an empty string, so paths are not
    slash-prefixed.

    `path` values must be unique across all `additions` and `deletions`
    provided.  Any duplication will result in a validation error.

    ### Encoding

    File contents must be provided in full for each `FileAddition`.

    The `contents` of a `FileAddition` must be encoded using RFC 4648
    compliant base64, i.e. correct padding is required and no characters
    outside the standard alphabet may be used.  Invalid base64
    encoding will be rejected with a validation error.

    The encoded contents may be binary.

    For text files, no assumptions are made about the character encoding of
    the file contents (after base64 decoding).  No charset transcoding or
    line-ending normalization will be performed; it is the client's
    responsibility to manage the character encoding of files they provide.
    However, for maximum compatibility we recommend using UTF-8 encoding
    and ensuring that all files in a repository use a consistent
    line-ending convention (`\n` or `\r\n`), and that all files end
    with a newline.

    ### Modeling file changes

    Each of the the five types of conceptual changes that can be made in a
    git commit can be described using the `FileChanges` type as follows:

    1. New file addition: create file `hello world\n` at path `docs/README.txt`:

           {
             "additions" [
               {
                 "path": "docs/README.txt",
                 "contents": base64encode("hello world\n")
               }
             ]
           }

    2. Existing file modification: change existing `docs/README.txt` to have new
       content `new content here\n`:

           {
             "additions" [
               {
                 "path": "docs/README.txt",
                 "contents": base64encode("new content here\n")
               }
             ]
           }

    3. Existing file deletion: remove existing file `docs/README.txt`.
       Note that the path is required to exist -- specifying a
       path that does not exist on the given branch will abort the
       commit and return an error.

           {
             "deletions" [
               {
                 "path": "docs/README.txt"
               }
             ]
           }


    4. File rename with no changes: rename `docs/README.txt` with
       previous content `hello world\n` to the same content at
       `newdocs/README.txt`:

           {
             "deletions" [
               {
                 "path": "docs/README.txt",
               }
             ],
             "additions" [
               {
                 "path": "newdocs/README.txt",
                 "contents": base64encode("hello world\n")
               }
             ]
           }


    5. File rename with changes: rename `docs/README.txt` with
       previous content `hello world\n` to a file at path
       `newdocs/README.txt` with content `new contents\n`:

           {
             "deletions" [
               {
                 "path": "docs/README.txt",
               }
             ],
             "additions" [
               {
                 "path": "newdocs/README.txt",
                 "contents": base64encode("new contents\n")
               }
             ]
           }
    """

    additions: Optional[List[FileAddition]] = Field(
        [], description='File to add or change.'
    )
    deletions: Optional[List[FileDeletion]] = Field([], description='Files to delete.')
    typename__: Optional[Literal['FileChanges']] = Field(
        'FileChanges', alias='__typename'
    )


class FileDeletion(BaseModel):
    """
    A command to delete the file at the given path as part of a commit.
    """

    path: String = Field(..., description='The path to delete')
    typename__: Optional[Literal['FileDeletion']] = Field(
        'FileDeletion', alias='__typename'
    )


class FileExtensionRestrictionParametersInput(BaseModel):
    """
    Prevent commits that include files with specified file extensions from being pushed to the commit graph.
    """

    restrictedFileExtensions: List[String] = Field(
        ...,
        description='The file extensions that are restricted from being pushed to the commit graph.',
    )
    typename__: Optional[Literal['FileExtensionRestrictionParametersInput']] = Field(
        'FileExtensionRestrictionParametersInput', alias='__typename'
    )


class FilePathRestrictionParametersInput(BaseModel):
    """
    Prevent commits that include changes in specified file and folder paths from
    being pushed to the commit graph. This includes absolute paths that contain file names.
    """

    restrictedFilePaths: List[String] = Field(
        ...,
        description='The file paths that are restricted from being pushed to the commit graph.',
    )
    typename__: Optional[Literal['FilePathRestrictionParametersInput']] = Field(
        'FilePathRestrictionParametersInput', alias='__typename'
    )


class FollowOrganizationInput(BaseModel):
    """
    Autogenerated input type of FollowOrganization
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizationId: ID_aliased = Field(
        ..., description='ID of the organization to follow.'
    )
    typename__: Optional[Literal['FollowOrganizationInput']] = Field(
        'FollowOrganizationInput', alias='__typename'
    )


class FollowUserInput(BaseModel):
    """
    Autogenerated input type of FollowUser
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    userId: ID_aliased = Field(..., description='ID of the user to follow.')
    typename__: Optional[Literal['FollowUserInput']] = Field(
        'FollowUserInput', alias='__typename'
    )


class GistOrder(BaseModel):
    """
    Ordering options for gist connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: GistOrderField = Field(
        ..., description='The field to order repositories by.'
    )
    typename__: Optional[Literal['GistOrder']] = Field('GistOrder', alias='__typename')


class GrantEnterpriseOrganizationsMigratorRoleInput(BaseModel):
    """
    Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise to which all organizations managed by it will be granted the migrator role.',
    )
    login: String = Field(
        ..., description='The login of the user to grant the migrator role'
    )
    typename__: Optional[Literal['GrantEnterpriseOrganizationsMigratorRoleInput']] = (
        Field('GrantEnterpriseOrganizationsMigratorRoleInput', alias='__typename')
    )


class GrantMigratorRoleInput(BaseModel):
    """
    Autogenerated input type of GrantMigratorRole
    """

    actor: String = Field(
        ..., description='The user login or Team slug to grant the migrator role.'
    )
    actorType: ActorType = Field(
        ..., description='Specifies the type of the actor, can be either USER or TEAM.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizationId: ID_aliased = Field(
        ..., description='The ID of the organization that the user/team belongs to.'
    )
    typename__: Optional[Literal['GrantMigratorRoleInput']] = Field(
        'GrantMigratorRoleInput', alias='__typename'
    )


class ImportProjectInput(BaseModel):
    """
    Autogenerated input type of ImportProject
    """

    body: Optional[String] = Field(None, description='The description of Project.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    columnImports: List[ProjectColumnImport] = Field(
        ..., description='A list of columns containing issues and pull requests.'
    )
    name: String = Field(..., description='The name of Project.')
    ownerName: String = Field(
        ...,
        description='The name of the Organization or User to create the Project under.',
    )
    public: Optional[Boolean] = Field(
        False, description='Whether the Project is public or not.'
    )
    typename__: Optional[Literal['ImportProjectInput']] = Field(
        'ImportProjectInput', alias='__typename'
    )


class InviteEnterpriseAdminInput(BaseModel):
    """
    Autogenerated input type of InviteEnterpriseAdmin
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    email: Optional[String] = Field(
        None, description='The email of the person to invite as an administrator.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise to which you want to invite an administrator.',
    )
    invitee: Optional[String] = Field(
        None, description='The login of a user to invite as an administrator.'
    )
    role: Optional[EnterpriseAdministratorRole] = Field(
        None, description='The role of the administrator.'
    )
    typename__: Optional[Literal['InviteEnterpriseAdminInput']] = Field(
        'InviteEnterpriseAdminInput', alias='__typename'
    )


class InviteEnterpriseMemberInput(BaseModel):
    """
    Autogenerated input type of InviteEnterpriseMember
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    email: Optional[String] = Field(
        None, description='The email of the person to invite as an unaffiliated member.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise to which you want to invite an unaffiliated member.',
    )
    invitee: Optional[String] = Field(
        None, description='The login of a user to invite as an unaffiliated member.'
    )
    typename__: Optional[Literal['InviteEnterpriseMemberInput']] = Field(
        'InviteEnterpriseMemberInput', alias='__typename'
    )


class IpAllowListEntryOrder(BaseModel):
    """
    Ordering options for IP allow list entry connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: IpAllowListEntryOrderField = Field(
        ..., description='The field to order IP allow list entries by.'
    )
    typename__: Optional[Literal['IpAllowListEntryOrder']] = Field(
        'IpAllowListEntryOrder', alias='__typename'
    )


class IssueCommentOrder(BaseModel):
    """
    Ways in which lists of issue comments can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order issue comments by the specified field.',
    )
    field: IssueCommentOrderField = Field(
        ..., description='The field in which to order issue comments by.'
    )
    typename__: Optional[Literal['IssueCommentOrder']] = Field(
        'IssueCommentOrder', alias='__typename'
    )


class IssueFilters(BaseModel):
    """
    Ways in which to filter lists of issues.
    """

    assignee: Optional[String] = Field(
        None,
        description='List issues assigned to given name. Pass in `null` for issues with no assigned\nuser, and `*` for issues assigned to any user.',
    )
    createdBy: Optional[String] = Field(
        None, description='List issues created by given name.'
    )
    labels: Optional[List[String]] = Field(
        None,
        description='List issues where the list of label names exist on the issue.',
    )
    mentioned: Optional[String] = Field(
        None, description='List issues where the given name is mentioned in the issue.'
    )
    milestone: Optional[String] = Field(
        None,
        description='List issues by given milestone argument. If an string representation of an\ninteger is passed, it should refer to a milestone by its database ID. Pass in\n`null` for issues with no milestone, and `*` for issues that are assigned to any milestone.',
    )
    milestoneNumber: Optional[String] = Field(
        None,
        description='List issues by given milestone argument. If an string representation of an\ninteger is passed, it should refer to a milestone by its number field. Pass in\n`null` for issues with no milestone, and `*` for issues that are assigned to any milestone.',
    )
    since: Optional[DateTime] = Field(
        None,
        description='List issues that have been updated at or after the given date.',
    )
    states: Optional[List[IssueState]] = Field(
        None, description='List issues filtered by the list of states given.'
    )
    type: Optional[String] = Field(
        None,
        description='List issues filtered by the type given, only supported by searches on repositories.',
    )
    viewerSubscribed: Optional[Boolean] = Field(
        False, description='List issues subscribed to by viewer.'
    )
    typename__: Optional[Literal['IssueFilters']] = Field(
        'IssueFilters', alias='__typename'
    )


class IssueOrder(BaseModel):
    """
    Ways in which lists of issues can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order issues by the specified field.',
    )
    field: IssueOrderField = Field(
        ..., description='The field in which to order issues by.'
    )
    typename__: Optional[Literal['IssueOrder']] = Field(
        'IssueOrder', alias='__typename'
    )


class IssueTypeOrder(BaseModel):
    """
    Ordering options for issue types connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: IssueTypeOrderField = Field(
        ..., description='The field to order issue types by.'
    )
    typename__: Optional[Literal['IssueTypeOrder']] = Field(
        'IssueTypeOrder', alias='__typename'
    )


class LabelOrder(BaseModel):
    """
    Ways in which lists of labels can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order labels by the specified field.',
    )
    field: LabelOrderField = Field(
        ..., description='The field in which to order labels by.'
    )
    typename__: Optional[Literal['LabelOrder']] = Field(
        'LabelOrder', alias='__typename'
    )


class LanguageOrder(BaseModel):
    """
    Ordering options for language connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: LanguageOrderField = Field(
        ..., description='The field to order languages by.'
    )
    typename__: Optional[Literal['LanguageOrder']] = Field(
        'LanguageOrder', alias='__typename'
    )


class LinkProjectV2ToRepositoryInput(BaseModel):
    """
    Autogenerated input type of LinkProjectV2ToRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the project to link to the repository.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to link to the project.'
    )
    typename__: Optional[Literal['LinkProjectV2ToRepositoryInput']] = Field(
        'LinkProjectV2ToRepositoryInput', alias='__typename'
    )


class LinkProjectV2ToTeamInput(BaseModel):
    """
    Autogenerated input type of LinkProjectV2ToTeam
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the project to link to the team.'
    )
    teamId: ID_aliased = Field(
        ..., description='The ID of the team to link to the project.'
    )
    typename__: Optional[Literal['LinkProjectV2ToTeamInput']] = Field(
        'LinkProjectV2ToTeamInput', alias='__typename'
    )


class LinkRepositoryToProjectInput(BaseModel):
    """
    Autogenerated input type of LinkRepositoryToProject
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to link to a Repository'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the Repository to link to a Project.'
    )
    typename__: Optional[Literal['LinkRepositoryToProjectInput']] = Field(
        'LinkRepositoryToProjectInput', alias='__typename'
    )


class LockLockableInput(BaseModel):
    """
    Autogenerated input type of LockLockable
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    lockReason: Optional[LockReason] = Field(
        None, description='A reason for why the item will be locked.'
    )
    lockableId: ID_aliased = Field(..., description='ID of the item to be locked.')
    typename__: Optional[Literal['LockLockableInput']] = Field(
        'LockLockableInput', alias='__typename'
    )


class MannequinOrder(BaseModel):
    """
    Ordering options for mannequins.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: MannequinOrderField = Field(
        ..., description='The field to order mannequins by.'
    )
    typename__: Optional[Literal['MannequinOrder']] = Field(
        'MannequinOrder', alias='__typename'
    )


class MarkDiscussionCommentAsAnswerInput(BaseModel):
    """
    Autogenerated input type of MarkDiscussionCommentAsAnswer
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the discussion comment to mark as an answer.'
    )
    typename__: Optional[Literal['MarkDiscussionCommentAsAnswerInput']] = Field(
        'MarkDiscussionCommentAsAnswerInput', alias='__typename'
    )


class MarkFileAsViewedInput(BaseModel):
    """
    Autogenerated input type of MarkFileAsViewed
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    path: String = Field(..., description='The path of the file to mark as viewed')
    pullRequestId: ID_aliased = Field(
        ..., description='The Node ID of the pull request.'
    )
    typename__: Optional[Literal['MarkFileAsViewedInput']] = Field(
        'MarkFileAsViewedInput', alias='__typename'
    )


class MarkProjectV2AsTemplateInput(BaseModel):
    """
    Autogenerated input type of MarkProjectV2AsTemplate
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to mark as a template.'
    )
    typename__: Optional[Literal['MarkProjectV2AsTemplateInput']] = Field(
        'MarkProjectV2AsTemplateInput', alias='__typename'
    )


class MarkPullRequestReadyForReviewInput(BaseModel):
    """
    Autogenerated input type of MarkPullRequestReadyForReview
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='ID of the pull request to be marked as ready for review.'
    )
    typename__: Optional[Literal['MarkPullRequestReadyForReviewInput']] = Field(
        'MarkPullRequestReadyForReviewInput', alias='__typename'
    )


class MaxFilePathLengthParametersInput(BaseModel):
    """
    Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
    """

    maxFilePathLength: Int = Field(
        ..., description='The maximum amount of characters allowed in file paths.'
    )
    typename__: Optional[Literal['MaxFilePathLengthParametersInput']] = Field(
        'MaxFilePathLengthParametersInput', alias='__typename'
    )


class MaxFileSizeParametersInput(BaseModel):
    """
    Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
    """

    maxFileSize: Int = Field(
        ...,
        description='The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).',
    )
    typename__: Optional[Literal['MaxFileSizeParametersInput']] = Field(
        'MaxFileSizeParametersInput', alias='__typename'
    )


class MergeBranchInput(BaseModel):
    """
    Autogenerated input type of MergeBranch
    """

    authorEmail: Optional[String] = Field(
        None, description='The email address to associate with this commit.'
    )
    base: String = Field(
        ...,
        description='The name of the base branch that the provided head will be merged into.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    commitMessage: Optional[String] = Field(
        None,
        description='Message to use for the merge commit. If omitted, a default will be used.',
    )
    head: String = Field(
        ...,
        description='The head to merge into the base branch. This can be a branch name or a commit GitObjectID.',
    )
    repositoryId: ID_aliased = Field(
        ...,
        description='The Node ID of the Repository containing the base branch that will be modified.',
    )
    typename__: Optional[Literal['MergeBranchInput']] = Field(
        'MergeBranchInput', alias='__typename'
    )


class MergePullRequestInput(BaseModel):
    """
    Autogenerated input type of MergePullRequest
    """

    authorEmail: Optional[String] = Field(
        None, description='The email address to associate with this merge.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    commitBody: Optional[String] = Field(
        None,
        description='Commit body to use for the merge commit; if omitted, a default message will be used',
    )
    commitHeadline: Optional[String] = Field(
        None,
        description='Commit headline to use for the merge commit; if omitted, a default message will be used.',
    )
    expectedHeadOid: Optional[GitObjectID] = Field(
        None,
        description='OID that the pull request head ref must match to allow merge; if omitted, no check is performed.',
    )
    mergeMethod: Optional[PullRequestMergeMethod] = Field(
        'MERGE', description="The merge method to use. If omitted, defaults to 'MERGE'"
    )
    pullRequestId: ID_aliased = Field(
        ..., description='ID of the pull request to be merged.'
    )
    typename__: Optional[Literal['MergePullRequestInput']] = Field(
        'MergePullRequestInput', alias='__typename'
    )


class MergeQueueParametersInput(BaseModel):
    """
    Merges must be performed via a merge queue.
    """

    checkResponseTimeoutMinutes: Int = Field(
        ...,
        description='Maximum time for a required status check to report a conclusion. After this\nmuch time has elapsed, checks that have not reported a conclusion will be\nassumed to have failed',
    )
    groupingStrategy: MergeQueueGroupingStrategy = Field(
        ...,
        description='When set to ALLGREEN, the merge commit created by merge queue for each PR in\nthe group must pass all required checks to merge. When set to HEADGREEN, only\nthe commit at the head of the merge group, i.e. the commit containing changes\nfrom all of the PRs in the group, must pass its required checks to merge.',
    )
    maxEntriesToBuild: Int = Field(
        ...,
        description='Limit the number of queued pull requests requesting checks and workflow runs at the same time.',
    )
    maxEntriesToMerge: Int = Field(
        ...,
        description='The maximum number of PRs that will be merged together in a group.',
    )
    mergeMethod: MergeQueueMergeMethod = Field(
        ..., description='Method to use when merging changes from queued pull requests.'
    )
    minEntriesToMerge: Int = Field(
        ...,
        description='The minimum number of PRs that will be merged together in a group.',
    )
    minEntriesToMergeWaitMinutes: Int = Field(
        ...,
        description='The time merge queue should wait after the first PR is added to the queue for\nthe minimum group size to be met. After this time has elapsed, the minimum\ngroup size will be ignored and a smaller group will be merged.',
    )
    typename__: Optional[Literal['MergeQueueParametersInput']] = Field(
        'MergeQueueParametersInput', alias='__typename'
    )


class MilestoneOrder(BaseModel):
    """
    Ordering options for milestone connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: MilestoneOrderField = Field(
        ..., description='The field to order milestones by.'
    )
    typename__: Optional[Literal['MilestoneOrder']] = Field(
        'MilestoneOrder', alias='__typename'
    )


class MinimizeCommentInput(BaseModel):
    """
    Autogenerated input type of MinimizeComment
    """

    classifier: ReportedContentClassifiers = Field(
        ..., description='The classification of comment'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subjectId: ID_aliased = Field(
        ..., description='The Node ID of the subject to modify.'
    )
    typename__: Optional[Literal['MinimizeCommentInput']] = Field(
        'MinimizeCommentInput', alias='__typename'
    )


class MoveProjectCardInput(BaseModel):
    """
    Autogenerated input type of MoveProjectCard
    """

    afterCardId: Optional[ID_aliased] = Field(
        None,
        description='Place the new card after the card with this id. Pass null to place it at the top.',
    )
    cardId: ID_aliased = Field(..., description='The id of the card to move.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    columnId: ID_aliased = Field(
        ..., description='The id of the column to move it into.'
    )
    typename__: Optional[Literal['MoveProjectCardInput']] = Field(
        'MoveProjectCardInput', alias='__typename'
    )


class MoveProjectColumnInput(BaseModel):
    """
    Autogenerated input type of MoveProjectColumn
    """

    afterColumnId: Optional[ID_aliased] = Field(
        None,
        description='Place the new column after the column with this id. Pass null to place it at the front.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    columnId: ID_aliased = Field(..., description='The id of the column to move.')
    typename__: Optional[Literal['MoveProjectColumnInput']] = Field(
        'MoveProjectColumnInput', alias='__typename'
    )


class OrgEnterpriseOwnerOrder(BaseModel):
    """
    Ordering options for an organization's enterprise owner connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: OrgEnterpriseOwnerOrderField = Field(
        ..., description='The field to order enterprise owners by.'
    )
    typename__: Optional[Literal['OrgEnterpriseOwnerOrder']] = Field(
        'OrgEnterpriseOwnerOrder', alias='__typename'
    )


class OrganizationOrder(BaseModel):
    """
    Ordering options for organization connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: OrganizationOrderField = Field(
        ..., description='The field to order organizations by.'
    )
    typename__: Optional[Literal['OrganizationOrder']] = Field(
        'OrganizationOrder', alias='__typename'
    )


class PackageFileOrder(BaseModel):
    """
    Ways in which lists of package files can be ordered upon return.
    """

    direction: Optional[OrderDirection] = Field(
        None,
        description='The direction in which to order package files by the specified field.',
    )
    field: Optional[PackageFileOrderField] = Field(
        None, description='The field in which to order package files by.'
    )
    typename__: Optional[Literal['PackageFileOrder']] = Field(
        'PackageFileOrder', alias='__typename'
    )


class PackageOrder(BaseModel):
    """
    Ways in which lists of packages can be ordered upon return.
    """

    direction: Optional[OrderDirection] = Field(
        None,
        description='The direction in which to order packages by the specified field.',
    )
    field: Optional[PackageOrderField] = Field(
        None, description='The field in which to order packages by.'
    )
    typename__: Optional[Literal['PackageOrder']] = Field(
        'PackageOrder', alias='__typename'
    )


class PackageVersionOrder(BaseModel):
    """
    Ways in which lists of package versions can be ordered upon return.
    """

    direction: Optional[OrderDirection] = Field(
        None,
        description='The direction in which to order package versions by the specified field.',
    )
    field: Optional[PackageVersionOrderField] = Field(
        None, description='The field in which to order package versions by.'
    )
    typename__: Optional[Literal['PackageVersionOrder']] = Field(
        'PackageVersionOrder', alias='__typename'
    )


class PinEnvironmentInput(BaseModel):
    """
    Autogenerated input type of PinEnvironment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    environmentId: ID_aliased = Field(
        ..., description='The ID of the environment to modify'
    )
    pinned: Boolean = Field(
        ...,
        description='The desired state of the environment. If true, environment will be pinned. If false, it will be unpinned.',
    )
    typename__: Optional[Literal['PinEnvironmentInput']] = Field(
        'PinEnvironmentInput', alias='__typename'
    )


class PinIssueInput(BaseModel):
    """
    Autogenerated input type of PinIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='The ID of the issue to be pinned')
    typename__: Optional[Literal['PinIssueInput']] = Field(
        'PinIssueInput', alias='__typename'
    )


class PinnedEnvironmentOrder(BaseModel):
    """
    Ordering options for pinned environments
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order pinned environments by the specified field.',
    )
    field: PinnedEnvironmentOrderField = Field(
        ..., description='The field to order pinned environments by.'
    )
    typename__: Optional[Literal['PinnedEnvironmentOrder']] = Field(
        'PinnedEnvironmentOrder', alias='__typename'
    )


class ProjectCardImport(BaseModel):
    """
    An issue or PR and its owning repository to be used in a project card.
    """

    number: Int = Field(..., description='The issue or pull request number.')
    repository: String = Field(
        ..., description='Repository name with owner (owner/repository).'
    )
    typename__: Optional[Literal['ProjectCardImport']] = Field(
        'ProjectCardImport', alias='__typename'
    )


class ProjectColumnImport(BaseModel):
    """
    A project column and a list of its issues and PRs.
    """

    columnName: String = Field(..., description='The name of the column.')
    issues: Optional[List[ProjectCardImport]] = Field(
        None, description='A list of issues and pull requests in the column.'
    )
    position: Int = Field(
        ..., description='The position of the column, starting from 0.'
    )
    typename__: Optional[Literal['ProjectColumnImport']] = Field(
        'ProjectColumnImport', alias='__typename'
    )


class ProjectOrder(BaseModel):
    """
    Ways in which lists of projects can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order projects by the specified field.',
    )
    field: ProjectOrderField = Field(
        ..., description='The field in which to order projects by.'
    )
    typename__: Optional[Literal['ProjectOrder']] = Field(
        'ProjectOrder', alias='__typename'
    )


class ProjectV2Collaborator(BaseModel):
    """
    A collaborator to update on a project. Only one of the userId or teamId should be provided.
    """

    role: ProjectV2Roles = Field(..., description='The role to grant the collaborator')
    teamId: Optional[ID_aliased] = Field(
        None, description='The ID of the team as a collaborator.'
    )
    userId: Optional[ID_aliased] = Field(
        None, description='The ID of the user as a collaborator.'
    )
    typename__: Optional[Literal['ProjectV2Collaborator']] = Field(
        'ProjectV2Collaborator', alias='__typename'
    )


class ProjectV2FieldOrder(BaseModel):
    """
    Ordering options for project v2 field connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: ProjectV2FieldOrderField = Field(
        ..., description='The field to order the project v2 fields by.'
    )
    typename__: Optional[Literal['ProjectV2FieldOrder']] = Field(
        'ProjectV2FieldOrder', alias='__typename'
    )


class ProjectV2FieldValue(BaseModel):
    """
    The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
    """

    date: Optional[Date] = Field(
        None, description='The ISO 8601 date to set on the field.'
    )
    iterationId: Optional[String] = Field(
        None, description='The id of the iteration to set on the field.'
    )
    number: Optional[Float] = Field(None, description='The number to set on the field.')
    singleSelectOptionId: Optional[String] = Field(
        None, description='The id of the single select option to set on the field.'
    )
    text: Optional[String] = Field(None, description='The text to set on the field.')
    typename__: Optional[Literal['ProjectV2FieldValue']] = Field(
        'ProjectV2FieldValue', alias='__typename'
    )


class ProjectV2Filters(BaseModel):
    """
    Ways in which to filter lists of projects.
    """

    state: Optional[ProjectV2State] = Field(
        None, description='List project v2 filtered by the state given.'
    )
    typename__: Optional[Literal['ProjectV2Filters']] = Field(
        'ProjectV2Filters', alias='__typename'
    )


class ProjectV2ItemFieldValueOrder(BaseModel):
    """
    Ordering options for project v2 item field value connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: ProjectV2ItemFieldValueOrderField = Field(
        ..., description='The field to order the project v2 item field values by.'
    )
    typename__: Optional[Literal['ProjectV2ItemFieldValueOrder']] = Field(
        'ProjectV2ItemFieldValueOrder', alias='__typename'
    )


class ProjectV2ItemOrder(BaseModel):
    """
    Ordering options for project v2 item connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: ProjectV2ItemOrderField = Field(
        ..., description='The field to order the project v2 items by.'
    )
    typename__: Optional[Literal['ProjectV2ItemOrder']] = Field(
        'ProjectV2ItemOrder', alias='__typename'
    )


class ProjectV2Iteration(BaseModel):
    """
    Represents an iteration
    """

    duration: Int = Field(..., description='The duration of the iteration, in days.')
    startDate: Date = Field(..., description='The start date for the iteration.')
    title: String = Field(..., description='The title for the iteration.')
    typename__: Optional[Literal['ProjectV2Iteration']] = Field(
        'ProjectV2Iteration', alias='__typename'
    )


class ProjectV2IterationFieldConfigurationInput(BaseModel):
    """
    Represents an iteration field configuration.
    """

    duration: Int = Field(..., description='The duration of each iteration, in days.')
    iterations: List[ProjectV2Iteration] = Field(
        ..., description='Zero or more iterations for the field.'
    )
    startDate: Date = Field(..., description='The start date for the first iteration.')
    typename__: Optional[Literal['ProjectV2IterationFieldConfigurationInput']] = Field(
        'ProjectV2IterationFieldConfigurationInput', alias='__typename'
    )


class ProjectV2Order(BaseModel):
    """
    Ways in which lists of projects can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order projects by the specified field.',
    )
    field: ProjectV2OrderField = Field(
        ..., description='The field in which to order projects by.'
    )
    typename__: Optional[Literal['ProjectV2Order']] = Field(
        'ProjectV2Order', alias='__typename'
    )


class ProjectV2SingleSelectFieldOptionInput(BaseModel):
    """
    Represents a single select field option
    """

    color: ProjectV2SingleSelectFieldOptionColor = Field(
        ..., description='The display color of the option'
    )
    description: String = Field(..., description='The description text of the option')
    name: String = Field(..., description='The name of the option')
    typename__: Optional[Literal['ProjectV2SingleSelectFieldOptionInput']] = Field(
        'ProjectV2SingleSelectFieldOptionInput', alias='__typename'
    )


class ProjectV2StatusOrder(BaseModel):
    """
    Ways in which project v2 status updates can be ordered.
    """

    direction: OrderDirection = Field(
        ..., description='The direction in which to order nodes.'
    )
    field: ProjectV2StatusUpdateOrderField = Field(
        ..., description='The field by which to order nodes.'
    )
    typename__: Optional[Literal['ProjectV2StatusOrder']] = Field(
        'ProjectV2StatusOrder', alias='__typename'
    )


class ProjectV2ViewOrder(BaseModel):
    """
    Ordering options for project v2 view connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: ProjectV2ViewOrderField = Field(
        ..., description='The field to order the project v2 views by.'
    )
    typename__: Optional[Literal['ProjectV2ViewOrder']] = Field(
        'ProjectV2ViewOrder', alias='__typename'
    )


class ProjectV2WorkflowOrder(BaseModel):
    """
    Ordering options for project v2 workflows connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: ProjectV2WorkflowsOrderField = Field(
        ..., description='The field to order the project v2 workflows by.'
    )
    typename__: Optional[Literal['ProjectV2WorkflowOrder']] = Field(
        'ProjectV2WorkflowOrder', alias='__typename'
    )


class PropertyTargetDefinitionInput(BaseModel):
    """
    A property that must match
    """

    name: String = Field(..., description='The name of the property')
    propertyValues: List[String] = Field(..., description='The values to match for')
    source: Optional[String] = Field(
        None,
        description="The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified",
    )
    typename__: Optional[Literal['PropertyTargetDefinitionInput']] = Field(
        'PropertyTargetDefinitionInput', alias='__typename'
    )


class PublishSponsorsTierInput(BaseModel):
    """
    Autogenerated input type of PublishSponsorsTier
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    tierId: ID_aliased = Field(..., description='The ID of the draft tier to publish.')
    typename__: Optional[Literal['PublishSponsorsTierInput']] = Field(
        'PublishSponsorsTierInput', alias='__typename'
    )


class PullRequestOrder(BaseModel):
    """
    Ways in which lists of issues can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order pull requests by the specified field.',
    )
    field: PullRequestOrderField = Field(
        ..., description='The field in which to order pull requests by.'
    )
    typename__: Optional[Literal['PullRequestOrder']] = Field(
        'PullRequestOrder', alias='__typename'
    )


class PullRequestParametersInput(BaseModel):
    """
    Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
    """

    allowedMergeMethods: Optional[List[PullRequestAllowedMergeMethods]] = Field(
        None,
        description='Array of allowed merge methods. Allowed values include `merge`, `squash`, and\n`rebase`. At least one option must be enabled.',
    )
    automaticCopilotCodeReviewEnabled: Optional[Boolean] = Field(
        None,
        description='Automatically request review from Copilot for new pull requests, if the author has access to Copilot code review.',
    )
    dismissStaleReviewsOnPush: Boolean = Field(
        ...,
        description='New, reviewable commits pushed will dismiss previous pull request review approvals.',
    )
    requireCodeOwnerReview: Boolean = Field(
        ...,
        description='Require an approving review in pull requests that modify files that have a designated code owner.',
    )
    requireLastPushApproval: Boolean = Field(
        ...,
        description='Whether the most recent reviewable push must be approved by someone other than the person who pushed it.',
    )
    requiredApprovingReviewCount: Int = Field(
        ...,
        description='The number of approving reviews that are required before a pull request can be merged.',
    )
    requiredReviewThreadResolution: Boolean = Field(
        ...,
        description='All conversations on code must be resolved before a pull request can be merged.',
    )
    typename__: Optional[Literal['PullRequestParametersInput']] = Field(
        'PullRequestParametersInput', alias='__typename'
    )


class ReactionOrder(BaseModel):
    """
    Ways in which lists of reactions can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order reactions by the specified field.',
    )
    field: ReactionOrderField = Field(
        ..., description='The field in which to order reactions by.'
    )
    typename__: Optional[Literal['ReactionOrder']] = Field(
        'ReactionOrder', alias='__typename'
    )


class RefNameConditionTargetInput(BaseModel):
    """
    Parameters to be used for the ref_name condition
    """

    exclude: List[String] = Field(
        ...,
        description='Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.',
    )
    include: List[String] = Field(
        ...,
        description='Array of ref names or patterns to include. One of these patterns must match\nfor the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the\ndefault branch or `~ALL` to include all branches.',
    )
    typename__: Optional[Literal['RefNameConditionTargetInput']] = Field(
        'RefNameConditionTargetInput', alias='__typename'
    )


class RefOrder(BaseModel):
    """
    Ways in which lists of git refs can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ..., description='The direction in which to order refs by the specified field.'
    )
    field: RefOrderField = Field(
        ..., description='The field in which to order refs by.'
    )
    typename__: Optional[Literal['RefOrder']] = Field('RefOrder', alias='__typename')


class RefUpdate(BaseModel):
    """
    A ref update
    """

    afterOid: GitObjectID = Field(
        ..., description='The value this ref should be updated to.'
    )
    beforeOid: Optional[GitObjectID] = Field(
        None, description='The value this ref needs to point to before the update.'
    )
    force: Optional[Boolean] = Field(
        False, description='Force a non fast-forward update.'
    )
    name: GitRefname = Field(
        ...,
        description='The fully qualified name of the ref to be update. For example `refs/heads/branch-name`',
    )
    typename__: Optional[Literal['RefUpdate']] = Field('RefUpdate', alias='__typename')


class RegenerateEnterpriseIdentityProviderRecoveryCodesInput(BaseModel):
    """
    Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set an identity provider.',
    )
    typename__: Optional[
        Literal['RegenerateEnterpriseIdentityProviderRecoveryCodesInput']
    ] = Field(
        'RegenerateEnterpriseIdentityProviderRecoveryCodesInput', alias='__typename'
    )


class RegenerateVerifiableDomainTokenInput(BaseModel):
    """
    Autogenerated input type of RegenerateVerifiableDomainToken
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ...,
        description='The ID of the verifiable domain to regenerate the verification token of.',
    )
    typename__: Optional[Literal['RegenerateVerifiableDomainTokenInput']] = Field(
        'RegenerateVerifiableDomainTokenInput', alias='__typename'
    )


class RejectDeploymentsInput(BaseModel):
    """
    Autogenerated input type of RejectDeployments
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    comment: Optional[String] = Field(
        '', description='Optional comment for rejecting deployments'
    )
    environmentIds: List[ID] = Field(
        ..., description='The ids of environments to reject deployments'
    )
    workflowRunId: ID_aliased = Field(
        ...,
        description='The node ID of the workflow run containing the pending deployments.',
    )
    typename__: Optional[Literal['RejectDeploymentsInput']] = Field(
        'RejectDeploymentsInput', alias='__typename'
    )


class ReleaseOrder(BaseModel):
    """
    Ways in which lists of releases can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order releases by the specified field.',
    )
    field: ReleaseOrderField = Field(
        ..., description='The field in which to order releases by.'
    )
    typename__: Optional[Literal['ReleaseOrder']] = Field(
        'ReleaseOrder', alias='__typename'
    )


class RemoveAssigneesFromAssignableInput(BaseModel):
    """
    Autogenerated input type of RemoveAssigneesFromAssignable
    """

    assignableId: ID_aliased = Field(
        ..., description='The id of the assignable object to remove assignees from.'
    )
    assigneeIds: List[ID] = Field(
        ..., description='The id of users to remove as assignees.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['RemoveAssigneesFromAssignableInput']] = Field(
        'RemoveAssigneesFromAssignableInput', alias='__typename'
    )


class RemoveEnterpriseAdminInput(BaseModel):
    """
    Autogenerated input type of RemoveEnterpriseAdmin
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ..., description='The Enterprise ID from which to remove the administrator.'
    )
    login: String = Field(
        ..., description='The login of the user to remove as an administrator.'
    )
    typename__: Optional[Literal['RemoveEnterpriseAdminInput']] = Field(
        'RemoveEnterpriseAdminInput', alias='__typename'
    )


class RemoveEnterpriseIdentityProviderInput(BaseModel):
    """
    Autogenerated input type of RemoveEnterpriseIdentityProvider
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise from which to remove the identity provider.',
    )
    typename__: Optional[Literal['RemoveEnterpriseIdentityProviderInput']] = Field(
        'RemoveEnterpriseIdentityProviderInput', alias='__typename'
    )


class RemoveEnterpriseMemberInput(BaseModel):
    """
    Autogenerated input type of RemoveEnterpriseMember
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise from which the user should be removed.',
    )
    userId: ID_aliased = Field(
        ..., description='The ID of the user to remove from the enterprise.'
    )
    typename__: Optional[Literal['RemoveEnterpriseMemberInput']] = Field(
        'RemoveEnterpriseMemberInput', alias='__typename'
    )


class RemoveEnterpriseOrganizationInput(BaseModel):
    """
    Autogenerated input type of RemoveEnterpriseOrganization
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise from which the organization should be removed.',
    )
    organizationId: ID_aliased = Field(
        ..., description='The ID of the organization to remove from the enterprise.'
    )
    typename__: Optional[Literal['RemoveEnterpriseOrganizationInput']] = Field(
        'RemoveEnterpriseOrganizationInput', alias='__typename'
    )


class RemoveEnterpriseSupportEntitlementInput(BaseModel):
    """
    Autogenerated input type of RemoveEnterpriseSupportEntitlement
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ..., description='The ID of the Enterprise which the admin belongs to.'
    )
    login: String = Field(
        ..., description='The login of a member who will lose the support entitlement.'
    )
    typename__: Optional[Literal['RemoveEnterpriseSupportEntitlementInput']] = Field(
        'RemoveEnterpriseSupportEntitlementInput', alias='__typename'
    )


class RemoveLabelsFromLabelableInput(BaseModel):
    """
    Autogenerated input type of RemoveLabelsFromLabelable
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    labelIds: List[ID] = Field(..., description='The ids of labels to remove.')
    labelableId: ID_aliased = Field(
        ..., description='The id of the Labelable to remove labels from.'
    )
    typename__: Optional[Literal['RemoveLabelsFromLabelableInput']] = Field(
        'RemoveLabelsFromLabelableInput', alias='__typename'
    )


class RemoveOutsideCollaboratorInput(BaseModel):
    """
    Autogenerated input type of RemoveOutsideCollaborator
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizationId: ID_aliased = Field(
        ...,
        description='The ID of the organization to remove the outside collaborator from.',
    )
    userId: ID_aliased = Field(
        ..., description='The ID of the outside collaborator to remove.'
    )
    typename__: Optional[Literal['RemoveOutsideCollaboratorInput']] = Field(
        'RemoveOutsideCollaboratorInput', alias='__typename'
    )


class RemoveReactionInput(BaseModel):
    """
    Autogenerated input type of RemoveReaction
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    content: ReactionContent = Field(
        ..., description='The name of the emoji reaction to remove.'
    )
    subjectId: ID_aliased = Field(
        ..., description='The Node ID of the subject to modify.'
    )
    typename__: Optional[Literal['RemoveReactionInput']] = Field(
        'RemoveReactionInput', alias='__typename'
    )


class RemoveStarInput(BaseModel):
    """
    Autogenerated input type of RemoveStar
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    starrableId: ID_aliased = Field(..., description='The Starrable ID to unstar.')
    typename__: Optional[Literal['RemoveStarInput']] = Field(
        'RemoveStarInput', alias='__typename'
    )


class RemoveSubIssueInput(BaseModel):
    """
    Autogenerated input type of RemoveSubIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='The id of the issue.')
    subIssueId: ID_aliased = Field(..., description='The id of the sub-issue.')
    typename__: Optional[Literal['RemoveSubIssueInput']] = Field(
        'RemoveSubIssueInput', alias='__typename'
    )


class RemoveUpvoteInput(BaseModel):
    """
    Autogenerated input type of RemoveUpvote
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subjectId: ID_aliased = Field(
        ..., description='The Node ID of the discussion or comment to remove upvote.'
    )
    typename__: Optional[Literal['RemoveUpvoteInput']] = Field(
        'RemoveUpvoteInput', alias='__typename'
    )


class ReopenDiscussionInput(BaseModel):
    """
    Autogenerated input type of ReopenDiscussion
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussionId: ID_aliased = Field(
        ..., description='ID of the discussion to be reopened.'
    )
    typename__: Optional[Literal['ReopenDiscussionInput']] = Field(
        'ReopenDiscussionInput', alias='__typename'
    )


class ReopenIssueInput(BaseModel):
    """
    Autogenerated input type of ReopenIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='ID of the issue to be opened.')
    typename__: Optional[Literal['ReopenIssueInput']] = Field(
        'ReopenIssueInput', alias='__typename'
    )


class ReopenPullRequestInput(BaseModel):
    """
    Autogenerated input type of ReopenPullRequest
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='ID of the pull request to be reopened.'
    )
    typename__: Optional[Literal['ReopenPullRequestInput']] = Field(
        'ReopenPullRequestInput', alias='__typename'
    )


class ReorderEnvironmentInput(BaseModel):
    """
    Autogenerated input type of ReorderEnvironment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    environmentId: ID_aliased = Field(
        ..., description='The ID of the environment to modify'
    )
    position: Int = Field(..., description='The desired position of the environment')
    typename__: Optional[Literal['ReorderEnvironmentInput']] = Field(
        'ReorderEnvironmentInput', alias='__typename'
    )


class ReplaceActorsForAssignableInput(BaseModel):
    """
    Autogenerated input type of ReplaceActorsForAssignable
    """

    actorIds: List[ID] = Field(
        ..., description='The ids of the actors to replace the existing assignees.'
    )
    assignableId: ID_aliased = Field(
        ..., description='The id of the assignable object to replace the assignees for.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    typename__: Optional[Literal['ReplaceActorsForAssignableInput']] = Field(
        'ReplaceActorsForAssignableInput', alias='__typename'
    )


class RepositoryIdConditionTargetInput(BaseModel):
    """
    Parameters to be used for the repository_id condition
    """

    repositoryIds: List[ID] = Field(
        ..., description='One of these repo IDs must match the repo.'
    )
    typename__: Optional[Literal['RepositoryIdConditionTargetInput']] = Field(
        'RepositoryIdConditionTargetInput', alias='__typename'
    )


class RepositoryInvitationOrder(BaseModel):
    """
    Ordering options for repository invitation connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: RepositoryInvitationOrderField = Field(
        ..., description='The field to order repository invitations by.'
    )
    typename__: Optional[Literal['RepositoryInvitationOrder']] = Field(
        'RepositoryInvitationOrder', alias='__typename'
    )


class RepositoryMigrationOrder(BaseModel):
    """
    Ordering options for repository migrations.
    """

    direction: RepositoryMigrationOrderDirection = Field(
        ..., description='The ordering direction.'
    )
    field: RepositoryMigrationOrderField = Field(
        ..., description='The field to order repository migrations by.'
    )
    typename__: Optional[Literal['RepositoryMigrationOrder']] = Field(
        'RepositoryMigrationOrder', alias='__typename'
    )


class RepositoryNameConditionTargetInput(BaseModel):
    """
    Parameters to be used for the repository_name condition
    """

    exclude: List[String] = Field(
        ...,
        description='Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.',
    )
    include: List[String] = Field(
        ...,
        description='Array of repository names or patterns to include. One of these patterns must\nmatch for the condition to pass. Also accepts `~ALL` to include all repositories.',
    )
    protected: Optional[Boolean] = Field(
        None,
        description='Target changes that match these patterns will be prevented except by those with bypass permissions.',
    )
    typename__: Optional[Literal['RepositoryNameConditionTargetInput']] = Field(
        'RepositoryNameConditionTargetInput', alias='__typename'
    )


class RepositoryOrder(BaseModel):
    """
    Ordering options for repository connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: RepositoryOrderField = Field(
        ..., description='The field to order repositories by.'
    )
    typename__: Optional[Literal['RepositoryOrder']] = Field(
        'RepositoryOrder', alias='__typename'
    )


class RepositoryPropertyConditionTargetInput(BaseModel):
    """
    Parameters to be used for the repository_property condition
    """

    exclude: List[PropertyTargetDefinitionInput] = Field(
        ..., description='Array of repository properties that must not match.'
    )
    include: List[PropertyTargetDefinitionInput] = Field(
        ..., description='Array of repository properties that must match'
    )
    typename__: Optional[Literal['RepositoryPropertyConditionTargetInput']] = Field(
        'RepositoryPropertyConditionTargetInput', alias='__typename'
    )


class RepositoryRuleConditionsInput(BaseModel):
    """
    Specifies the conditions required for a ruleset to evaluate
    """

    refName: Optional[RefNameConditionTargetInput] = Field(
        None, description='Configuration for the ref_name condition'
    )
    repositoryId: Optional[RepositoryIdConditionTargetInput] = Field(
        None, description='Configuration for the repository_id condition'
    )
    repositoryName: Optional[RepositoryNameConditionTargetInput] = Field(
        None, description='Configuration for the repository_name condition'
    )
    repositoryProperty: Optional[RepositoryPropertyConditionTargetInput] = Field(
        None, description='Configuration for the repository_property condition'
    )
    typename__: Optional[Literal['RepositoryRuleConditionsInput']] = Field(
        'RepositoryRuleConditionsInput', alias='__typename'
    )


class RepositoryRuleInput(BaseModel):
    """
    Specifies the attributes for a new or updated rule.
    """

    id: Optional[ID_aliased] = Field(
        None, description='Optional ID of this rule when updating'
    )
    parameters: Optional[RuleParametersInput] = Field(
        None, description='The parameters for the rule.'
    )
    type: RepositoryRuleType = Field(..., description='The type of rule to create.')
    typename__: Optional[Literal['RepositoryRuleInput']] = Field(
        'RepositoryRuleInput', alias='__typename'
    )


class RepositoryRuleOrder(BaseModel):
    """
    Ordering options for repository rules.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: RepositoryRuleOrderField = Field(
        ..., description='The field to order repository rules by.'
    )
    typename__: Optional[Literal['RepositoryRuleOrder']] = Field(
        'RepositoryRuleOrder', alias='__typename'
    )


class RepositoryRulesetBypassActorInput(BaseModel):
    """
    Specifies the attributes for a new or updated ruleset bypass actor. Only one of
    `actor_id`, `repository_role_database_id`, `organization_admin`, or `deploy_key`
    should be specified.
    """

    actorId: Optional[ID_aliased] = Field(
        None,
        description='For Team and Integration bypasses, the Team or Integration ID',
    )
    bypassMode: RepositoryRulesetBypassActorBypassMode = Field(
        ..., description='The bypass mode for this actor.'
    )
    deployKey: Optional[Boolean] = Field(
        None,
        description='For deploy key bypasses, true. Can only use ALWAYS as the bypass mode',
    )
    enterpriseOwner: Optional[Boolean] = Field(
        None, description='For enterprise owner bypasses, true'
    )
    organizationAdmin: Optional[Boolean] = Field(
        None, description='For organization owner bypasses, true'
    )
    repositoryRoleDatabaseId: Optional[Int] = Field(
        None, description='For role bypasses, the role database ID'
    )
    typename__: Optional[Literal['RepositoryRulesetBypassActorInput']] = Field(
        'RepositoryRulesetBypassActorInput', alias='__typename'
    )


class ReprioritizeSubIssueInput(BaseModel):
    """
    Autogenerated input type of ReprioritizeSubIssue
    """

    afterId: Optional[ID_aliased] = Field(
        None,
        description='The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified).',
    )
    beforeId: Optional[ID_aliased] = Field(
        None,
        description='The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified).',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='The id of the parent issue.')
    subIssueId: ID_aliased = Field(
        ..., description='The id of the sub-issue to reprioritize.'
    )
    typename__: Optional[Literal['ReprioritizeSubIssueInput']] = Field(
        'ReprioritizeSubIssueInput', alias='__typename'
    )


class RequestReviewsInput(BaseModel):
    """
    Autogenerated input type of RequestReviews
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='The Node ID of the pull request to modify.'
    )
    teamIds: Optional[List[ID]] = Field(
        None, description='The Node IDs of the team to request.'
    )
    union: Optional[Boolean] = Field(
        False, description='Add users to the set rather than replace.'
    )
    userIds: Optional[List[ID]] = Field(
        None, description='The Node IDs of the user to request.'
    )
    typename__: Optional[Literal['RequestReviewsInput']] = Field(
        'RequestReviewsInput', alias='__typename'
    )


class RequiredDeploymentsParametersInput(BaseModel):
    """
    Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
    """

    requiredDeploymentEnvironments: List[String] = Field(
        ...,
        description='The environments that must be successfully deployed to before branches can be merged.',
    )
    typename__: Optional[Literal['RequiredDeploymentsParametersInput']] = Field(
        'RequiredDeploymentsParametersInput', alias='__typename'
    )


class RequiredStatusCheckInput(BaseModel):
    """
    Specifies the attributes for a new or updated required status check.
    """

    appId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the App that must set the status in order for it to be accepted.\nOmit this value to use whichever app has recently been setting this status, or\nuse "any" to allow any app to set the status.',
    )
    context: String = Field(
        ...,
        description='Status check context that must pass for commits to be accepted to the matching branch.',
    )
    typename__: Optional[Literal['RequiredStatusCheckInput']] = Field(
        'RequiredStatusCheckInput', alias='__typename'
    )


class RequiredStatusChecksParametersInput(BaseModel):
    """
    Choose which status checks must pass before the ref is updated. When enabled,
    commits must first be pushed to another ref where the checks pass.
    """

    doNotEnforceOnCreate: Optional[Boolean] = Field(
        None,
        description='Allow repositories and branches to be created if a check would otherwise prohibit it.',
    )
    requiredStatusChecks: List[StatusCheckConfigurationInput] = Field(
        ..., description='Status checks that are required.'
    )
    strictRequiredStatusChecksPolicy: Boolean = Field(
        ...,
        description='Whether pull requests targeting a matching branch must be tested with the\nlatest code. This setting will not take effect unless at least one status\ncheck is enabled.',
    )
    typename__: Optional[Literal['RequiredStatusChecksParametersInput']] = Field(
        'RequiredStatusChecksParametersInput', alias='__typename'
    )


class RerequestCheckSuiteInput(BaseModel):
    """
    Autogenerated input type of RerequestCheckSuite
    """

    checkSuiteId: ID_aliased = Field(..., description='The Node ID of the check suite.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    typename__: Optional[Literal['RerequestCheckSuiteInput']] = Field(
        'RerequestCheckSuiteInput', alias='__typename'
    )


class ResolveReviewThreadInput(BaseModel):
    """
    Autogenerated input type of ResolveReviewThread
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    threadId: ID_aliased = Field(..., description='The ID of the thread to resolve')
    typename__: Optional[Literal['ResolveReviewThreadInput']] = Field(
        'ResolveReviewThreadInput', alias='__typename'
    )


class RetireSponsorsTierInput(BaseModel):
    """
    Autogenerated input type of RetireSponsorsTier
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    tierId: ID_aliased = Field(
        ..., description='The ID of the published tier to retire.'
    )
    typename__: Optional[Literal['RetireSponsorsTierInput']] = Field(
        'RetireSponsorsTierInput', alias='__typename'
    )


class RevertPullRequestInput(BaseModel):
    """
    Autogenerated input type of RevertPullRequest
    """

    body: Optional[String] = Field(
        None, description='The description of the revert pull request.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    draft: Optional[Boolean] = Field(
        False,
        description='Indicates whether the revert pull request should be a draft.',
    )
    pullRequestId: ID_aliased = Field(
        ..., description='The ID of the pull request to revert.'
    )
    title: Optional[String] = Field(
        None, description='The title of the revert pull request.'
    )
    typename__: Optional[Literal['RevertPullRequestInput']] = Field(
        'RevertPullRequestInput', alias='__typename'
    )


class RevokeEnterpriseOrganizationsMigratorRoleInput(BaseModel):
    """
    Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise to which all organizations managed by it will be granted the migrator role.',
    )
    login: String = Field(
        ..., description='The login of the user to revoke the migrator role'
    )
    typename__: Optional[Literal['RevokeEnterpriseOrganizationsMigratorRoleInput']] = (
        Field('RevokeEnterpriseOrganizationsMigratorRoleInput', alias='__typename')
    )


class RevokeMigratorRoleInput(BaseModel):
    """
    Autogenerated input type of RevokeMigratorRole
    """

    actor: String = Field(
        ..., description='The user login or Team slug to revoke the migrator role from.'
    )
    actorType: ActorType = Field(
        ..., description='Specifies the type of the actor, can be either USER or TEAM.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizationId: ID_aliased = Field(
        ..., description='The ID of the organization that the user/team belongs to.'
    )
    typename__: Optional[Literal['RevokeMigratorRoleInput']] = Field(
        'RevokeMigratorRoleInput', alias='__typename'
    )


class RuleParametersInput(BaseModel):
    """
    Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
    """

    branchNamePattern: Optional[BranchNamePatternParametersInput] = Field(
        None, description='Parameters used for the `branch_name_pattern` rule type'
    )
    codeScanning: Optional[CodeScanningParametersInput] = Field(
        None, description='Parameters used for the `code_scanning` rule type'
    )
    commitAuthorEmailPattern: Optional[CommitAuthorEmailPatternParametersInput] = Field(
        None,
        description='Parameters used for the `commit_author_email_pattern` rule type',
    )
    commitMessagePattern: Optional[CommitMessagePatternParametersInput] = Field(
        None, description='Parameters used for the `commit_message_pattern` rule type'
    )
    committerEmailPattern: Optional[CommitterEmailPatternParametersInput] = Field(
        None, description='Parameters used for the `committer_email_pattern` rule type'
    )
    fileExtensionRestriction: Optional[FileExtensionRestrictionParametersInput] = Field(
        None,
        description='Parameters used for the `file_extension_restriction` rule type',
    )
    filePathRestriction: Optional[FilePathRestrictionParametersInput] = Field(
        None, description='Parameters used for the `file_path_restriction` rule type'
    )
    maxFilePathLength: Optional[MaxFilePathLengthParametersInput] = Field(
        None, description='Parameters used for the `max_file_path_length` rule type'
    )
    maxFileSize: Optional[MaxFileSizeParametersInput] = Field(
        None, description='Parameters used for the `max_file_size` rule type'
    )
    mergeQueue: Optional[MergeQueueParametersInput] = Field(
        None, description='Parameters used for the `merge_queue` rule type'
    )
    pullRequest: Optional[PullRequestParametersInput] = Field(
        None, description='Parameters used for the `pull_request` rule type'
    )
    requiredDeployments: Optional[RequiredDeploymentsParametersInput] = Field(
        None, description='Parameters used for the `required_deployments` rule type'
    )
    requiredStatusChecks: Optional[RequiredStatusChecksParametersInput] = Field(
        None, description='Parameters used for the `required_status_checks` rule type'
    )
    tagNamePattern: Optional[TagNamePatternParametersInput] = Field(
        None, description='Parameters used for the `tag_name_pattern` rule type'
    )
    update: Optional[UpdateParametersInput] = Field(
        None, description='Parameters used for the `update` rule type'
    )
    workflows: Optional[WorkflowsParametersInput] = Field(
        None, description='Parameters used for the `workflows` rule type'
    )
    typename__: Optional[Literal['RuleParametersInput']] = Field(
        'RuleParametersInput', alias='__typename'
    )


class SavedReplyOrder(BaseModel):
    """
    Ordering options for saved reply connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SavedReplyOrderField = Field(
        ..., description='The field to order saved replies by.'
    )
    typename__: Optional[Literal['SavedReplyOrder']] = Field(
        'SavedReplyOrder', alias='__typename'
    )


class SecurityAdvisoryIdentifierFilter(BaseModel):
    """
    An advisory identifier to filter results on.
    """

    type: SecurityAdvisoryIdentifierType = Field(
        ..., description='The identifier type.'
    )
    value: String = Field(
        ..., description='The identifier string. Supports exact or partial matching.'
    )
    typename__: Optional[Literal['SecurityAdvisoryIdentifierFilter']] = Field(
        'SecurityAdvisoryIdentifierFilter', alias='__typename'
    )


class SecurityAdvisoryOrder(BaseModel):
    """
    Ordering options for security advisory connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SecurityAdvisoryOrderField = Field(
        ..., description='The field to order security advisories by.'
    )
    typename__: Optional[Literal['SecurityAdvisoryOrder']] = Field(
        'SecurityAdvisoryOrder', alias='__typename'
    )


class SecurityVulnerabilityOrder(BaseModel):
    """
    Ordering options for security vulnerability connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SecurityVulnerabilityOrderField = Field(
        ..., description='The field to order security vulnerabilities by.'
    )
    typename__: Optional[Literal['SecurityVulnerabilityOrder']] = Field(
        'SecurityVulnerabilityOrder', alias='__typename'
    )


class SetEnterpriseIdentityProviderInput(BaseModel):
    """
    Autogenerated input type of SetEnterpriseIdentityProvider
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    digestMethod: SamlDigestAlgorithm = Field(
        ...,
        description='The digest algorithm used to sign SAML requests for the identity provider.',
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set an identity provider.',
    )
    idpCertificate: String = Field(
        ...,
        description='The x509 certificate used by the identity provider to sign assertions and responses.',
    )
    issuer: Optional[String] = Field(
        None, description='The Issuer Entity ID for the SAML identity provider'
    )
    signatureMethod: SamlSignatureAlgorithm = Field(
        ...,
        description='The signature algorithm used to sign SAML requests for the identity provider.',
    )
    ssoUrl: URI = Field(
        ..., description="The URL endpoint for the identity provider's SAML SSO."
    )
    typename__: Optional[Literal['SetEnterpriseIdentityProviderInput']] = Field(
        'SetEnterpriseIdentityProviderInput', alias='__typename'
    )


class SetOrganizationInteractionLimitInput(BaseModel):
    """
    Autogenerated input type of SetOrganizationInteractionLimit
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    expiry: Optional[RepositoryInteractionLimitExpiry] = Field(
        None, description='When this limit should expire.'
    )
    limit: RepositoryInteractionLimit = Field(..., description='The limit to set.')
    organizationId: ID_aliased = Field(
        ..., description='The ID of the organization to set a limit for.'
    )
    typename__: Optional[Literal['SetOrganizationInteractionLimitInput']] = Field(
        'SetOrganizationInteractionLimitInput', alias='__typename'
    )


class SetRepositoryInteractionLimitInput(BaseModel):
    """
    Autogenerated input type of SetRepositoryInteractionLimit
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    expiry: Optional[RepositoryInteractionLimitExpiry] = Field(
        None, description='When this limit should expire.'
    )
    limit: RepositoryInteractionLimit = Field(..., description='The limit to set.')
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to set a limit for.'
    )
    typename__: Optional[Literal['SetRepositoryInteractionLimitInput']] = Field(
        'SetRepositoryInteractionLimitInput', alias='__typename'
    )


class SetUserInteractionLimitInput(BaseModel):
    """
    Autogenerated input type of SetUserInteractionLimit
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    expiry: Optional[RepositoryInteractionLimitExpiry] = Field(
        None, description='When this limit should expire.'
    )
    limit: RepositoryInteractionLimit = Field(..., description='The limit to set.')
    userId: ID_aliased = Field(
        ..., description='The ID of the user to set a limit for.'
    )
    typename__: Optional[Literal['SetUserInteractionLimitInput']] = Field(
        'SetUserInteractionLimitInput', alias='__typename'
    )


class SponsorAndLifetimeValueOrder(BaseModel):
    """
    Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SponsorAndLifetimeValueOrderField = Field(
        ..., description='The field to order results by.'
    )
    typename__: Optional[Literal['SponsorAndLifetimeValueOrder']] = Field(
        'SponsorAndLifetimeValueOrder', alias='__typename'
    )


class SponsorOrder(BaseModel):
    """
    Ordering options for connections to get sponsor entities for GitHub Sponsors.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SponsorOrderField = Field(
        ..., description='The field to order sponsor entities by.'
    )
    typename__: Optional[Literal['SponsorOrder']] = Field(
        'SponsorOrder', alias='__typename'
    )


class SponsorableOrder(BaseModel):
    """
    Ordering options for connections to get sponsorable entities for GitHub Sponsors.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SponsorableOrderField = Field(
        ..., description='The field to order sponsorable entities by.'
    )
    typename__: Optional[Literal['SponsorableOrder']] = Field(
        'SponsorableOrder', alias='__typename'
    )


class SponsorsActivityOrder(BaseModel):
    """
    Ordering options for GitHub Sponsors activity connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SponsorsActivityOrderField = Field(
        ..., description='The field to order activity by.'
    )
    typename__: Optional[Literal['SponsorsActivityOrder']] = Field(
        'SponsorsActivityOrder', alias='__typename'
    )


class SponsorsTierOrder(BaseModel):
    """
    Ordering options for Sponsors tiers connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SponsorsTierOrderField = Field(
        ..., description='The field to order tiers by.'
    )
    typename__: Optional[Literal['SponsorsTierOrder']] = Field(
        'SponsorsTierOrder', alias='__typename'
    )


class SponsorshipNewsletterOrder(BaseModel):
    """
    Ordering options for sponsorship newsletter connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SponsorshipNewsletterOrderField = Field(
        ..., description='The field to order sponsorship newsletters by.'
    )
    typename__: Optional[Literal['SponsorshipNewsletterOrder']] = Field(
        'SponsorshipNewsletterOrder', alias='__typename'
    )


class SponsorshipOrder(BaseModel):
    """
    Ordering options for sponsorship connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: SponsorshipOrderField = Field(
        ..., description='The field to order sponsorship by.'
    )
    typename__: Optional[Literal['SponsorshipOrder']] = Field(
        'SponsorshipOrder', alias='__typename'
    )


class StarOrder(BaseModel):
    """
    Ways in which star connections can be ordered.
    """

    direction: OrderDirection = Field(
        ..., description='The direction in which to order nodes.'
    )
    field: StarOrderField = Field(
        ..., description='The field in which to order nodes by.'
    )
    typename__: Optional[Literal['StarOrder']] = Field('StarOrder', alias='__typename')


class StartOrganizationMigrationInput(BaseModel):
    """
    Autogenerated input type of StartOrganizationMigration
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    sourceAccessToken: String = Field(
        ..., description='The migration source access token.'
    )
    sourceOrgUrl: URI = Field(
        ..., description='The URL of the organization to migrate.'
    )
    targetEnterpriseId: ID_aliased = Field(
        ..., description='The ID of the enterprise the target organization belongs to.'
    )
    targetOrgName: String = Field(
        ..., description='The name of the target organization.'
    )
    typename__: Optional[Literal['StartOrganizationMigrationInput']] = Field(
        'StartOrganizationMigrationInput', alias='__typename'
    )


class StartRepositoryMigrationInput(BaseModel):
    """
    Autogenerated input type of StartRepositoryMigration
    """

    accessToken: Optional[String] = Field(
        None, description='The migration source access token.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    continueOnError: Optional[Boolean] = Field(
        None,
        description='Whether to continue the migration on error. Defaults to `true`.',
    )
    gitArchiveUrl: Optional[String] = Field(
        None, description='The signed URL to access the user-uploaded git archive.'
    )
    githubPat: Optional[String] = Field(
        None,
        description='The GitHub personal access token of the user importing to the target repository.',
    )
    lockSource: Optional[Boolean] = Field(
        None, description='Whether to lock the source repository.'
    )
    metadataArchiveUrl: Optional[String] = Field(
        None, description='The signed URL to access the user-uploaded metadata archive.'
    )
    ownerId: ID_aliased = Field(
        ...,
        description='The ID of the organization that will own the imported repository.',
    )
    repositoryName: String = Field(
        ..., description='The name of the imported repository.'
    )
    skipReleases: Optional[Boolean] = Field(
        None, description='Whether to skip migrating releases for the repository.'
    )
    sourceId: ID_aliased = Field(..., description='The ID of the migration source.')
    sourceRepositoryUrl: URI = Field(
        ..., description='The URL of the source repository.'
    )
    targetRepoVisibility: Optional[String] = Field(
        None, description='The visibility of the imported repository.'
    )
    typename__: Optional[Literal['StartRepositoryMigrationInput']] = Field(
        'StartRepositoryMigrationInput', alias='__typename'
    )


class StatusCheckConfigurationInput(BaseModel):
    """
    Required status check
    """

    context: String = Field(
        ...,
        description='The status check context name that must be present on the commit.',
    )
    integrationId: Optional[Int] = Field(
        None,
        description='The optional integration ID that this status check must originate from.',
    )
    typename__: Optional[Literal['StatusCheckConfigurationInput']] = Field(
        'StatusCheckConfigurationInput', alias='__typename'
    )


class SubmitPullRequestReviewInput(BaseModel):
    """
    Autogenerated input type of SubmitPullRequestReview
    """

    body: Optional[String] = Field(
        None, description='The text field to set on the Pull Request Review.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    event: PullRequestReviewEvent = Field(
        ..., description='The event to send to the Pull Request Review.'
    )
    pullRequestId: Optional[ID_aliased] = Field(
        None, description='The Pull Request ID to submit any pending reviews.'
    )
    pullRequestReviewId: Optional[ID_aliased] = Field(
        None, description='The Pull Request Review ID to submit.'
    )
    typename__: Optional[Literal['SubmitPullRequestReviewInput']] = Field(
        'SubmitPullRequestReviewInput', alias='__typename'
    )


class TagNamePatternParametersInput(BaseModel):
    """
    Parameters to be used for the tag_name_pattern rule
    """

    name: Optional[String] = Field(
        None, description='How this rule will appear to users.'
    )
    negate: Optional[Boolean] = Field(
        None, description='If true, the rule will fail if the pattern matches.'
    )
    operator: String = Field(..., description='The operator to use for matching.')
    pattern: String = Field(..., description='The pattern to match with.')
    typename__: Optional[Literal['TagNamePatternParametersInput']] = Field(
        'TagNamePatternParametersInput', alias='__typename'
    )


class TeamDiscussionCommentOrder(BaseModel):
    """
    Ways in which team discussion comment connections can be ordered.
    """

    direction: OrderDirection = Field(
        ..., description='The direction in which to order nodes.'
    )
    field: TeamDiscussionCommentOrderField = Field(
        ..., description='The field by which to order nodes.'
    )
    typename__: Optional[Literal['TeamDiscussionCommentOrder']] = Field(
        'TeamDiscussionCommentOrder', alias='__typename'
    )


class TeamDiscussionOrder(BaseModel):
    """
    Ways in which team discussion connections can be ordered.
    """

    direction: OrderDirection = Field(
        ..., description='The direction in which to order nodes.'
    )
    field: TeamDiscussionOrderField = Field(
        ..., description='The field by which to order nodes.'
    )
    typename__: Optional[Literal['TeamDiscussionOrder']] = Field(
        'TeamDiscussionOrder', alias='__typename'
    )


class TeamMemberOrder(BaseModel):
    """
    Ordering options for team member connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: TeamMemberOrderField = Field(
        ..., description='The field to order team members by.'
    )
    typename__: Optional[Literal['TeamMemberOrder']] = Field(
        'TeamMemberOrder', alias='__typename'
    )


class TeamOrder(BaseModel):
    """
    Ways in which team connections can be ordered.
    """

    direction: OrderDirection = Field(
        ..., description='The direction in which to order nodes.'
    )
    field: TeamOrderField = Field(
        ..., description='The field in which to order nodes by.'
    )
    typename__: Optional[Literal['TeamOrder']] = Field('TeamOrder', alias='__typename')


class TeamRepositoryOrder(BaseModel):
    """
    Ordering options for team repository connections
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: TeamRepositoryOrderField = Field(
        ..., description='The field to order repositories by.'
    )
    typename__: Optional[Literal['TeamRepositoryOrder']] = Field(
        'TeamRepositoryOrder', alias='__typename'
    )


class TransferEnterpriseOrganizationInput(BaseModel):
    """
    Autogenerated input type of TransferEnterpriseOrganization
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    destinationEnterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise where the organization should be transferred.',
    )
    organizationId: ID_aliased = Field(
        ..., description='The ID of the organization to transfer.'
    )
    typename__: Optional[Literal['TransferEnterpriseOrganizationInput']] = Field(
        'TransferEnterpriseOrganizationInput', alias='__typename'
    )


class TransferIssueInput(BaseModel):
    """
    Autogenerated input type of TransferIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    createLabelsIfMissing: Optional[Boolean] = Field(
        False,
        description="Whether to create labels if they don't exist in the target repository (matched by name)",
    )
    issueId: ID_aliased = Field(
        ..., description='The Node ID of the issue to be transferred'
    )
    repositoryId: ID_aliased = Field(
        ...,
        description='The Node ID of the repository the issue should be transferred to',
    )
    typename__: Optional[Literal['TransferIssueInput']] = Field(
        'TransferIssueInput', alias='__typename'
    )


class UnarchiveProjectV2ItemInput(BaseModel):
    """
    Autogenerated input type of UnarchiveProjectV2Item
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    itemId: ID_aliased = Field(
        ..., description='The ID of the ProjectV2Item to unarchive.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to archive the item from.'
    )
    typename__: Optional[Literal['UnarchiveProjectV2ItemInput']] = Field(
        'UnarchiveProjectV2ItemInput', alias='__typename'
    )


class UnarchiveRepositoryInput(BaseModel):
    """
    Autogenerated input type of UnarchiveRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to unarchive.'
    )
    typename__: Optional[Literal['UnarchiveRepositoryInput']] = Field(
        'UnarchiveRepositoryInput', alias='__typename'
    )


class UnfollowOrganizationInput(BaseModel):
    """
    Autogenerated input type of UnfollowOrganization
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizationId: ID_aliased = Field(
        ..., description='ID of the organization to unfollow.'
    )
    typename__: Optional[Literal['UnfollowOrganizationInput']] = Field(
        'UnfollowOrganizationInput', alias='__typename'
    )


class UnfollowUserInput(BaseModel):
    """
    Autogenerated input type of UnfollowUser
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    userId: ID_aliased = Field(..., description='ID of the user to unfollow.')
    typename__: Optional[Literal['UnfollowUserInput']] = Field(
        'UnfollowUserInput', alias='__typename'
    )


class UnlinkProjectV2FromRepositoryInput(BaseModel):
    """
    Autogenerated input type of UnlinkProjectV2FromRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the project to unlink from the repository.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to unlink from the project.'
    )
    typename__: Optional[Literal['UnlinkProjectV2FromRepositoryInput']] = Field(
        'UnlinkProjectV2FromRepositoryInput', alias='__typename'
    )


class UnlinkProjectV2FromTeamInput(BaseModel):
    """
    Autogenerated input type of UnlinkProjectV2FromTeam
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the project to unlink from the team.'
    )
    teamId: ID_aliased = Field(
        ..., description='The ID of the team to unlink from the project.'
    )
    typename__: Optional[Literal['UnlinkProjectV2FromTeamInput']] = Field(
        'UnlinkProjectV2FromTeamInput', alias='__typename'
    )


class UnlinkRepositoryFromProjectInput(BaseModel):
    """
    Autogenerated input type of UnlinkRepositoryFromProject
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project linked to the Repository.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the Repository linked to the Project.'
    )
    typename__: Optional[Literal['UnlinkRepositoryFromProjectInput']] = Field(
        'UnlinkRepositoryFromProjectInput', alias='__typename'
    )


class UnlockLockableInput(BaseModel):
    """
    Autogenerated input type of UnlockLockable
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    lockableId: ID_aliased = Field(..., description='ID of the item to be unlocked.')
    typename__: Optional[Literal['UnlockLockableInput']] = Field(
        'UnlockLockableInput', alias='__typename'
    )


class UnmarkDiscussionCommentAsAnswerInput(BaseModel):
    """
    Autogenerated input type of UnmarkDiscussionCommentAsAnswer
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the discussion comment to unmark as an answer.'
    )
    typename__: Optional[Literal['UnmarkDiscussionCommentAsAnswerInput']] = Field(
        'UnmarkDiscussionCommentAsAnswerInput', alias='__typename'
    )


class UnmarkFileAsViewedInput(BaseModel):
    """
    Autogenerated input type of UnmarkFileAsViewed
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    path: String = Field(..., description='The path of the file to mark as unviewed')
    pullRequestId: ID_aliased = Field(
        ..., description='The Node ID of the pull request.'
    )
    typename__: Optional[Literal['UnmarkFileAsViewedInput']] = Field(
        'UnmarkFileAsViewedInput', alias='__typename'
    )


class UnmarkIssueAsDuplicateInput(BaseModel):
    """
    Autogenerated input type of UnmarkIssueAsDuplicate
    """

    canonicalId: ID_aliased = Field(
        ...,
        description='ID of the issue or pull request currently considered canonical/authoritative/original.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    duplicateId: ID_aliased = Field(
        ...,
        description='ID of the issue or pull request currently marked as a duplicate.',
    )
    typename__: Optional[Literal['UnmarkIssueAsDuplicateInput']] = Field(
        'UnmarkIssueAsDuplicateInput', alias='__typename'
    )


class UnmarkProjectV2AsTemplateInput(BaseModel):
    """
    Autogenerated input type of UnmarkProjectV2AsTemplate
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the Project to unmark as a template.'
    )
    typename__: Optional[Literal['UnmarkProjectV2AsTemplateInput']] = Field(
        'UnmarkProjectV2AsTemplateInput', alias='__typename'
    )


class UnminimizeCommentInput(BaseModel):
    """
    Autogenerated input type of UnminimizeComment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    subjectId: ID_aliased = Field(
        ..., description='The Node ID of the subject to modify.'
    )
    typename__: Optional[Literal['UnminimizeCommentInput']] = Field(
        'UnminimizeCommentInput', alias='__typename'
    )


class UnpinIssueInput(BaseModel):
    """
    Autogenerated input type of UnpinIssue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='The ID of the issue to be unpinned')
    typename__: Optional[Literal['UnpinIssueInput']] = Field(
        'UnpinIssueInput', alias='__typename'
    )


class UnresolveReviewThreadInput(BaseModel):
    """
    Autogenerated input type of UnresolveReviewThread
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    threadId: ID_aliased = Field(..., description='The ID of the thread to unresolve')
    typename__: Optional[Literal['UnresolveReviewThreadInput']] = Field(
        'UnresolveReviewThreadInput', alias='__typename'
    )


class UpdateBranchProtectionRuleInput(BaseModel):
    """
    Autogenerated input type of UpdateBranchProtectionRule
    """

    allowsDeletions: Optional[Boolean] = Field(
        None, description='Can this branch be deleted.'
    )
    allowsForcePushes: Optional[Boolean] = Field(
        None, description='Are force pushes allowed on this branch.'
    )
    blocksCreations: Optional[Boolean] = Field(
        None, description='Is branch creation a protected operation.'
    )
    branchProtectionRuleId: ID_aliased = Field(
        ...,
        description='The global relay id of the branch protection rule to be updated.',
    )
    bypassForcePushActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.',
    )
    bypassPullRequestActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    dismissesStaleReviews: Optional[Boolean] = Field(
        None,
        description='Will new commits pushed to matching branches dismiss pull request review approvals.',
    )
    isAdminEnforced: Optional[Boolean] = Field(
        None, description='Can admins override branch protection.'
    )
    lockAllowsFetchAndMerge: Optional[Boolean] = Field(
        None,
        description='Whether users can pull changes from upstream when the branch is locked. Set to\n`true` to allow fork syncing. Set to `false` to prevent fork syncing.',
    )
    lockBranch: Optional[Boolean] = Field(
        None,
        description='Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.',
    )
    pattern: Optional[String] = Field(
        None, description='The glob-like pattern used to determine matching branches.'
    )
    pushActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to push to matching branches.',
    )
    requireLastPushApproval: Optional[Boolean] = Field(
        None,
        description='Whether the most recent push must be approved by someone other than the person who pushed it',
    )
    requiredApprovingReviewCount: Optional[Int] = Field(
        None,
        description='Number of approving reviews required to update matching branches.',
    )
    requiredDeploymentEnvironments: Optional[List[String]] = Field(
        None, description='The list of required deployment environments'
    )
    requiredStatusCheckContexts: Optional[List[String]] = Field(
        None,
        description='List of required status check contexts that must pass for commits to be accepted to matching branches.',
    )
    requiredStatusChecks: Optional[List[RequiredStatusCheckInput]] = Field(
        None, description='The list of required status checks'
    )
    requiresApprovingReviews: Optional[Boolean] = Field(
        None, description='Are approving reviews required to update matching branches.'
    )
    requiresCodeOwnerReviews: Optional[Boolean] = Field(
        None,
        description='Are reviews from code owners required to update matching branches.',
    )
    requiresCommitSignatures: Optional[Boolean] = Field(
        None, description='Are commits required to be signed.'
    )
    requiresConversationResolution: Optional[Boolean] = Field(
        None, description='Are conversations required to be resolved before merging.'
    )
    requiresDeployments: Optional[Boolean] = Field(
        None, description='Are successful deployments required before merging.'
    )
    requiresLinearHistory: Optional[Boolean] = Field(
        None,
        description='Are merge commits prohibited from being pushed to this branch.',
    )
    requiresStatusChecks: Optional[Boolean] = Field(
        None, description='Are status checks required to update matching branches.'
    )
    requiresStrictStatusChecks: Optional[Boolean] = Field(
        None, description='Are branches required to be up to date before merging.'
    )
    restrictsPushes: Optional[Boolean] = Field(
        None, description='Is pushing to matching branches restricted.'
    )
    restrictsReviewDismissals: Optional[Boolean] = Field(
        None, description='Is dismissal of pull request reviews restricted.'
    )
    reviewDismissalActorIds: Optional[List[ID]] = Field(
        None,
        description='A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.',
    )
    typename__: Optional[Literal['UpdateBranchProtectionRuleInput']] = Field(
        'UpdateBranchProtectionRuleInput', alias='__typename'
    )


class UpdateCheckRunInput(BaseModel):
    """
    Autogenerated input type of UpdateCheckRun
    """

    actions: Optional[List[CheckRunAction]] = Field(
        None,
        description='Possible further actions the integrator can perform, which a user may trigger.',
    )
    checkRunId: ID_aliased = Field(..., description='The node of the check.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    completedAt: Optional[DateTime] = Field(
        None, description='The time that the check run finished.'
    )
    conclusion: Optional[CheckConclusionState] = Field(
        None, description='The final conclusion of the check.'
    )
    detailsUrl: Optional[URI] = Field(
        None,
        description="The URL of the integrator's site that has the full details of the check.",
    )
    externalId: Optional[String] = Field(
        None, description="A reference for the run on the integrator's system."
    )
    name: Optional[String] = Field(None, description='The name of the check.')
    output: Optional[CheckRunOutput] = Field(
        None, description='Descriptive details about the run.'
    )
    repositoryId: ID_aliased = Field(..., description='The node ID of the repository.')
    startedAt: Optional[DateTime] = Field(
        None, description='The time that the check run began.'
    )
    status: Optional[RequestableCheckStatusState] = Field(
        None, description='The current status.'
    )
    typename__: Optional[Literal['UpdateCheckRunInput']] = Field(
        'UpdateCheckRunInput', alias='__typename'
    )


class UpdateCheckSuitePreferencesInput(BaseModel):
    """
    Autogenerated input type of UpdateCheckSuitePreferences
    """

    autoTriggerPreferences: List[CheckSuiteAutoTriggerPreference] = Field(
        ..., description='The check suite preferences to modify.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    typename__: Optional[Literal['UpdateCheckSuitePreferencesInput']] = Field(
        'UpdateCheckSuitePreferencesInput', alias='__typename'
    )


class UpdateDiscussionCommentInput(BaseModel):
    """
    Autogenerated input type of UpdateDiscussionComment
    """

    body: String = Field(..., description='The new contents of the comment body.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    commentId: ID_aliased = Field(
        ..., description='The Node ID of the discussion comment to update.'
    )
    typename__: Optional[Literal['UpdateDiscussionCommentInput']] = Field(
        'UpdateDiscussionCommentInput', alias='__typename'
    )


class UpdateDiscussionInput(BaseModel):
    """
    Autogenerated input type of UpdateDiscussion
    """

    body: Optional[String] = Field(
        None, description='The new contents of the discussion body.'
    )
    categoryId: Optional[ID_aliased] = Field(
        None,
        description='The Node ID of a discussion category within the same repository to change this discussion to.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    discussionId: ID_aliased = Field(
        ..., description='The Node ID of the discussion to update.'
    )
    title: Optional[String] = Field(None, description='The new discussion title.')
    typename__: Optional[Literal['UpdateDiscussionInput']] = Field(
        'UpdateDiscussionInput', alias='__typename'
    )


class UpdateEnterpriseAdministratorRoleInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseAdministratorRole
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ..., description='The ID of the Enterprise which the admin belongs to.'
    )
    login: String = Field(
        ..., description='The login of a administrator whose role is being changed.'
    )
    role: EnterpriseAdministratorRole = Field(
        ..., description='The new role for the Enterprise administrator.'
    )
    typename__: Optional[Literal['UpdateEnterpriseAdministratorRoleInput']] = Field(
        'UpdateEnterpriseAdministratorRoleInput', alias='__typename'
    )


class UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the allow private repository forking setting.',
    )
    policyValue: Optional[EnterpriseAllowPrivateRepositoryForkingPolicyValue] = Field(
        None,
        description='The value for the allow private repository forking policy on the enterprise.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the allow private repository forking setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput']
    ] = Field(
        'UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput', alias='__typename'
    )


class UpdateEnterpriseDefaultRepositoryPermissionSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the base repository permission setting.',
    )
    settingValue: EnterpriseDefaultRepositoryPermissionSettingValue = Field(
        ...,
        description='The value for the base repository permission setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseDefaultRepositoryPermissionSettingInput']
    ] = Field(
        'UpdateEnterpriseDefaultRepositoryPermissionSettingInput', alias='__typename'
    )


class UpdateEnterpriseDeployKeySettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseDeployKeySetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the deploy key setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ..., description='The value for the deploy key setting on the enterprise.'
    )
    typename__: Optional[Literal['UpdateEnterpriseDeployKeySettingInput']] = Field(
        'UpdateEnterpriseDeployKeySettingInput', alias='__typename'
    )


class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can change repository visibility setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the members can change repository visibility setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput']
    ] = Field(
        'UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput',
        alias='__typename',
    )


class UpdateEnterpriseMembersCanCreateRepositoriesSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can create repositories setting.',
    )
    membersCanCreateInternalRepositories: Optional[Boolean] = Field(
        None,
        description='Allow members to create internal repositories. Defaults to current value.',
    )
    membersCanCreatePrivateRepositories: Optional[Boolean] = Field(
        None,
        description='Allow members to create private repositories. Defaults to current value.',
    )
    membersCanCreatePublicRepositories: Optional[Boolean] = Field(
        None,
        description='Allow members to create public repositories. Defaults to current value.',
    )
    membersCanCreateRepositoriesPolicyEnabled: Optional[Boolean] = Field(
        None,
        description='When false, allow member organizations to set their own repository creation member privileges.',
    )
    settingValue: Optional[EnterpriseMembersCanCreateRepositoriesSettingValue] = Field(
        None,
        description='Value for the members can create repositories setting on the enterprise. This\nor the granular public/private/internal allowed fields (but not both) must be provided.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanCreateRepositoriesSettingInput']
    ] = Field(
        'UpdateEnterpriseMembersCanCreateRepositoriesSettingInput', alias='__typename'
    )


class UpdateEnterpriseMembersCanDeleteIssuesSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can delete issues setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the members can delete issues setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanDeleteIssuesSettingInput']
    ] = Field('UpdateEnterpriseMembersCanDeleteIssuesSettingInput', alias='__typename')


class UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can delete repositories setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the members can delete repositories setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput']
    ] = Field(
        'UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput', alias='__typename'
    )


class UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can invite collaborators setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the members can invite collaborators setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput']
    ] = Field(
        'UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput', alias='__typename'
    )


class UpdateEnterpriseMembersCanMakePurchasesSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can make purchases setting.',
    )
    settingValue: EnterpriseMembersCanMakePurchasesSettingValue = Field(
        ...,
        description='The value for the members can make purchases setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanMakePurchasesSettingInput']
    ] = Field('UpdateEnterpriseMembersCanMakePurchasesSettingInput', alias='__typename')


class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can update protected branches setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the members can update protected branches setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput']
    ] = Field(
        'UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput',
        alias='__typename',
    )


class UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the members can view dependency insights setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the members can view dependency insights setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput']
    ] = Field(
        'UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput',
        alias='__typename',
    )


class UpdateEnterpriseOrganizationProjectsSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the organization projects setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the organization projects setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseOrganizationProjectsSettingInput']
    ] = Field('UpdateEnterpriseOrganizationProjectsSettingInput', alias='__typename')


class UpdateEnterpriseOwnerOrganizationRoleInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ..., description='The ID of the Enterprise which the owner belongs to.'
    )
    organizationId: ID_aliased = Field(
        ..., description='The ID of the organization for membership change.'
    )
    organizationRole: RoleInOrganization = Field(
        ..., description='The role to assume in the organization.'
    )
    typename__: Optional[Literal['UpdateEnterpriseOwnerOrganizationRoleInput']] = Field(
        'UpdateEnterpriseOwnerOrganizationRoleInput', alias='__typename'
    )


class UpdateEnterpriseProfileInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseProfile
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: Optional[String] = Field(
        None, description='The description of the enterprise.'
    )
    enterpriseId: ID_aliased = Field(..., description='The Enterprise ID to update.')
    location: Optional[String] = Field(
        None, description='The location of the enterprise.'
    )
    name: Optional[String] = Field(None, description='The name of the enterprise.')
    websiteUrl: Optional[String] = Field(
        None, description="The URL of the enterprise's website."
    )
    typename__: Optional[Literal['UpdateEnterpriseProfileInput']] = Field(
        'UpdateEnterpriseProfileInput', alias='__typename'
    )


class UpdateEnterpriseRepositoryProjectsSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the repository projects setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ...,
        description='The value for the repository projects setting on the enterprise.',
    )
    typename__: Optional[Literal['UpdateEnterpriseRepositoryProjectsSettingInput']] = (
        Field('UpdateEnterpriseRepositoryProjectsSettingInput', alias='__typename')
    )


class UpdateEnterpriseTeamDiscussionsSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the team discussions setting.',
    )
    settingValue: EnterpriseEnabledDisabledSettingValue = Field(
        ..., description='The value for the team discussions setting on the enterprise.'
    )
    typename__: Optional[Literal['UpdateEnterpriseTeamDiscussionsSettingInput']] = (
        Field('UpdateEnterpriseTeamDiscussionsSettingInput', alias='__typename')
    )


class UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the two-factor authentication disallowed methods setting.',
    )
    settingValue: EnterpriseDisallowedMethodsSettingValue = Field(
        ...,
        description='The value for the two-factor authentication disallowed methods setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput']
    ] = Field(
        'UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput',
        alias='__typename',
    )


class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enterpriseId: ID_aliased = Field(
        ...,
        description='The ID of the enterprise on which to set the two factor authentication required setting.',
    )
    settingValue: EnterpriseEnabledSettingValue = Field(
        ...,
        description='The value for the two factor authentication required setting on the enterprise.',
    )
    typename__: Optional[
        Literal['UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput']
    ] = Field(
        'UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput',
        alias='__typename',
    )


class UpdateEnvironmentInput(BaseModel):
    """
    Autogenerated input type of UpdateEnvironment
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    environmentId: ID_aliased = Field(
        ..., description='The node ID of the environment.'
    )
    preventSelfReview: Optional[Boolean] = Field(
        None,
        description='Whether deployments to this environment can be approved by the user who created the deployment.',
    )
    reviewers: Optional[List[ID]] = Field(
        None,
        description='The ids of users or teams that can approve deployments to this environment',
    )
    waitTimer: Optional[Int] = Field(None, description='The wait timer in minutes.')
    typename__: Optional[Literal['UpdateEnvironmentInput']] = Field(
        'UpdateEnvironmentInput', alias='__typename'
    )


class UpdateIpAllowListEnabledSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateIpAllowListEnabledSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ownerId: ID_aliased = Field(
        ...,
        description='The ID of the owner on which to set the IP allow list enabled setting.',
    )
    settingValue: IpAllowListEnabledSettingValue = Field(
        ..., description='The value for the IP allow list enabled setting.'
    )
    typename__: Optional[Literal['UpdateIpAllowListEnabledSettingInput']] = Field(
        'UpdateIpAllowListEnabledSettingInput', alias='__typename'
    )


class UpdateIpAllowListEntryInput(BaseModel):
    """
    Autogenerated input type of UpdateIpAllowListEntry
    """

    allowListValue: String = Field(
        ..., description='An IP address or range of addresses in CIDR notation.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ipAllowListEntryId: ID_aliased = Field(
        ..., description='The ID of the IP allow list entry to update.'
    )
    isActive: Boolean = Field(
        ...,
        description='Whether the IP allow list entry is active when an IP allow list is enabled.',
    )
    name: Optional[String] = Field(
        None, description='An optional name for the IP allow list entry.'
    )
    typename__: Optional[Literal['UpdateIpAllowListEntryInput']] = Field(
        'UpdateIpAllowListEntryInput', alias='__typename'
    )


class UpdateIpAllowListForInstalledAppsEnabledSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ownerId: ID_aliased = Field(..., description='The ID of the owner.')
    settingValue: IpAllowListForInstalledAppsEnabledSettingValue = Field(
        ...,
        description='The value for the IP allow list configuration for installed GitHub Apps setting.',
    )
    typename__: Optional[
        Literal['UpdateIpAllowListForInstalledAppsEnabledSettingInput']
    ] = Field(
        'UpdateIpAllowListForInstalledAppsEnabledSettingInput', alias='__typename'
    )


class UpdateIssueCommentInput(BaseModel):
    """
    Autogenerated input type of UpdateIssueComment
    """

    body: String = Field(..., description='The updated text of the comment.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The ID of the IssueComment to modify.')
    typename__: Optional[Literal['UpdateIssueCommentInput']] = Field(
        'UpdateIssueCommentInput', alias='__typename'
    )


class UpdateIssueInput(BaseModel):
    """
    Autogenerated input type of UpdateIssue
    """

    assigneeIds: Optional[List[ID]] = Field(
        None, description='An array of Node IDs of users for this issue.'
    )
    body: Optional[String] = Field(
        None, description='The body for the issue description.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The ID of the Issue to modify.')
    issueTypeId: Optional[ID_aliased] = Field(
        None, description='The ID of the Issue Type for this issue.'
    )
    labelIds: Optional[List[ID]] = Field(
        None, description='An array of Node IDs of labels for this issue.'
    )
    milestoneId: Optional[ID_aliased] = Field(
        None, description='The Node ID of the milestone for this issue.'
    )
    projectIds: Optional[List[ID]] = Field(
        None,
        description='An array of Node IDs for projects associated with this issue.',
    )
    state: Optional[IssueState] = Field(None, description='The desired issue state.')
    title: Optional[String] = Field(None, description='The title for the issue.')
    typename__: Optional[Literal['UpdateIssueInput']] = Field(
        'UpdateIssueInput', alias='__typename'
    )


class UpdateIssueIssueTypeInput(BaseModel):
    """
    Autogenerated input type of UpdateIssueIssueType
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    issueId: ID_aliased = Field(..., description='The ID of the issue to update')
    issueTypeId: Optional[ID_aliased] = Field(
        None, description='The ID of the issue type to update on the issue'
    )
    typename__: Optional[Literal['UpdateIssueIssueTypeInput']] = Field(
        'UpdateIssueIssueTypeInput', alias='__typename'
    )


class UpdateIssueTypeInput(BaseModel):
    """
    Autogenerated input type of UpdateIssueType
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    color: Optional[IssueTypeColor] = Field(
        None, description='Color for the issue type'
    )
    description: Optional[String] = Field(
        None, description='The description of the issue type'
    )
    isEnabled: Optional[Boolean] = Field(
        None,
        description='Whether or not the issue type is enabled for the organization',
    )
    issueTypeId: ID_aliased = Field(
        ..., description='The ID of the issue type to update'
    )
    name: Optional[String] = Field(None, description='The name of the issue type')
    typename__: Optional[Literal['UpdateIssueTypeInput']] = Field(
        'UpdateIssueTypeInput', alias='__typename'
    )


class UpdateLabelInput(BaseModel):
    """
    Autogenerated input type of UpdateLabel
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    color: Optional[String] = Field(
        None,
        description='A 6 character hex code, without the leading #, identifying the updated color of the label.',
    )
    description: Optional[String] = Field(
        None, description='A brief description of the label, such as its purpose.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the label to be updated.')
    name: Optional[String] = Field(None, description='The updated name of the label.')
    typename__: Optional[Literal['UpdateLabelInput']] = Field(
        'UpdateLabelInput', alias='__typename'
    )


class UpdateNotificationRestrictionSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateNotificationRestrictionSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    ownerId: ID_aliased = Field(
        ...,
        description='The ID of the owner on which to set the restrict notifications setting.',
    )
    settingValue: NotificationRestrictionSettingValue = Field(
        ..., description='The value for the restrict notifications setting.'
    )
    typename__: Optional[Literal['UpdateNotificationRestrictionSettingInput']] = Field(
        'UpdateNotificationRestrictionSettingInput', alias='__typename'
    )


class UpdateOrganizationAllowPrivateRepositoryForkingSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    forkingEnabled: Boolean = Field(
        ..., description='Enable forking of private repositories in the organization?'
    )
    organizationId: ID_aliased = Field(
        ...,
        description='The ID of the organization on which to set the allow private repository forking setting.',
    )
    typename__: Optional[
        Literal['UpdateOrganizationAllowPrivateRepositoryForkingSettingInput']
    ] = Field(
        'UpdateOrganizationAllowPrivateRepositoryForkingSettingInput',
        alias='__typename',
    )


class UpdateOrganizationWebCommitSignoffSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    organizationId: ID_aliased = Field(
        ...,
        description='The ID of the organization on which to set the web commit signoff setting.',
    )
    webCommitSignoffRequired: Boolean = Field(
        ...,
        description='Enable signoff on web-based commits for repositories in the organization?',
    )
    typename__: Optional[Literal['UpdateOrganizationWebCommitSignoffSettingInput']] = (
        Field('UpdateOrganizationWebCommitSignoffSettingInput', alias='__typename')
    )


class UpdateParametersInput(BaseModel):
    """
    Only allow users with bypass permission to update matching refs.
    """

    updateAllowsFetchAndMerge: Boolean = Field(
        ..., description='Branch can pull changes from its upstream repository'
    )
    typename__: Optional[Literal['UpdateParametersInput']] = Field(
        'UpdateParametersInput', alias='__typename'
    )


class UpdatePatreonSponsorabilityInput(BaseModel):
    """
    Autogenerated input type of UpdatePatreonSponsorability
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    enablePatreonSponsorships: Boolean = Field(
        ...,
        description='Whether Patreon tiers should be shown on the GitHub Sponsors profile page,\nallowing potential sponsors to make their payment through Patreon instead of GitHub.',
    )
    sponsorableLogin: Optional[String] = Field(
        None,
        description='The username of the organization with the GitHub Sponsors profile, if any.\nDefaults to the GitHub Sponsors profile for the authenticated user if omitted.',
    )
    typename__: Optional[Literal['UpdatePatreonSponsorabilityInput']] = Field(
        'UpdatePatreonSponsorabilityInput', alias='__typename'
    )


class UpdateProjectCardInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectCard
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    isArchived: Optional[Boolean] = Field(
        None, description='Whether or not the ProjectCard should be archived'
    )
    note: Optional[String] = Field(None, description='The note of ProjectCard.')
    projectCardId: ID_aliased = Field(..., description='The ProjectCard ID to update.')
    typename__: Optional[Literal['UpdateProjectCardInput']] = Field(
        'UpdateProjectCardInput', alias='__typename'
    )


class UpdateProjectColumnInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectColumn
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: String = Field(..., description='The name of project column.')
    projectColumnId: ID_aliased = Field(
        ..., description='The ProjectColumn ID to update.'
    )
    typename__: Optional[Literal['UpdateProjectColumnInput']] = Field(
        'UpdateProjectColumnInput', alias='__typename'
    )


class UpdateProjectInput(BaseModel):
    """
    Autogenerated input type of UpdateProject
    """

    body: Optional[String] = Field(None, description='The description of project.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    name: Optional[String] = Field(None, description='The name of project.')
    projectId: ID_aliased = Field(..., description='The Project ID to update.')
    public: Optional[Boolean] = Field(
        None, description='Whether the project is public or not.'
    )
    state: Optional[ProjectState] = Field(
        None, description='Whether the project is open or closed.'
    )
    typename__: Optional[Literal['UpdateProjectInput']] = Field(
        'UpdateProjectInput', alias='__typename'
    )


class UpdateProjectV2CollaboratorsInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectV2Collaborators
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    collaborators: List[ProjectV2Collaborator] = Field(
        ..., description='The collaborators to update.'
    )
    projectId: ID_aliased = Field(
        ..., description='The ID of the project to update the collaborators for.'
    )
    typename__: Optional[Literal['UpdateProjectV2CollaboratorsInput']] = Field(
        'UpdateProjectV2CollaboratorsInput', alias='__typename'
    )


class UpdateProjectV2DraftIssueInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectV2DraftIssue
    """

    assigneeIds: Optional[List[ID]] = Field(
        None, description='The IDs of the assignees of the draft issue.'
    )
    body: Optional[String] = Field(None, description='The body of the draft issue.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    draftIssueId: ID_aliased = Field(
        ..., description='The ID of the draft issue to update.'
    )
    title: Optional[String] = Field(None, description='The title of the draft issue.')
    typename__: Optional[Literal['UpdateProjectV2DraftIssueInput']] = Field(
        'UpdateProjectV2DraftIssueInput', alias='__typename'
    )


class UpdateProjectV2FieldInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectV2Field
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    fieldId: ID_aliased = Field(..., description='The ID of the field to update.')
    iterationConfiguration: Optional[ProjectV2IterationFieldConfigurationInput] = Field(
        None, description='Configuration for an iteration field.'
    )
    name: Optional[String] = Field(None, description='The name to update.')
    singleSelectOptions: Optional[List[ProjectV2SingleSelectFieldOptionInput]] = Field(
        None,
        description='Options for a field of type SINGLE_SELECT. If empty, no changes will be made\nto the options. If values are present, they will overwrite the existing\noptions for the field.',
    )
    typename__: Optional[Literal['UpdateProjectV2FieldInput']] = Field(
        'UpdateProjectV2FieldInput', alias='__typename'
    )


class UpdateProjectV2Input(BaseModel):
    """
    Autogenerated input type of UpdateProjectV2
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    closed: Optional[Boolean] = Field(
        None, description='Set the project to closed or open.'
    )
    projectId: ID_aliased = Field(..., description='The ID of the Project to update.')
    public: Optional[Boolean] = Field(
        None, description='Set the project to public or private.'
    )
    readme: Optional[String] = Field(
        None, description='Set the readme description of the project.'
    )
    shortDescription: Optional[String] = Field(
        None, description='Set the short description of the project.'
    )
    title: Optional[String] = Field(None, description='Set the title of the project.')
    typename__: Optional[Literal['UpdateProjectV2Input']] = Field(
        'UpdateProjectV2Input', alias='__typename'
    )


class UpdateProjectV2ItemFieldValueInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectV2ItemFieldValue
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    fieldId: ID_aliased = Field(..., description='The ID of the field to be updated.')
    itemId: ID_aliased = Field(..., description='The ID of the item to be updated.')
    projectId: ID_aliased = Field(..., description='The ID of the Project.')
    value: ProjectV2FieldValue = Field(
        ..., description='The value which will be set on the field.'
    )
    typename__: Optional[Literal['UpdateProjectV2ItemFieldValueInput']] = Field(
        'UpdateProjectV2ItemFieldValueInput', alias='__typename'
    )


class UpdateProjectV2ItemPositionInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectV2ItemPosition
    """

    afterId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the item to position this item after. If omitted or set to null the item will be moved to top.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    itemId: ID_aliased = Field(..., description='The ID of the item to be moved.')
    projectId: ID_aliased = Field(..., description='The ID of the Project.')
    typename__: Optional[Literal['UpdateProjectV2ItemPositionInput']] = Field(
        'UpdateProjectV2ItemPositionInput', alias='__typename'
    )


class UpdateProjectV2StatusUpdateInput(BaseModel):
    """
    Autogenerated input type of UpdateProjectV2StatusUpdate
    """

    body: Optional[String] = Field(None, description='The body of the status update.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    startDate: Optional[Date] = Field(
        None, description='The start date of the status update.'
    )
    status: Optional[ProjectV2StatusUpdateStatus] = Field(
        None, description='The status of the status update.'
    )
    statusUpdateId: ID_aliased = Field(
        ..., description='The ID of the status update to be updated.'
    )
    targetDate: Optional[Date] = Field(
        None, description='The target date of the status update.'
    )
    typename__: Optional[Literal['UpdateProjectV2StatusUpdateInput']] = Field(
        'UpdateProjectV2StatusUpdateInput', alias='__typename'
    )


class UpdatePullRequestBranchInput(BaseModel):
    """
    Autogenerated input type of UpdatePullRequestBranch
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    expectedHeadOid: Optional[GitObjectID] = Field(
        None, description='The head ref oid for the upstream branch.'
    )
    pullRequestId: ID_aliased = Field(
        ..., description='The Node ID of the pull request.'
    )
    updateMethod: Optional[PullRequestBranchUpdateMethod] = Field(
        None,
        description="The update branch method to use. If omitted, defaults to 'MERGE'",
    )
    typename__: Optional[Literal['UpdatePullRequestBranchInput']] = Field(
        'UpdatePullRequestBranchInput', alias='__typename'
    )


class UpdatePullRequestInput(BaseModel):
    """
    Autogenerated input type of UpdatePullRequest
    """

    assigneeIds: Optional[List[ID]] = Field(
        None, description='An array of Node IDs of users for this pull request.'
    )
    baseRefName: Optional[String] = Field(
        None,
        description='The name of the branch you want your changes pulled into. This should be an existing branch\non the current repository.',
    )
    body: Optional[String] = Field(
        None, description='The contents of the pull request.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    labelIds: Optional[List[ID]] = Field(
        None, description='An array of Node IDs of labels for this pull request.'
    )
    maintainerCanModify: Optional[Boolean] = Field(
        None, description='Indicates whether maintainers can modify the pull request.'
    )
    milestoneId: Optional[ID_aliased] = Field(
        None, description='The Node ID of the milestone for this pull request.'
    )
    projectIds: Optional[List[ID]] = Field(
        None,
        description='An array of Node IDs for projects associated with this pull request.',
    )
    pullRequestId: ID_aliased = Field(
        ..., description='The Node ID of the pull request.'
    )
    state: Optional[PullRequestUpdateState] = Field(
        None, description='The target state of the pull request.'
    )
    title: Optional[String] = Field(None, description='The title of the pull request.')
    typename__: Optional[Literal['UpdatePullRequestInput']] = Field(
        'UpdatePullRequestInput', alias='__typename'
    )


class UpdatePullRequestReviewCommentInput(BaseModel):
    """
    Autogenerated input type of UpdatePullRequestReviewComment
    """

    body: String = Field(..., description='The text of the comment.')
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReviewCommentId: ID_aliased = Field(
        ..., description='The Node ID of the comment to modify.'
    )
    typename__: Optional[Literal['UpdatePullRequestReviewCommentInput']] = Field(
        'UpdatePullRequestReviewCommentInput', alias='__typename'
    )


class UpdatePullRequestReviewInput(BaseModel):
    """
    Autogenerated input type of UpdatePullRequestReview
    """

    body: String = Field(
        ..., description='The contents of the pull request review body.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    pullRequestReviewId: ID_aliased = Field(
        ..., description='The Node ID of the pull request review to modify.'
    )
    typename__: Optional[Literal['UpdatePullRequestReviewInput']] = Field(
        'UpdatePullRequestReviewInput', alias='__typename'
    )


class UpdateRefInput(BaseModel):
    """
    Autogenerated input type of UpdateRef
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    force: Optional[Boolean] = Field(
        False, description='Permit updates of branch Refs that are not fast-forwards?'
    )
    oid: GitObjectID = Field(
        ..., description='The GitObjectID that the Ref shall be updated to target.'
    )
    refId: ID_aliased = Field(..., description='The Node ID of the Ref to be updated.')
    typename__: Optional[Literal['UpdateRefInput']] = Field(
        'UpdateRefInput', alias='__typename'
    )


class UpdateRefsInput(BaseModel):
    """
    Autogenerated input type of UpdateRefs
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    refUpdates: List[RefUpdate] = Field(..., description='A list of ref updates.')
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    typename__: Optional[Literal['UpdateRefsInput']] = Field(
        'UpdateRefsInput', alias='__typename'
    )


class UpdateRepositoryInput(BaseModel):
    """
    Autogenerated input type of UpdateRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: Optional[String] = Field(
        None,
        description='A new description for the repository. Pass an empty string to erase the existing description.',
    )
    hasDiscussionsEnabled: Optional[Boolean] = Field(
        None,
        description='Indicates if the repository should have the discussions feature enabled.',
    )
    hasIssuesEnabled: Optional[Boolean] = Field(
        None,
        description='Indicates if the repository should have the issues feature enabled.',
    )
    hasProjectsEnabled: Optional[Boolean] = Field(
        None,
        description='Indicates if the repository should have the project boards feature enabled.',
    )
    hasSponsorshipsEnabled: Optional[Boolean] = Field(
        None,
        description='Indicates if the repository displays a Sponsor button for financial contributions.',
    )
    hasWikiEnabled: Optional[Boolean] = Field(
        None,
        description='Indicates if the repository should have the wiki feature enabled.',
    )
    homepageUrl: Optional[URI] = Field(
        None,
        description='The URL for a web page about this repository. Pass an empty string to erase the existing URL.',
    )
    name: Optional[String] = Field(None, description='The new name of the repository.')
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to update.'
    )
    template: Optional[Boolean] = Field(
        None,
        description='Whether this repository should be marked as a template such that anyone who\ncan access it can create new repositories with the same files and directory structure.',
    )
    typename__: Optional[Literal['UpdateRepositoryInput']] = Field(
        'UpdateRepositoryInput', alias='__typename'
    )


class UpdateRepositoryRulesetInput(BaseModel):
    """
    Autogenerated input type of UpdateRepositoryRuleset
    """

    bypassActors: Optional[List[RepositoryRulesetBypassActorInput]] = Field(
        None,
        description='A list of actors that are allowed to bypass rules in this ruleset.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    conditions: Optional[RepositoryRuleConditionsInput] = Field(
        None, description='The list of conditions for this ruleset'
    )
    enforcement: Optional[RuleEnforcement] = Field(
        None, description='The enforcement level for this ruleset'
    )
    name: Optional[String] = Field(None, description='The name of the ruleset.')
    repositoryRulesetId: ID_aliased = Field(
        ..., description='The global relay id of the repository ruleset to be updated.'
    )
    rules: Optional[List[RepositoryRuleInput]] = Field(
        None, description='The list of rules for this ruleset'
    )
    target: Optional[RepositoryRulesetTarget] = Field(
        None, description='The target of the ruleset.'
    )
    typename__: Optional[Literal['UpdateRepositoryRulesetInput']] = Field(
        'UpdateRepositoryRulesetInput', alias='__typename'
    )


class UpdateRepositoryWebCommitSignoffSettingInput(BaseModel):
    """
    Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='The ID of the repository to update.'
    )
    webCommitSignoffRequired: Boolean = Field(
        ...,
        description='Indicates if the repository should require signoff on web-based commits.',
    )
    typename__: Optional[Literal['UpdateRepositoryWebCommitSignoffSettingInput']] = (
        Field('UpdateRepositoryWebCommitSignoffSettingInput', alias='__typename')
    )


class UpdateSponsorshipPreferencesInput(BaseModel):
    """
    Autogenerated input type of UpdateSponsorshipPreferences
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    privacyLevel: Optional[SponsorshipPrivacy] = Field(
        'PUBLIC',
        description='Specify whether others should be able to see that the sponsor is sponsoring\nthe sponsorable. Public visibility still does not reveal which tier is used.',
    )
    receiveEmails: Optional[Boolean] = Field(
        True,
        description='Whether the sponsor should receive email updates from the sponsorable.',
    )
    sponsorId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who is acting as the sponsor, paying for\nthe sponsorship. Required if sponsorLogin is not given.',
    )
    sponsorLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who is acting as the sponsor, paying\nfor the sponsorship. Required if sponsorId is not given.',
    )
    sponsorableId: Optional[ID_aliased] = Field(
        None,
        description='The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.',
    )
    sponsorableLogin: Optional[String] = Field(
        None,
        description='The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.',
    )
    typename__: Optional[Literal['UpdateSponsorshipPreferencesInput']] = Field(
        'UpdateSponsorshipPreferencesInput', alias='__typename'
    )


class UpdateSubscriptionInput(BaseModel):
    """
    Autogenerated input type of UpdateSubscription
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    state: SubscriptionState = Field(
        ..., description='The new state of the subscription.'
    )
    subscribableId: ID_aliased = Field(
        ..., description='The Node ID of the subscribable object to modify.'
    )
    typename__: Optional[Literal['UpdateSubscriptionInput']] = Field(
        'UpdateSubscriptionInput', alias='__typename'
    )


class UpdateTeamDiscussionCommentInput(BaseModel):
    """
    Autogenerated input type of UpdateTeamDiscussionComment
    """

    body: String = Field(..., description='The updated text of the comment.')
    bodyVersion: Optional[String] = Field(
        None, description='The current version of the body content.'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The ID of the comment to modify.')
    typename__: Optional[Literal['UpdateTeamDiscussionCommentInput']] = Field(
        'UpdateTeamDiscussionCommentInput', alias='__typename'
    )


class UpdateTeamDiscussionInput(BaseModel):
    """
    Autogenerated input type of UpdateTeamDiscussion
    """

    body: Optional[String] = Field(
        None, description='The updated text of the discussion.'
    )
    bodyVersion: Optional[String] = Field(
        None,
        description='The current version of the body content. If provided, this update operation\nwill be rejected if the given version does not match the latest version on the server.',
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(..., description='The Node ID of the discussion to modify.')
    pinned: Optional[Boolean] = Field(
        None,
        description='If provided, sets the pinned state of the updated discussion.',
    )
    title: Optional[String] = Field(
        None, description='The updated title of the discussion.'
    )
    typename__: Optional[Literal['UpdateTeamDiscussionInput']] = Field(
        'UpdateTeamDiscussionInput', alias='__typename'
    )


class UpdateTeamReviewAssignmentInput(BaseModel):
    """
    Autogenerated input type of UpdateTeamReviewAssignment
    """

    algorithm: Optional[TeamReviewAssignmentAlgorithm] = Field(
        'ROUND_ROBIN', description='The algorithm to use for review assignment'
    )
    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    countMembersAlreadyRequested: Optional[Boolean] = Field(
        True,
        description='Count any members whose review has already been requested against the required number of members assigned to review',
    )
    enabled: Boolean = Field(..., description='Turn on or off review assignment')
    excludedTeamMemberIds: Optional[List[ID]] = Field(
        None, description='An array of team member IDs to exclude'
    )
    id: ID_aliased = Field(
        ..., description='The Node ID of the team to update review assignments of'
    )
    includeChildTeamMembers: Optional[Boolean] = Field(
        True, description='Include the members of any child teams when assigning'
    )
    notifyTeam: Optional[Boolean] = Field(
        True, description='Notify the entire team of the PR if it is delegated'
    )
    removeTeamRequest: Optional[Boolean] = Field(
        True, description='Remove the team review request when assigning'
    )
    teamMemberCount: Optional[Int] = Field(
        1, description='The number of team members to assign'
    )
    typename__: Optional[Literal['UpdateTeamReviewAssignmentInput']] = Field(
        'UpdateTeamReviewAssignmentInput', alias='__typename'
    )


class UpdateTeamsRepositoryInput(BaseModel):
    """
    Autogenerated input type of UpdateTeamsRepository
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    permission: RepositoryPermission = Field(
        ..., description='Permission that should be granted to the teams.'
    )
    repositoryId: ID_aliased = Field(
        ..., description='Repository ID being granted access to.'
    )
    teamIds: List[ID] = Field(
        ..., description='A list of teams being granted access. Limit: 10'
    )
    typename__: Optional[Literal['UpdateTeamsRepositoryInput']] = Field(
        'UpdateTeamsRepositoryInput', alias='__typename'
    )


class UpdateTopicsInput(BaseModel):
    """
    Autogenerated input type of UpdateTopics
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    repositoryId: ID_aliased = Field(..., description='The Node ID of the repository.')
    topicNames: List[String] = Field(..., description='An array of topic names.')
    typename__: Optional[Literal['UpdateTopicsInput']] = Field(
        'UpdateTopicsInput', alias='__typename'
    )


class UpdateUserListInput(BaseModel):
    """
    Autogenerated input type of UpdateUserList
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    description: Optional[String] = Field(None, description='A description of the list')
    isPrivate: Optional[Boolean] = Field(
        None, description='Whether or not the list is private'
    )
    listId: ID_aliased = Field(..., description='The ID of the list to update.')
    name: Optional[String] = Field(None, description='The name of the list')
    typename__: Optional[Literal['UpdateUserListInput']] = Field(
        'UpdateUserListInput', alias='__typename'
    )


class UpdateUserListsForItemInput(BaseModel):
    """
    Autogenerated input type of UpdateUserListsForItem
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    itemId: ID_aliased = Field(..., description='The item to add to the list')
    listIds: List[ID] = Field(
        ..., description='The lists to which this item should belong'
    )
    suggestedListIds: Optional[List[ID]] = Field(
        None, description='The suggested lists to create and add this item to'
    )
    typename__: Optional[Literal['UpdateUserListsForItemInput']] = Field(
        'UpdateUserListsForItemInput', alias='__typename'
    )


class UserStatusOrder(BaseModel):
    """
    Ordering options for user status connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: UserStatusOrderField = Field(
        ..., description='The field to order user statuses by.'
    )
    typename__: Optional[Literal['UserStatusOrder']] = Field(
        'UserStatusOrder', alias='__typename'
    )


class VerifiableDomainOrder(BaseModel):
    """
    Ordering options for verifiable domain connections.
    """

    direction: OrderDirection = Field(..., description='The ordering direction.')
    field: VerifiableDomainOrderField = Field(
        ..., description='The field to order verifiable domains by.'
    )
    typename__: Optional[Literal['VerifiableDomainOrder']] = Field(
        'VerifiableDomainOrder', alias='__typename'
    )


class VerifyVerifiableDomainInput(BaseModel):
    """
    Autogenerated input type of VerifyVerifiableDomain
    """

    clientMutationId: Optional[String] = Field(
        None, description='A unique identifier for the client performing the mutation.'
    )
    id: ID_aliased = Field(
        ..., description='The ID of the verifiable domain to verify.'
    )
    typename__: Optional[Literal['VerifyVerifiableDomainInput']] = Field(
        'VerifyVerifiableDomainInput', alias='__typename'
    )


class WorkflowFileReferenceInput(BaseModel):
    """
    A workflow that must run for this rule to pass
    """

    path: String = Field(..., description='The path to the workflow file')
    ref: Optional[String] = Field(
        None, description='The ref (branch or tag) of the workflow file to use'
    )
    repositoryId: Int = Field(
        ..., description='The ID of the repository where the workflow is defined'
    )
    sha: Optional[String] = Field(
        None, description='The commit SHA of the workflow file to use'
    )
    typename__: Optional[Literal['WorkflowFileReferenceInput']] = Field(
        'WorkflowFileReferenceInput', alias='__typename'
    )


class WorkflowRunOrder(BaseModel):
    """
    Ways in which lists of workflow runs can be ordered upon return.
    """

    direction: OrderDirection = Field(
        ...,
        description='The direction in which to order workflow runs by the specified field.',
    )
    field: WorkflowRunOrderField = Field(
        ..., description='The field by which to order workflows.'
    )
    typename__: Optional[Literal['WorkflowRunOrder']] = Field(
        'WorkflowRunOrder', alias='__typename'
    )


class WorkflowsParametersInput(BaseModel):
    """
    Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
    """

    doNotEnforceOnCreate: Optional[Boolean] = Field(
        None,
        description='Allow repositories and branches to be created if a check would otherwise prohibit it.',
    )
    workflows: List[WorkflowFileReferenceInput] = Field(
        ..., description='Workflows that must pass for this rule to pass.'
    )
    typename__: Optional[Literal['WorkflowsParametersInput']] = Field(
        'WorkflowsParametersInput', alias='__typename'
    )


# Types that can be assigned to issues.
Assignee: TypeAlias = Union[
    'Bot',
    'Mannequin',
    'Organization',
    'User',
]


# Types that can initiate an audit log event.
AuditEntryActor: TypeAlias = Union[
    'Bot',
    'Organization',
    'User',
]


# Used when either Bot or User are accepted.
BotOrUser: TypeAlias = Union[
    'Bot',
    'User',
]


# Types which can be actors for `BranchActorAllowance` objects.
BranchActorAllowanceActor: TypeAlias = Union[
    'App',
    'Team',
    'User',
]


# Types that can represent a repository ruleset bypass actor.
BypassActor: TypeAlias = Union[
    'App',
    'Team',
]


# An object which can have its data claimed or claim data from another.
Claimable: TypeAlias = Union[
    'Mannequin',
    'User',
]


# The object which triggered a `ClosedEvent`.
Closer: TypeAlias = Union[
    'Commit',
    'ProjectV2',
    'PullRequest',
]


# Represents either a issue the viewer can access or a restricted contribution.
CreatedIssueOrRestrictedContribution: TypeAlias = Union[
    'CreatedIssueContribution',
    'RestrictedContribution',
]


# Represents either a pull request the viewer can access or a restricted contribution.
CreatedPullRequestOrRestrictedContribution: TypeAlias = Union[
    'CreatedPullRequestContribution',
    'RestrictedContribution',
]


# Represents either a repository the viewer can access or a restricted contribution.
CreatedRepositoryOrRestrictedContribution: TypeAlias = Union[
    'CreatedRepositoryContribution',
    'RestrictedContribution',
]


# Users and teams.
DeploymentReviewer: TypeAlias = Union[
    'Team',
    'User',
]


# An object that is a member of an enterprise.
EnterpriseMember: TypeAlias = Union[
    'EnterpriseUserAccount',
    'User',
]


# Types that can own an IP allow list.
IpAllowListOwner: TypeAlias = Union[
    'App',
    'Enterprise',
    'Organization',
]


# Used for return value of Repository.issueOrPullRequest.
IssueOrPullRequest: TypeAlias = Union[
    'Issue',
    'PullRequest',
]


# An item in an issue timeline
IssueTimelineItem: TypeAlias = Union[
    'AssignedEvent',
    'ClosedEvent',
    'Commit',
    'CrossReferencedEvent',
    'DemilestonedEvent',
    'IssueComment',
    'LabeledEvent',
    'LockedEvent',
    'MilestonedEvent',
    'ReferencedEvent',
    'RenamedTitleEvent',
    'ReopenedEvent',
    'SubscribedEvent',
    'TransferredEvent',
    'UnassignedEvent',
    'UnlabeledEvent',
    'UnlockedEvent',
    'UnsubscribedEvent',
    'UserBlockedEvent',
]


# An item in an issue timeline
IssueTimelineItems: TypeAlias = Union[
    'AddedToProjectEvent',
    'AssignedEvent',
    'ClosedEvent',
    'CommentDeletedEvent',
    'ConnectedEvent',
    'ConvertedNoteToIssueEvent',
    'ConvertedToDiscussionEvent',
    'CrossReferencedEvent',
    'DemilestonedEvent',
    'DisconnectedEvent',
    'IssueComment',
    'IssueTypeAddedEvent',
    'IssueTypeChangedEvent',
    'IssueTypeRemovedEvent',
    'LabeledEvent',
    'LockedEvent',
    'MarkedAsDuplicateEvent',
    'MentionedEvent',
    'MilestonedEvent',
    'MovedColumnsInProjectEvent',
    'ParentIssueAddedEvent',
    'ParentIssueRemovedEvent',
    'PinnedEvent',
    'ReferencedEvent',
    'RemovedFromProjectEvent',
    'RenamedTitleEvent',
    'ReopenedEvent',
    'SubIssueAddedEvent',
    'SubIssueRemovedEvent',
    'SubscribedEvent',
    'TransferredEvent',
    'UnassignedEvent',
    'UnlabeledEvent',
    'UnlockedEvent',
    'UnmarkedAsDuplicateEvent',
    'UnpinnedEvent',
    'UnsubscribedEvent',
    'UserBlockedEvent',
]


# Types that can be inside a Milestone.
MilestoneItem: TypeAlias = Union[
    'Issue',
    'PullRequest',
]


# Types of memberships that can be restored for an Organization member.
OrgRestoreMemberAuditEntryMembership: TypeAlias = Union[
    'OrgRestoreMemberMembershipOrganizationAuditEntryData',
    'OrgRestoreMemberMembershipRepositoryAuditEntryData',
    'OrgRestoreMemberMembershipTeamAuditEntryData',
]


# An audit entry in an organization audit log.
OrganizationAuditEntry: TypeAlias = Union[
    'MembersCanDeleteReposClearAuditEntry',
    'MembersCanDeleteReposDisableAuditEntry',
    'MembersCanDeleteReposEnableAuditEntry',
    'OauthApplicationCreateAuditEntry',
    'OrgAddBillingManagerAuditEntry',
    'OrgAddMemberAuditEntry',
    'OrgBlockUserAuditEntry',
    'OrgConfigDisableCollaboratorsOnlyAuditEntry',
    'OrgConfigEnableCollaboratorsOnlyAuditEntry',
    'OrgCreateAuditEntry',
    'OrgDisableOauthAppRestrictionsAuditEntry',
    'OrgDisableSamlAuditEntry',
    'OrgDisableTwoFactorRequirementAuditEntry',
    'OrgEnableOauthAppRestrictionsAuditEntry',
    'OrgEnableSamlAuditEntry',
    'OrgEnableTwoFactorRequirementAuditEntry',
    'OrgInviteMemberAuditEntry',
    'OrgInviteToBusinessAuditEntry',
    'OrgOauthAppAccessApprovedAuditEntry',
    'OrgOauthAppAccessBlockedAuditEntry',
    'OrgOauthAppAccessDeniedAuditEntry',
    'OrgOauthAppAccessRequestedAuditEntry',
    'OrgOauthAppAccessUnblockedAuditEntry',
    'OrgRemoveBillingManagerAuditEntry',
    'OrgRemoveMemberAuditEntry',
    'OrgRemoveOutsideCollaboratorAuditEntry',
    'OrgRestoreMemberAuditEntry',
    'OrgUnblockUserAuditEntry',
    'OrgUpdateDefaultRepositoryPermissionAuditEntry',
    'OrgUpdateMemberAuditEntry',
    'OrgUpdateMemberRepositoryCreationPermissionAuditEntry',
    'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry',
    'PrivateRepositoryForkingDisableAuditEntry',
    'PrivateRepositoryForkingEnableAuditEntry',
    'RepoAccessAuditEntry',
    'RepoAddMemberAuditEntry',
    'RepoAddTopicAuditEntry',
    'RepoArchivedAuditEntry',
    'RepoChangeMergeSettingAuditEntry',
    'RepoConfigDisableAnonymousGitAccessAuditEntry',
    'RepoConfigDisableCollaboratorsOnlyAuditEntry',
    'RepoConfigDisableContributorsOnlyAuditEntry',
    'RepoConfigDisableSockpuppetDisallowedAuditEntry',
    'RepoConfigEnableAnonymousGitAccessAuditEntry',
    'RepoConfigEnableCollaboratorsOnlyAuditEntry',
    'RepoConfigEnableContributorsOnlyAuditEntry',
    'RepoConfigEnableSockpuppetDisallowedAuditEntry',
    'RepoConfigLockAnonymousGitAccessAuditEntry',
    'RepoConfigUnlockAnonymousGitAccessAuditEntry',
    'RepoCreateAuditEntry',
    'RepoDestroyAuditEntry',
    'RepoRemoveMemberAuditEntry',
    'RepoRemoveTopicAuditEntry',
    'RepositoryVisibilityChangeDisableAuditEntry',
    'RepositoryVisibilityChangeEnableAuditEntry',
    'TeamAddMemberAuditEntry',
    'TeamAddRepositoryAuditEntry',
    'TeamChangeParentTeamAuditEntry',
    'TeamRemoveMemberAuditEntry',
    'TeamRemoveRepositoryAuditEntry',
]


# Used for argument of CreateProjectV2 mutation.
OrganizationOrUser: TypeAlias = Union[
    'Organization',
    'User',
]


# Types that can grant permissions on a repository to a user
PermissionGranter: TypeAlias = Union[
    'Organization',
    'Repository',
    'Team',
]


# Types that can be pinned to a profile page.
PinnableItem: TypeAlias = Union[
    'Gist',
    'Repository',
]


# Types that can be inside Project Cards.
ProjectCardItem: TypeAlias = Union[
    'Issue',
    'PullRequest',
]


# Possible collaborators for a project.
ProjectV2Actor: TypeAlias = Union[
    'Team',
    'User',
]


# Configurations for project fields.
ProjectV2FieldConfiguration: TypeAlias = Union[
    'ProjectV2Field',
    'ProjectV2IterationField',
    'ProjectV2SingleSelectField',
]


# Types that can be inside Project Items.
ProjectV2ItemContent: TypeAlias = Union[
    'DraftIssue',
    'Issue',
    'PullRequest',
]


# Project field values
ProjectV2ItemFieldValue: TypeAlias = Union[
    'ProjectV2ItemFieldDateValue',
    'ProjectV2ItemFieldIterationValue',
    'ProjectV2ItemFieldLabelValue',
    'ProjectV2ItemFieldMilestoneValue',
    'ProjectV2ItemFieldNumberValue',
    'ProjectV2ItemFieldPullRequestValue',
    'ProjectV2ItemFieldRepositoryValue',
    'ProjectV2ItemFieldReviewerValue',
    'ProjectV2ItemFieldSingleSelectValue',
    'ProjectV2ItemFieldTextValue',
    'ProjectV2ItemFieldUserValue',
]


# An item in a pull request timeline
PullRequestTimelineItem: TypeAlias = Union[
    'AssignedEvent',
    'BaseRefDeletedEvent',
    'BaseRefForcePushedEvent',
    'ClosedEvent',
    'Commit',
    'CommitCommentThread',
    'CrossReferencedEvent',
    'DemilestonedEvent',
    'DeployedEvent',
    'DeploymentEnvironmentChangedEvent',
    'HeadRefDeletedEvent',
    'HeadRefForcePushedEvent',
    'HeadRefRestoredEvent',
    'IssueComment',
    'LabeledEvent',
    'LockedEvent',
    'MergedEvent',
    'MilestonedEvent',
    'PullRequestReview',
    'PullRequestReviewComment',
    'PullRequestReviewThread',
    'ReferencedEvent',
    'RenamedTitleEvent',
    'ReopenedEvent',
    'ReviewDismissedEvent',
    'ReviewRequestRemovedEvent',
    'ReviewRequestedEvent',
    'SubscribedEvent',
    'UnassignedEvent',
    'UnlabeledEvent',
    'UnlockedEvent',
    'UnsubscribedEvent',
    'UserBlockedEvent',
]


# An item in a pull request timeline
PullRequestTimelineItems: TypeAlias = Union[
    'AddedToMergeQueueEvent',
    'AddedToProjectEvent',
    'AssignedEvent',
    'AutoMergeDisabledEvent',
    'AutoMergeEnabledEvent',
    'AutoRebaseEnabledEvent',
    'AutoSquashEnabledEvent',
    'AutomaticBaseChangeFailedEvent',
    'AutomaticBaseChangeSucceededEvent',
    'BaseRefChangedEvent',
    'BaseRefDeletedEvent',
    'BaseRefForcePushedEvent',
    'ClosedEvent',
    'CommentDeletedEvent',
    'ConnectedEvent',
    'ConvertToDraftEvent',
    'ConvertedNoteToIssueEvent',
    'ConvertedToDiscussionEvent',
    'CrossReferencedEvent',
    'DemilestonedEvent',
    'DeployedEvent',
    'DeploymentEnvironmentChangedEvent',
    'DisconnectedEvent',
    'HeadRefDeletedEvent',
    'HeadRefForcePushedEvent',
    'HeadRefRestoredEvent',
    'IssueComment',
    'IssueTypeAddedEvent',
    'IssueTypeChangedEvent',
    'IssueTypeRemovedEvent',
    'LabeledEvent',
    'LockedEvent',
    'MarkedAsDuplicateEvent',
    'MentionedEvent',
    'MergedEvent',
    'MilestonedEvent',
    'MovedColumnsInProjectEvent',
    'ParentIssueAddedEvent',
    'ParentIssueRemovedEvent',
    'PinnedEvent',
    'PullRequestCommit',
    'PullRequestCommitCommentThread',
    'PullRequestReview',
    'PullRequestReviewThread',
    'PullRequestRevisionMarker',
    'ReadyForReviewEvent',
    'ReferencedEvent',
    'RemovedFromMergeQueueEvent',
    'RemovedFromProjectEvent',
    'RenamedTitleEvent',
    'ReopenedEvent',
    'ReviewDismissedEvent',
    'ReviewRequestRemovedEvent',
    'ReviewRequestedEvent',
    'SubIssueAddedEvent',
    'SubIssueRemovedEvent',
    'SubscribedEvent',
    'TransferredEvent',
    'UnassignedEvent',
    'UnlabeledEvent',
    'UnlockedEvent',
    'UnmarkedAsDuplicateEvent',
    'UnpinnedEvent',
    'UnsubscribedEvent',
    'UserBlockedEvent',
]


# Types that can be an actor.
PushAllowanceActor: TypeAlias = Union[
    'App',
    'Team',
    'User',
]


# Types that can be assigned to reactions.
Reactor: TypeAlias = Union[
    'Bot',
    'Mannequin',
    'Organization',
    'User',
]


# Any referencable object
ReferencedSubject: TypeAlias = Union[
    'Issue',
    'PullRequest',
]


# An object which has a renamable title
RenamedTitleSubject: TypeAlias = Union[
    'Issue',
    'PullRequest',
]


# Types that can be requested reviewers.
RequestedReviewer: TypeAlias = Union[
    'Bot',
    'Mannequin',
    'Team',
    'User',
]


# Types that can be an actor.
ReviewDismissalAllowanceActor: TypeAlias = Union[
    'App',
    'Team',
    'User',
]


# Types which can be parameters for `RepositoryRule` objects.
RuleParameters: TypeAlias = Union[
    'BranchNamePatternParameters',
    'CodeScanningParameters',
    'CommitAuthorEmailPatternParameters',
    'CommitMessagePatternParameters',
    'CommitterEmailPatternParameters',
    'FileExtensionRestrictionParameters',
    'FilePathRestrictionParameters',
    'MaxFilePathLengthParameters',
    'MaxFileSizeParameters',
    'MergeQueueParameters',
    'PullRequestParameters',
    'RequiredDeploymentsParameters',
    'RequiredStatusChecksParameters',
    'TagNamePatternParameters',
    'UpdateParameters',
    'WorkflowsParameters',
]


# Types which can have `RepositoryRule` objects.
RuleSource: TypeAlias = Union[
    'Enterprise',
    'Organization',
    'Repository',
]


# The results of a search.
SearchResultItem: TypeAlias = Union[
    'App',
    'Discussion',
    'Issue',
    'MarketplaceListing',
    'Organization',
    'PullRequest',
    'Repository',
    'User',
]


# Entities that can sponsor others via GitHub Sponsors
Sponsor: TypeAlias = Union[
    'Organization',
    'User',
]


# Entities that can be sponsored via GitHub Sponsors
SponsorableItem: TypeAlias = Union[
    'Organization',
    'User',
]


# A record that can be featured on a GitHub Sponsors profile.
SponsorsListingFeatureableItem: TypeAlias = Union[
    'Repository',
    'User',
]


# Types that can be inside a StatusCheckRollup context.
StatusCheckRollupContext: TypeAlias = Union[
    'CheckRun',
    'StatusContext',
]


# Types that can be added to a user list.
UserListItems: TypeAlias = Repository


# Types that can own a verifiable domain.
VerifiableDomainOwner: TypeAlias = Union[
    'Enterprise',
    'Organization',
]
